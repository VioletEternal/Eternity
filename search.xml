<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>夏记</title>
      <link href="/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E6%97%AD%E6%97%A5%E4%B8%9C%E5%8D%87%E7%9A%84%E4%BC%A0%E8%AF%B4/summer-write/"/>
      <url>/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E6%97%AD%E6%97%A5%E4%B8%9C%E5%8D%87%E7%9A%84%E4%BC%A0%E8%AF%B4/summer-write/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5b247ab4780e37c61283bce342639a963ee213e9f90250825dae8347f509cae8">04fe18b1daf74b036cd248623dca6e2da80f30ca32b8cbf8cd114b340201b0b8d916852d9b56eb3fde1e2e5b077aa8ef145df1d374157e87e975ea158e02f3daaebc75a6a3e9af783d78c877e28838ac9a13211a3beb4ccff05956f66cdc9daa7bb5233ce26441af57ecf8f9caa0fe8e29337010a5a53362ab37b284633af4b8b7cf420c239b71fdd15b311571b09a153e25ccb8f31b0088c02779c216d13d05fba3955ba7d2367222c44fd4b83d3ca375ab909706b66c341076cd1a4b090b4bd856b56e90f4976254f96805740221ba511999571b87f5a93b24f82182db780f7271f8d35e6af2e1cae00bb3704221509fa99f76cc7683801d09a72d3e08ae07abb2a485312ee06c8befe60a970aad38dc527ff9a1221b121cb807a744c3442548689f82457b8571dd9c4d9f6b24937a971f7a9f052159132b2a377c559e596192351c5130ec7a50f2967cce9a891c5c190e8ed989e7ff01effcc69bcc9bbea464606ecc6fe6defdc92a564db2dbfc0678eac3399a6bbdaab64751de96fa510a0f0fda75379c41c7d7dcf1ca125a052f7c4d1f85cac17a61407fe4aaa7cab2141972dce606ba8f2df83dd2cf9ca82c9aa34c78dae472107343e59569e803d1623b46e010d37cb306cc7a4c1808a859d85d89ef51c20c2a7af707af866208c0d0911970860ce2d65ae8b80a5460db10d012be20aa26b7a5d3f4eacd246ba0d6c94a4d624009eeb688a940f19436f11feadb5061bf84c7997161615222c278c8cf0f13b5ec5c3e050406b262e0352065b008d52ebf8300ef21179e90df96ef5bbf0d4e38b83a5a2b40e93a1920f63c4680cb44f093648b692642283487a00a0b44f67a1a98ae5bbaadbac0ff99b28a0469fa828a4f97b00ae76964c13595b56b7381977b1e3ebdce122c79788568a4e6e5d4ddc7a24928de5582823f51afeeca565ab1390f7bc76f41e21a067a44d294290a1bfd6b82a000a40fc4dedb9289f04f6eb8656ddc99718f623d97fbfc217b1af9bd2c26ca85d3d8782160c8eb3ed936df016e23e51fac21982ca4d85b14418226e86a0920cf415445a69903b3c8f25011bb9cfd958ae4ab124dca8ce07edadeab613743d1ce15aeddf9de404a4f3e4781bb4ab1dba0f5c0773402434bbec0d150ce668333b252f57a20c24680c636e1a7bb894820183370d12b3f63ddd0f7ba8bdf8dc3f3b23900d74ce9945c35af1d6cc73d192bbb3d1145d248a99917abcaea76bc23ec4fb983ce7fb52a5f7a345367b2679fe684e6fbaf74195d144a06f9806d41e784deeee66ac354bd8b1ca55fbc30d1abf78108636524a091cff1fa0421bb2f1d04bcca022bf14540d90f4359d9aa5c80725e1204628e93901df0c4db7011dc0330c35002e2032bc39c56224d8537ab8b97dd280265e5a33c76fce3555e07c8147683fd7573778859271a5eca5a3ff6bbd75268e2017296bff03010c5c5a37475bd102ef94d3ac4e654da6ec53d6071b5e7c0366e383e67c7590182e8de422844d547d9d86b684ee47865d8dea2fb5522a678f771fa0f21a93689efd5f254c941198df08bf3d36b7ca54e5e63f9611b686acb4a49ca94874c0ef0e39414ee7f9a07a2e827f3179e4afe14889d384653b80151bb39e99d8980a73871380d7a59ced5d20c766c194d91900b5b0e3c18a5f68330cbd266d08dae2896cbb853b799a15fa258553c220122a56ece498ad4898e5accd106b61ec581ee2b9fac7381f1b71688877c84033033cd5654bce57e7966a011769607c3a5b0e7a38fc43077e7b1a8ac0ed16eaf875a39a44c9ca26f2b9bef26fb704b929e313187d079476884e614682d1f8e22fb4bb2b9f4f19085b216c4116855aa2decc7bf25425f2adbfc3d75fc78768531ad547657a880615da8d5180fd35f668c8c2c6b5f9d880429dec3977658ddd21310d2c90a356841f0ab31f3f6ee939fa046349582a8e9f5172eb8db670303ec9139b852817f715f425af5d1e1adf7a3c8944c9ba51c5685edeaf03d2821442ac95893891b574168e5632ac8e8a18bdf0030d66868633cca4ceb37c480f9d0f8bd10daa24258902d035566b95bfc8b0d5d4670c0774791659f9b99f3a7109aa6fb6a6adade7358e9b52a4dfd53fa633897c225bb6ae0b075a80a182cee5f22f96684c1a28209684db5b19357ae4f0bc1d5489513d89c63d5d4182c39e95776bb6752210153651a2fb6fed313c65b814c791d215c256c0bd679f6e00c91a7d3be13db767f462681f73998d1bc82f6eca19146b31da8212218e607fff884762220f2de469ef7c891f211df00fe8bcecf2c9230b2397d6e96f36c99e1b1c939d41f42f368bdd4fd5ef9f8a28ec2f0f8d91bce37317b1b6c1fa933a2dbd22a454a0c8232790fccfd8bced066969ecb1fd8fea485c306881cca7cfe74cf2721f9e29ce7f37306d0922aae4338e5a1e3c4acfb5b520622e287574ed4fa68fb83048b031b7b9ac3c91a02a72610bdba57222c4aa7aa7e052843e1200f317ff569ea6911a3c64076cef7333a0ef6d5ec2166888c68285d1e366e87a312200b6859522015ef19e5c4fd93bfc47da407d55d1f0201d07ad85febbcda9e0c800b37d03c1ae2ecf8f7d56d809949b6c454d1885cb23eca8061f5d17a95a4e3986843ab9d768dcd289bb66f7f329617de40d1fd9026b51f4036a84af10e0c48f642eb4180b4c4e9ff674ab559a7b806dcf7f6dba6405bb4b34adbb059efba839801e87e38e6b96c91bcd9f37f67e2a46b0c48a07369830e180601c105803b953372cac2d8ffa01a1cc921b2ed53c42132afb6f84eb8c187cd5ec602add74b955e7c0b3b1ec1cbfa29a1b4b4f57aed20f978cd46d0bc26df2a62e613888ab4d5ed76b19a6fe1501c535778f7e985c63dd735585fc0dea2e1389b13eac46e2f476351a3859e83910a078faf12919415a497ebca83319e681f805daf713f892172c718b1d5de4a69da4a9b2b11a1f71cbe441c1930c791c39cb5e197db09ab8d5d486b1545d1eee6ad2ebffd301de917d9dbfe0787a63bd722c4c08f7b719e2f2a138ed27087c7312664d6a4f4ca71e7dcb46ab6731940b6b185a6780b986f04402a870f00986be42814e1e28ef8fac4556f53c6f275723da191de43bf84bbbc2253f974a396e635363aeaceb39b33e740859984a96375ec7a94e272effd39a81baefd8b7c7354fd19a74781197328d1ae462f4c65d3da201bf136deab1b5b3f454d982edbebc67c713877b8d476fe84cf507d4f67fe4e9b96e07ddc48658b31f8c18ea3ee671c26b6fafeae82e9ed454de807e7df0433fb25cdc2fb443331e2531770c758017e52895e9a9a756cfa9462a98abc6c1834512c364aeabfdeaa1483f1772a3fe6a3e98db38596e6e0f24233952c63be3c76575daa61eaac48a0eb0792cdebdcd5a7adcad9c964a8f70fcc5db51186784ba89c7107eba98d21d0f3839a6bee79c7f9de9beef656c4bba25420e77a39b753c33bd556e38ad54fda2b5cd61b7dc3787197344b63d185aeb966a59cac16baa07347cb29cead51346db73b05fa50b0d3c99429c5fa4977815e75f473971ab2d298d86a4254dd530b23e3e2eb607db2210c698513bbc5a461d73e404d2afb1807032af353d3c9345a8763dc3715099b916b4e3df58da44d19e81fca0252cfb95077cf74b8bb57c137f45aea5e5ba073033943076e4ea1e3977b28a01ea05a33d1adfd64fe38aa554638ae1c9235af8b0fef99ed520ff0c080d5606621de8befa75d3f22f68af984a06b48b4d7c115cead7312486d6b48fb9580e2e35e7c24b841faa23d0d8cb809a256fcd0e491eb74a957fb8a3a892a12400bb696fb9ecf6140ab18311eb1c98abc7d8efa07856b61d92f1f36f807d4de182b52509ec3ec2b9c6c32695c53f00e933373259a07c9030d2ff95fd40e75d5076d608982c2dedc7c7ae24c13b355811b0c1bd4f784d5a187265b73145b5017b505654b31cc20599608f2b064ed2a1a6c4cb0d8a3198e1c01313dc8937dc01128f44ca626405ecdc227937d8233b358d2a85ae82f3b6194fd9ae61f40b0740edff2f4ccc8162c9e727ef6db57921bae5ba963b9b46517a09214240621498c0de16699f4af705b57cf6a05eb5c483112928b8428f628840038e74a2f2a204770aae3f0d2ec495b68d9764f9a9ef4e3a346b034fbcedd21d9f0e9d4f7be759443b80c1eb99de22de674bc5cb9ca191cdddc08322ed7dfc91809d214ba05afafa779c3063bb0d9925d5b0bf6f18a4f1df5d51bf00c6e37c7192c7e095d3df1550453b7c2dea55740ca2b3f3f37828f0a7d96f88a6b948a2c4f78784a82ef1c29d600390409b700fed826aeef04ae2d6530919c91abf03b6ff78966b3989520aef6e67bf06c14159c01bfc9246e5502b2fe05361cdb840cab6cadddbfaf23c12b40d9c9e416802e791609813d35d413e27b3e19be210a6d283341b2b567548610fe3710c1c05cde11b2a46412b265d37879159c58e8e023c54170379e3542a29ee2eda6668d9187f97cba382c7aadf0b3ff71877263cd5b40a664852d26bfd35c2fdbf4b0c37b40c09a3c136dbd6185418825fa760c8f6b4ac454f3ebc6f2f28ba16047682920693a5816b0f33b47478057c018b76d37738c07b67455050bfde002924888e228e97e55c45e8cce9741fed5ac703aa6ea6bdfeb1ff2b3c518dd511fdcd56071d5ef8850fb325852fa56f8dd3994ed1d3902c5db6fecb89977634fe47e7241a2143d561a0389f9a61c37b353182885037d700758bdac9b05f6d85862d1d69e48ff4f3e43960e1bcff375f67036155850dcdcc3c38f4694c424fc76dcb1a8edccfb8694925bfab9a4aa1c55ead00259bcea4763ead5b52c8176cf8a635e50</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Eternalにはいくつかの秘密があります。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/Eternity/lib/hbe.js"></script><link href="/Eternity/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 短篇小说 </category>
          
          <category> 旭日东升的传说 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dp及其它优化</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-else/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-else/</url>
      
        <content type="html"><![CDATA[<p>“纵使天地渺远，空间永远不够。”<br>“即便今昔深邃，时间不可窥探。”</p><span id="more"></span><h2 id="概率期望-dp"><a href="#概率期望-dp" class="headerlink" title="概率期望 dp"></a>概率期望 dp</h2><h3 id="期望-x-概率-x-动态规划"><a href="#期望-x-概率-x-动态规划" class="headerlink" title="期望 x 概率 x 动态规划"></a>期望 x 概率 x 动态规划</h3><p>概率的定义：</p><p>对于事件 $A$ ，在进行了多次试验时候，其发生的次数与总实验次数之比 $\frac{N_A}{n}$ 会逐渐稳定在某一数值 $p$ 的附近，则 $p$ 被称为 $A$ 在该条件下发生的概率，记为 $P(A)=p$ 。</p><p>期望的定义：</p><p>对于一个事件 $A$ ，如果 $A$ 的结果有 $k$ 种，每一种结果的权值为 $a_i$ ，概率为 $p_i$ ，则 $A$ 事件的期望记为 $E(A)$ ，则有 $E(A)=\sum\limits_{i=1}^{k} a_ip_i$ 。</p><h3 id="概率-dp"><a href="#概率-dp" class="headerlink" title="概率 dp"></a>概率 dp</h3><p>采用顺推法，从初始状态（一般来说是 $dp_{0,0..0}$ ）到所有的限制，同一般的 DP 类似的，难点依然是对状态转移方程的刻画，只是这类题目经过了概率论知识的包装。</p><p><a href="https://www.luogu.com.cn/problem/CF148D">例题 CF148D Bag of Mice</a></p><p><a href="https://oi-wiki.org/dp/probability/#dp">参考资料</a></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> W,B;</span><br><span class="line"><span class="type">double</span> dp[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-pro.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-pro.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(W,B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=W;++i) dp[i][<span class="number">0</span>]=<span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=B;++i) dp[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=W;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=B;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> ix=i,jx=j;</span><br><span class="line">            dp[i][j]+=(<span class="type">double</span>)(ix/(ix+jx));</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=<span class="number">3</span>) dp[i][j]+=<span class="built_in">double</span>(jx/(ix+jx))*<span class="built_in">double</span>((jx<span class="number">-1</span>)/(ix+jx<span class="number">-1</span>))</span><br><span class="line">                        *<span class="built_in">double</span>((jx<span class="number">-2</span>)/(ix+jx<span class="number">-2</span>))*dp[i][j<span class="number">-3</span>];</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">1</span>&amp;&amp;j&gt;=<span class="number">2</span>) dp[i][j]+=<span class="built_in">double</span>(jx/(ix+jx))*dp[i<span class="number">-1</span>][j<span class="number">-2</span>]</span><br><span class="line">                        *<span class="built_in">double</span>((jx<span class="number">-1</span>)/(ix+jx<span class="number">-1</span>))*<span class="built_in">double</span>(ix/(ix+jx<span class="number">-2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.9lf&quot;</span>,dp[W][B]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="期望-dp"><a href="#期望-dp" class="headerlink" title="期望 dp"></a>期望 dp</h3><blockquote><p>正难则反，这是亘古不变的真理。</p></blockquote><p>设有事件 $A$ ，则有 $dp[x]$ 表示在 $x$ 次实现之后 $A$ 满足某种条件 $T$ 的期望。一般而言，如果有 $dp[M]=1$ ，则采用逆序推理，否则有 $dp[0]=0$ ，然后顺序推理。</p><p>接下来 $4$ 道题，都是对期望 dp 的讲解。</p><hr><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="FAVDICE"><a href="#FAVDICE" class="headerlink" title="FAVDICE"></a><a href="https://www.luogu.com.cn/problem/SP1026">FAVDICE</a></h4><p>用 $dp[x]$ 表示当前已经投掷了 $x$ 面，投到 $n$ 面的期望次数。</p><p>对于 $dp[n]$ ，因为我们已经投掷了 $n$ 面了，所以不需要再投就可以满足条件，所以有 $dp[n]=0$ 。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,N;</span><br><span class="line"><span class="type">double</span> dp[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-probability.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-probability.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(N);</span><br><span class="line">        dp[N]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">            dp[i]=dp[i+<span class="number">1</span>]+<span class="number">1.0</span>*N/(N-i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,dp[<span class="number">0</span>]); </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h4 id="换教室"><a href="#换教室" class="headerlink" title="换教室"></a><a href="https://www.luogu.com.cn/problem/P1850">换教室</a></h4><p>能够被称为是期望 dp 的模板题，<del>虽然我没有这么觉得</del>。</p><p>因为 $v\le 300$ ，则保证了我们求出全源最短路的复杂度，使用 Floyd 的 $\mathcal O(n^3)$ 求出并在 $\mathcal O(1)$ 内查询。</p><p>然后其实就会变成一个标准的概率期望的动态规划问题：</p><script type="math/tex; mode=display">dp[i][j][0]=min\begin{cases} dp[i-1][j][0] + Dist[Now_{i-1}][Now_{i}]\\dp[i-1][j][1]+Dist[Now_{i-1}][Now_{i}]\times (1-p[i-1])+Dist[Oth_{i-1}][Now_{i}]\times p[i-1]\end{cases}</script><script type="math/tex; mode=display">dp[i][j][1]=min\begin{cases}dp[i-1][j-1][0]+Dist[Now_{i-1}][Now_{i}]\times(1-p[i])+Dist[Now_{i-1}][Oth_{i}]\times p[i]\\\\dp[i-1][j-1][1]\\+Dist[Oth_{i-1}][Oth_{i}]\times p[i-1]\times p[i]\\+Dist[Oth_{i-1}][Now_{i}]\times p[i-1]\times(1-p[i])\\+Dist[Now_{i-1}][Oth_{i}]\times (1-p[i-1])\times p[i]\\+Dist[Now_{i-1}][Now_{i}]\times (1-p[i-1])\times(1-p[i]) \end{cases}</script><p>这应该是我写过最复杂的式子了。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">2e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXV=<span class="number">3e2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,V,E;</span><br><span class="line"><span class="type">int</span> Now[MAXN],Oth[MAXN];</span><br><span class="line"><span class="type">double</span> p[MAXN],dp[MAXN][MAXM][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> Dist[MAXV][MAXV];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=V;++k)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=V;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=V;++j)</span><br><span class="line">                Dist[i][j]=<span class="built_in">min</span>(Dist[i][j],Dist[i][k]+Dist[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-prob.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-prob.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">memset</span>(Dist,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(Dist));</span><br><span class="line">    <span class="built_in">read</span>(N,M,V,E);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Now[i]);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Oth[i]);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;p[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=E;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        Dist[u][v]=Dist[v][u]=<span class="built_in">min</span>(Dist[u][v],w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Floyd</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=V;++i) Dist[i][i]=Dist[i][<span class="number">0</span>]=Dist[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=M;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;++k)</span><br><span class="line">                dp[i][j][k]=<span class="number">1e9</span>;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=M;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j][<span class="number">0</span>]=<span class="built_in">min</span>(dp[i][j][<span class="number">0</span>],<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j][<span class="number">0</span>]+Dist[Now[i<span class="number">-1</span>]][Now[i]],dp[i<span class="number">-1</span>][j][<span class="number">1</span>]+Dist[Now[i<span class="number">-1</span>]][Now[i]]*(<span class="number">1.0</span>-p[i<span class="number">-1</span>])+Dist[Oth[i<span class="number">-1</span>]][Now[i]]*p[i<span class="number">-1</span>]));</span><br><span class="line">            <span class="keyword">if</span>(j&gt;<span class="number">0</span>) dp[i][j][<span class="number">1</span>]=<span class="built_in">min</span>(dp[i][j][<span class="number">1</span>],<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>]+Dist[Now[i<span class="number">-1</span>]][Now[i]]*(<span class="number">1.0</span>-p[i])+Dist[Now[i<span class="number">-1</span>]][Oth[i]]*p[i],dp[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">1</span>]+Dist[Oth[i<span class="number">-1</span>]][Oth[i]]*p[i]*p[i<span class="number">-1</span>]+Dist[Oth[i<span class="number">-1</span>]][Now[i]]*p[i<span class="number">-1</span>]*(<span class="number">1.0</span>-p[i])+Dist[Now[i<span class="number">-1</span>]][Oth[i]]*(<span class="number">1.0</span>-p[i<span class="number">-1</span>])*p[i]+Dist[Now[i<span class="number">-1</span>]][Now[i]]*(<span class="number">1.0</span>-p[i<span class="number">-1</span>])*(<span class="number">1.0</span>-p[i])));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">double</span> ans=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=M;++i) ans=<span class="built_in">min</span>(ans,<span class="built_in">min</span>(dp[N][i][<span class="number">0</span>],dp[N][i][<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=N;++i)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;=M;++j) printf(&quot;%.2lf &quot;,dp[i][j]);</span></span><br><span class="line"><span class="comment">        puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 2 3 3</span></span><br><span class="line"><span class="comment">2 1 2</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">0.8 0.2 0.5 </span></span><br><span class="line"><span class="comment">1 2 5</span></span><br><span class="line"><span class="comment">1 3 3</span></span><br><span class="line"><span class="comment">2 3 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h4 id="Tribles"><a href="#Tribles" class="headerlink" title="Tribles"></a><a href="https://www.luogu.com.cn/problem/UVA11021">Tribles</a></h4><p>有一个很贴切的事例：如果一个人被车创死的概率为 $p$ ，则两个人同时被车创死的概率就应该是 $p^2$ ，这是理所当然的。</p><p>所以，我们可以忽视条件 $k$ ，把 $k$ 只生物当做 $1$ 只来对待，然后转化成常规的概率 dp 即可。</p><p>对应有 $n$ 种情况，用 $dp[i]$ 表示第 $i$ 天死亡的概率，则有：</p><p>$dp[i]=\sum dp[i-1]^j\times p[j]$ ，其中 $p[j]$ 是这只生物变成 $j$ 只的概率。</p><p>而答案就是 $dp[M]^k$ 即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Test,N,K,M;</span><br><span class="line"><span class="type">double</span> p[MAXN],dp[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-pro.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-pro.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(Test);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> Case=<span class="number">1</span>;Case&lt;=Test;++Case)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="built_in">sizeof</span>(p));</span><br><span class="line">        <span class="built_in">read</span>(N,K,M);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;p[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;N;++j)</span><br><span class="line">                dp[i]+=p[j]*<span class="built_in">pow</span>(dp[i<span class="number">-1</span>],j);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %.7lf\n&quot;</span>,Case,<span class="built_in">pow</span>(dp[M],K));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3 1 1</span></span><br><span class="line"><span class="comment">0.33</span></span><br><span class="line"><span class="comment">0.34</span></span><br><span class="line"><span class="comment">0.33</span></span><br><span class="line"><span class="comment">3 1 2</span></span><br><span class="line"><span class="comment">0.33</span></span><br><span class="line"><span class="comment">0.34</span></span><br><span class="line"><span class="comment">0.33</span></span><br><span class="line"><span class="comment">3 1 2</span></span><br><span class="line"><span class="comment">0.5</span></span><br><span class="line"><span class="comment">0.0</span></span><br><span class="line"><span class="comment">0.5</span></span><br><span class="line"><span class="comment">4 2 2</span></span><br><span class="line"><span class="comment">0.5</span></span><br><span class="line"><span class="comment">0.0</span></span><br><span class="line"><span class="comment">0.0</span></span><br><span class="line"><span class="comment">0.5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h4 id="奖励关"><a href="#奖励关" class="headerlink" title="奖励关"></a>奖励关</h4><hr><h2 id="矩阵加速-dp"><a href="#矩阵加速-dp" class="headerlink" title="矩阵加速 dp"></a>矩阵加速 dp</h2><p>字面意思，使用矩阵快速幂来优化动态规划已达到时间复杂度的限制。</p><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><h4 id="分块"><a href="#分块" class="headerlink" title="分块"></a><a href="https://www.luogu.com.cn/problem/P5343">分块</a></h4><p>对于 $60\% $ 的做法：考虑首先求出 $a$ 与 $b$ 的所有重复元素，然后进行背包：</p><p>$f[i]=\sum f[i-j],j\ \text{合法}$</p><p>这样的复杂度大概是 $\mathcal O(100n)$ ，勉强能过。</p><p>但是对于 $n\le 10^{18}$ ，那真是异想天开。</p><p>考虑加速。无论如何，有 $0\le x\le 100$ ，则 $f[i]$ 最多是从 $f[i-100]\sim f[i-1]$ 转移而来的，那么考虑一个 $1\times Len$ 的矩阵（$len$ 表示最多能够转移的个数），然后考虑 $01$ 矩阵。使得：</p><script type="math/tex; mode=display">\left[\begin{array}{l}dp[i-1]\\dp[i-2]\\dp[i-3]\\\cdot\cdot\cdot\\dp[i-Len+1]\\dp[i-Len]\end{array}\right]\rightarrow\left[\begin{array}{l}dp[i]\\dp[i]\\dp[i]\\\cdot\cdot\cdot\\dp[i-Len_2]\\dp[i-Len+1]\end{array}\right]</script><p>计算出转移矩阵应该是：</p><p><img src="https://s2.ax1x.com/2019/05/05/Ewtapd.png" alt="img"></p><p>即可。</p><p>答案矩阵的第 $1$ 行第 $1$ 列就是最终答案，时间复杂度 $\mathcal O(Len^3\log n)$</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXL=<span class="number">101</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll Length;</span><br><span class="line"><span class="type">int</span> N,M;</span><br><span class="line"><span class="type">int</span> Len,Num[MAXL],dp[MAXL];</span><br><span class="line"><span class="type">bool</span> a[MAXL],b[MAXL];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    ll rix[MAXL][MAXL];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(rix,<span class="number">0</span>,<span class="built_in">sizeof</span>(rix));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> Matrix <span class="keyword">operator</span>*(Matrix b)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Matrix c;</span><br><span class="line">        c.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Len;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=Len;++j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=Len;++l) </span><br><span class="line">                    c.rix[i][j]=(c.rix[i][j]+rix[i][l]*b.rix[l][j])%Mod;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Zero,Ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Matrix <span class="title">qPow</span><span class="params">(Matrix s,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix res;</span><br><span class="line">    res.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Len;++i) res.rix[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*s;</span><br><span class="line">        s=s*s;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-matrix.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-matrix.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(Length);</span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=N;++i) <span class="built_in">read</span>(x),a[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">read</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=M;++i) <span class="built_in">read</span>(x),b[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;++i) <span class="keyword">if</span>(a[i]&amp;b[i]) Zero.rix[<span class="number">1</span>][i]=<span class="number">1</span>,Len=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;Len;++i) Zero.rix[i+<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Len;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;++j)</span><br><span class="line">            <span class="keyword">if</span>(a[j]&amp;&amp;b[j]) dp[i]=(dp[i]+dp[i-j])%Mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Len;++i) Ans.rix[i][<span class="number">1</span>]=dp[Len-i];</span><br><span class="line">    Ans=<span class="built_in">qPow</span>(Zero,Length-Len+<span class="number">1</span>)*Ans;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Ans.rix[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">19260817</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">8 9 6 3 7 2 1</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">4 5 2 9 7 8 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="倍增-dp"><a href="#倍增-dp" class="headerlink" title="倍增 dp"></a>倍增 dp</h2><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><h4 id="P1613-跑路"><a href="#P1613-跑路" class="headerlink" title="P1613 跑路"></a><a href="https://www.luogu.com.cn/problem/P1613">P1613 跑路</a></h4><p>这道题是最短路径和倍增思想的结合题。</p><p>首先说一下一个明显的错误： <strong>绝对不能直接求最短路</strong>。</p><p>原因很简单，题目中有说，有跑路器。</p><p>那么进一步思考，发现，任意 $2^k$ 的路径长度都可以在 $1$ 秒内走完，因此如果有 $u,v$ 两点间的最短距离为 $2^k$ 即可认为这两点之间有一条边（本题中边权全部为 $1$ ）。</p><p>接下来，思路就很简单了。令 $f_{i,j,k}$ 的意义为能否在 $2^i$ 时间内从点 $j$ 走到点 $k$ ，可以为 $1$ ，不可以为 $0$。进一步，由<strong>倍增</strong>的思想可以得到：若 $f_{i-1, v, k}$ 和 $f_{i-1, k, u}$ 同时为 $1$ ，则 $f_{i, v, u}$ 为 $1$ 。</p><p>在这些都预处理完成之后，在跑一个最短路，就正确了。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">101</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=x*<span class="number">10</span>+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> G[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> Dist[MAXN][MAXN],N,M,Qx,Qy;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  freopen(&quot;run.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//  freopen(&quot;run.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="built_in">memset</span>(Dist,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(Dist));</span><br><span class="line">    <span class="built_in">memset</span>(G,<span class="number">0</span>,<span class="built_in">sizeof</span>(G));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(Qx),<span class="built_in">underRead</span>(Qy);</span><br><span class="line">        Dist[Qx][Qy]=<span class="number">1</span>;G[Qx][Qy][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">64</span>;++k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=N;++l)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(G[i][j][k<span class="number">-1</span>]&amp;&amp;G[j][l][k<span class="number">-1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        G[i][l][k]=<span class="number">1</span>;</span><br><span class="line">                        Dist[i][l]=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=N;++k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                Dist[i][j]=<span class="built_in">underMin</span>(Dist[i][j],Dist[i][k]+Dist[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Dist[<span class="number">1</span>][N]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 4</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h4 id="P1081-NOIP2012-提高组-开车旅行"><a href="#P1081-NOIP2012-提高组-开车旅行" class="headerlink" title="P1081 [NOIP2012 提高组] 开车旅行"></a><a href="https://www.luogu.com.cn/problem/P1081">P1081 [NOIP2012 提高组] 开车旅行</a></h4><hr><h2 id="数据结构优化-dp"><a href="#数据结构优化-dp" class="headerlink" title="数据结构优化 dp"></a>数据结构优化 dp</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 数论 </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> 线段树优化dp </tag>
            
            <tag> 期望 </tag>
            
            <tag> 期望dp </tag>
            
            <tag> 矩阵快速幂 </tag>
            
            <tag> 矩阵加速 </tag>
            
            <tag> 倍增dp </tag>
            
            <tag> 数据结构优化dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4315 月下“毛景树”</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p4315/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p4315/</url>
      
        <content type="html"><![CDATA[<p>两道毒瘤题的有机结合。</p><span id="more"></span><p>仔细阅读这道题，再回想自己做过的题，就会觉得有些微妙。</p><p><a href="https://www.luogu.com.cn/problem/P4315">原题指路</a></p><p>这道题实则是<a href="https://www.luogu.com.cn/problem/P4114">Query on the Tree I</a>和<a href="https://www.luogu.com.cn/problem/P1253">扶苏的问题</a>的结合。</p><p>理解为在树上进行扶苏那道题里的操作。（即双标记互相影响）</p><p>另外，<code>cover</code> 标记还挺容易被卡的，一定要注意自己定的初值是否会成为 <code>cover</code> 的对象，一般而言定个 <code>-0x7f7f7f7f</code> 或者 <code>-1145141919810</code> 都可以。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Null=<span class="number">-0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,Pts[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">G</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">G</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total,Idx[MAXN],Bck[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">G</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">G</span>(Head[v],u,w);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fa[MAXN],Size[MAXN],Son[MAXN],Dep[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fa[x]=last,Size[x]=<span class="number">1</span>,Dep[x]=Dep[last]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsTree</span>(v,x);</span><br><span class="line">        Pts[v]=Edge[e].val;</span><br><span class="line">        Size[x]+=Size[v];</span><br><span class="line">        <span class="keyword">if</span>(!Son[x]||Size[v]&gt;Size[Son[x]]) Son[x]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Top[MAXN],Dfn[MAXN],Val[MAXN],Cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsSeg</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dfn[x]=++Cnt;</span><br><span class="line">    Val[Cnt]=Pts[x],Top[x]=topf;</span><br><span class="line">    <span class="keyword">if</span>(!Son[x]) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">dfsSeg</span>(Son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==Fa[x]||v==Son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsSeg</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,tagadd,tagcover,maxn;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].maxn=<span class="built_in">max</span>(Tree[ls].maxn,Tree[rs].maxn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushDownCover</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].tagcover!=Null)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[ls].tagadd=Tree[rs].tagadd=<span class="number">0</span>;</span><br><span class="line">        Tree[ls].tagcover=Tree[rs].tagcover=Tree[p].tagcover;</span><br><span class="line">        Tree[ls].maxn=Tree[rs].maxn=Tree[p].tagcover;</span><br><span class="line">        Tree[p].tagcover=Null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushDownAdd</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].tagadd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pushDownCover</span>(p);</span><br><span class="line">        Tree[ls].maxn+=Tree[p].tagadd;</span><br><span class="line">        Tree[rs].maxn+=Tree[p].tagadd;</span><br><span class="line">        Tree[ls].tagadd+=Tree[p].tagadd;</span><br><span class="line">        Tree[rs].tagadd+=Tree[p].tagadd;</span><br><span class="line">        Tree[p].tagadd=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushDown</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pushDownCover</span>(p),<span class="built_in">pushDownAdd</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l,Tree[p].r=r,Tree[p].tagcover=Null;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].maxn=Val[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls,l,mid),<span class="built_in">build</span>(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modifyAdd</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pushDownCover</span>(p);</span><br><span class="line">        Tree[p].maxn+=k;</span><br><span class="line">        Tree[p].tagadd+=k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modifyAdd</span>(ls,l,r,k);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) <span class="built_in">modifyAdd</span>(rs,l,r,k);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modifyCover</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].maxn=k;</span><br><span class="line">        Tree[p].tagadd=<span class="number">0</span>;</span><br><span class="line">        Tree[p].tagcover=k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modifyCover</span>(ls,l,r,k);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) <span class="built_in">modifyCover</span>(rs,l,r,k);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">queryMax</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// printf(&quot;%d %d %d\n&quot;,Tree[p].l,Tree[p].r,Tree[p].maxn);</span></span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r) <span class="keyword">return</span> Tree[p].maxn;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="type">int</span> res=Null;</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) res=<span class="built_in">max</span>(res,<span class="built_in">queryMax</span>(ls,l,r));</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) res=<span class="built_in">max</span>(res,<span class="built_in">queryMax</span>(rs,l,r));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modifyPathCover</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Top[x]!=Top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[Top[x]]&lt;Dep[Top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modifyCover</span>(<span class="number">1</span>,Dfn[Top[x]],Dfn[x],k);</span><br><span class="line">        x=Fa[Top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&gt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modifyCover</span>(<span class="number">1</span>,Dfn[x]+<span class="number">1</span>,Dfn[y],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modifyPathAdd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Top[x]!=Top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[Top[x]]&lt;Dep[Top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modifyAdd</span>(<span class="number">1</span>,Dfn[Top[x]],Dfn[x],k);</span><br><span class="line">        x=Fa[Top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&gt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modifyAdd</span>(<span class="number">1</span>,Dfn[x]+<span class="number">1</span>,Dfn[y],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">queryPathMax</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=Null;</span><br><span class="line">    <span class="keyword">while</span>(Top[x]!=Top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[Top[x]]&lt;Dep[Top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        res=<span class="built_in">max</span>(res,<span class="built_in">queryMax</span>(<span class="number">1</span>,Dfn[Top[x]],Dfn[x]));</span><br><span class="line">        x=Fa[Top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&gt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    res=<span class="built_in">max</span>(res,<span class="built_in">queryMax</span>(<span class="number">1</span>,Dfn[x]+<span class="number">1</span>,Dfn[y]));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modifyPoint</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">modifyCover</span>(<span class="number">1</span>,Dfn[Idx[u]],Dfn[Idx[u]],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> opt[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,u,v,w;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,w);</span><br><span class="line">        Bck[i<span class="number">-1</span>]=u,Idx[i<span class="number">-1</span>]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfsTree</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfsSeg</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;++i)</span><br><span class="line">        Idx[i]=(Bck[i]==Fa[Idx[i]]?Idx[i]:Bck[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(opt[<span class="number">1</span>]!=<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u,v,w;</span><br><span class="line">            <span class="built_in">read</span>(u,v,w);</span><br><span class="line">            <span class="built_in">modifyPathAdd</span>(u,v,w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u,v;</span><br><span class="line">            <span class="built_in">read</span>(u,v);</span><br><span class="line">            <span class="keyword">if</span>(u==v) <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">queryPathMax</span>(u,v));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">2</span>]==<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k,w;</span><br><span class="line">            <span class="built_in">read</span>(k,w);</span><br><span class="line">            <span class="built_in">modifyPoint</span>(k,w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u,v,w;</span><br><span class="line">            <span class="built_in">read</span>(u,v,w);</span><br><span class="line">            <span class="built_in">modifyPathCover</span>(u,v,w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=N;++i) printf(&quot;%d &quot;,Dfn[i]);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=N;++i) printf(&quot;%d &quot;,Val[i]);*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1 2 8</span></span><br><span class="line"><span class="comment">1 3 7</span></span><br><span class="line"><span class="comment">3 4 9</span></span><br><span class="line"><span class="comment">Max 2 4</span></span><br><span class="line"><span class="comment">Cover 2 4 5</span></span><br><span class="line"><span class="comment">Add 1 4 10</span></span><br><span class="line"><span class="comment">Change 1 16</span></span><br><span class="line"><span class="comment">Max 2 4</span></span><br><span class="line"><span class="comment">Stop</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> Dfs序 </tag>
            
            <tag> LCA </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分数规划</title>
      <link href="/Eternity/OI/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/fractional-programming/"/>
      <url>/Eternity/OI/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/fractional-programming/</url>
      
        <content type="html"><![CDATA[<p>“空即是色，色即是空。”</p><span id="more"></span><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>分数规划求一个分式的极值。</p><p>给出 $a_i$ 和 $b_i$ ，求一组 $w_i\in\{0,1\}$ ，最大化/最小化：</p><script type="math/tex; mode=display">\frac{\sum\limits_{i=1}^n a_i\times w_i}{\sum\limits^n_{i=1}b_i\times w_i}</script><p>当然，毒瘤题中还会有一些特殊限制。</p><h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><p>令当前答案为 $mid$ ，我们只需要使：（以最大值为例）</p><script type="math/tex; mode=display">\frac{\sum\limits_{i=1}^n a_i\times w_i}{\sum\limits^n_{i=1}b_i\times w_i}>mid</script><p>然后推得：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}w_i\times(a_i-mid\times b_i)>0</script><p>即可。最小值类似。</p><h3 id="Dinkelbach-算法"><a href="#Dinkelbach-算法" class="headerlink" title="Dinkelbach 算法"></a>Dinkelbach 算法</h3><p>Dinkelbach 算法的大概思想是每次用上一轮的答案当做新的 $L$ 来输入，不断地迭代，直至答案收敛。说实话，这东西我看了有 $5$ 篇讲解也不是太懂，之后有时间再学学。</p><p>有点类似于构造函数，通过对已知答案的迭代来得出当前答案。并根据更优解移动答案以逼近最优解。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="Talent-Show"><a href="#Talent-Show" class="headerlink" title="Talent Show"></a><a href="https://www.luogu.com.cn/problem/P4377">Talent Show</a></h3><p>求最大分数，且需要满足 $\sum w_i\times b_i\ge W$ 的条件。</p><p>其实在开始的时候，就会发现 $w_i\in\{0,1\}$ 十分熟悉，有些像…… $01$ 背包。</p><p>把 $b_i$ 作为 $i$ 物品的重量，将 $a_i-mid\times b_i$ 作为第 $i$ 个物品的价值，作为 dp 来转移，求出 $dp[n][W]$ 即可。</p><p>将大于 $W$ 的 $\sum w_i\times b_i$ 直接视作 $W$ 即可。因为我们并不考虑实际重量和，只关心是否能把背包装满。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">301</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXW=<span class="number">1001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-5</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a[MAXN],b[MAXN],W,N;</span><br><span class="line"><span class="type">double</span> dp[MAXW];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=W;++i) dp[i]=<span class="number">-1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=W;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">min</span>(W,j+b[i]);</span><br><span class="line">            dp[k]=<span class="built_in">max</span>(dp[k],dp[j]+a[i]-x*b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[W]&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;frac-programming.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;frac-programming.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,W);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(b[i],a[i]);</span><br><span class="line">    <span class="type">double</span> l=<span class="number">0</span>,r=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0lf&quot;</span>,<span class="built_in">floor</span>(<span class="number">1000</span>*l));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 15</span></span><br><span class="line"><span class="comment">20 21</span></span><br><span class="line"><span class="comment">10 11</span></span><br><span class="line"><span class="comment">30 31</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 数论 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 构造 </tag>
            
            <tag> 生成树 </tag>
            
            <tag> 背包 </tag>
            
            <tag> 分析数学 </tag>
            
            <tag> 分数规划 </tag>
            
            <tag> 01分数规划 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最优比例生成树 </tag>
            
            <tag> 最优比例环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《文学少女》——邂逅之后，才能明晓一切</title>
      <link href="/Eternity/%E8%AE%B0%E9%9A%8F%E5%BD%B1%E8%90%BD/book-girl/"/>
      <url>/Eternity/%E8%AE%B0%E9%9A%8F%E5%BD%B1%E8%90%BD/book-girl/</url>
      
        <content type="html"><![CDATA[<p>总有一天，我会懂的。</p><span id="more"></span><blockquote><p>高中二年级的普通学生井上心叶，因为过去的阴影，对人抱着冷淡的态度。然而，因为某个契机，井上心叶知道了文学少女天野远子的秘密。得知秘密的他被远子以文艺社社长的身份强制要求加入社团，并且每天被逼写三题故事。</p><p>由于远子好管闲事的个性，心叶常常被卷入一些事件中，而后帮助事件顺利解决。在事件当中，两人结识了竹田千爱、姬仓麻贵、琴吹七濑等人。他人的故事和心叶自己的秘密相互交错。最终，文学少女解开了迷题，而心叶等人的命运，也一点点的脱离了轨迹……</p></blockquote><h2 id="正传"><a href="#正传" class="headerlink" title="正传"></a>正传</h2><h3 id="渴望死亡的小丑-x-竹田千爱"><a href="#渴望死亡的小丑-x-竹田千爱" class="headerlink" title="渴望死亡的小丑 x 竹田千爱"></a>渴望死亡的小丑 x 竹田千爱</h3><p>这是关于一个人偶女孩的故事。</p><blockquote><p>井上心叶怨恨所有人，也不喜欢自己。为了迎合这个世界，他必须伪装自己，逼自己展露笑容。他认为自己就像小丑，骨子里满怀悲伤的小丑。超级喜欢编故事的“文学少女”天野远子与向往平稳平凡爱情的井上心叶，再加上不懂人心孤独的“小丑”，交织出充满绝望与感动人心的故事！</p></blockquote><p>从刚开始阅读的时候，我有些觉得这套书似乎和某节能型人才有些相似。同属于校园侦探类型，不过这只是最浅层次的罢了。</p><p>《文学少女》带来的，更多是属于阅读者才有的乐趣。</p><p>以《人间失格》为版面的第一部，是完全压抑的一部，重在是普遍悬疑小说都存在的层层推进，最终得到答案。我没有阅读过原作（这套书里提及的任何一本我都没有阅读完整过），但是却依然会受益匪浅。故事真的就如小说中写的那样去发展，在真相似乎依然出现的时候，在故事似乎已经完全的时候，正确答案却并非如同真相一般。前文或有或无的线索被串联，交织，推理。得到了与真相恰恰相反的正确答案，这就是《文学少女》的魅力所在，即使似乎每一本所有的结构与套路都相同，但总会给人以焕然一新之感，毕竟每一本发生的故事的版面都是不同的。</p><p>最终，愁二学长是第一个“人间失格”，而竹田千爱同样是“人间失格”，所有人都在互相拯救，心叶也是一样的，从过去中挣脱，盼望着未来能够一帆风顺，却总不人意料。你是这样的，我也是这样的。如果想做的是和能做的事重合的话，那是多少概率的事呢？不用计算也知道吧。</p><p>说说竹田千爱，一个没有感情的少女，不知幸福，无懂悲伤，没有办法去评判感情，却又如同小丑一般，戴上面具，活得“开心”，但也能在目睹车祸时怔然坠地，也能悲伤地对着流人说出“我也想要流人的孩子”。人人都是小丑，人人都戴着面具，而总有一天会被摘下，直视自己。</p><blockquote><p>你知道为什么丘丘人戴着面具吗，因为它们恐惧着面具下的自己。</p><p>Cheem，你是小丑吗？</p></blockquote><p>都是这样，假装着自己的悲伤，因为会被同类人排斥，被嘲笑，被辱骂。这个世界就是这样的，例外是永恒的敌人，社会具有排异性，随波逐流看似是最坏的选择，但却是最明智的选择。</p><p>只不过聪明人都不满与此罢了。</p><h3 id="渴求真爱的幽灵-x-樱井流人"><a href="#渴求真爱的幽灵-x-樱井流人" class="headerlink" title="渴求真爱的幽灵 x 樱井流人"></a>渴求真爱的幽灵 x 樱井流人</h3><p>死去的人不会重生，所以才会明白活着。</p><blockquote><p>文艺社社长天野远子，自称是对故事喜爱到想要吃下去的“文学少女”，每天都跟学弟井上心叶待在一起。有一天，文艺社的“恋爱咨询信箱”里出现了一些纸片，上面写着“憎恨”、“幽灵”、还有一些谜题般的数字。远子一口咬定，这是对文艺社的挑战！就拉着心叶一起展开调查，而他们抓到的犯人，竟然是笑着说“我已经死了”的少女！</p></blockquote><p>这是与本作无大关联却又极大关联的一本。</p><p>以《呼啸山庄》为原本，本就已经预示着情节如狂风般呼啸。深爱着对方，却又残酷地对待，每一个人都对过去怀有抱歉，于是牺牲自己而挽回。却最终被正确答案玩弄于股掌。背负罪名，看着深爱的人在怀里死去，禁忌之爱也希望有所结果。是父女，也是恋人，是在污朽中挣扎的同伴，是在谴责中互相折磨的旅人。</p><p>山庄呼啸着，无人倾听。</p><p>之后的故事中，似乎有时无时地提及过黑崎与萤，更多是讲述麻贵和流人。让读者明白，身为名家的麻贵敢于为了一心所愿而背离众人，而花天曼地的流人也曾为一个女孩而专情。人存在着阴阳之面，只是没有找到应有的时机去表露罢了。</p><h3 id="沉陷过往的愚者-x-芥川一诗"><a href="#沉陷过往的愚者-x-芥川一诗" class="headerlink" title="沉陷过往的愚者 x 芥川一诗"></a>沉陷过往的愚者 x 芥川一诗</h3><p>过往的痛苦让人更加接受现实的残酷。</p><blockquote><p>“啊！这本书竟然有缺页！”某天远子发现从图书馆借来的书本，竟然有几页被人割掉了。身为喜爱故事到想要把它吃下去的“文学少女”，怎么可能对此不闻不问呢！被再度暴走的远子卷入黑色事件的心叶和同班同学芥川，一步一步被逼至极限的疯狂……是谁躲在黑暗的角落窥探？“文学少女”能够解放这个沉溺过往的灵魂吗？</p></blockquote><p>我挺喜欢一诗这人的，不仅仅因为他的声优是小野大辅，更在于他的性格，迟钝得让人愉悦，但又聪明得让人佩服，偷偷背负一切的人，选择用自己换取他人的幸福，这是无私，也是自私。不把自己的命当命的人，也是不值得尊敬的。</p><p>这么看来，一诗确实是那个“愚者”。</p><p>这一本中，以文化节为背景，化作《友情》，让心叶与一诗一同克服各自的过去。在坎前徘徊，而从另一侧伸出的一只手，最终才让困难圆满落幕。也正是这一册，才真正明白了远子对于心叶，不可或缺的作用。</p><blockquote><p>每个人都是愚者。</p></blockquote><p>曾经我的初中班主任在毕业那一天问过我们一个问题：“你有后悔的事么？”</p><p>这是一个没有答案的问题，确实后悔，但也无济于事，所以不再后悔；确实不后悔，但迟迟徘徊于心，纵然不忘，实属后悔。</p><p>我们被自己的过去玩弄，成为了过去手中的愚者，而那些对昨天发生的事不屑一顾的人，才算得上是真正的勇者。人生需要去后悔，才有了走马灯这样的东西。</p><p>当历程殆尽，你的脑中连一点回忆都没有留下，那真是太糟糕了。</p><blockquote><p>但愚者是必要的，如果一个人是纯粹的智者，那他的生活实属无味。</p></blockquote><p>如果在给我一次机会，就像《重启人生》一样，我依然愿意去当一个愚者，虽然不会“愚”得彻底，但也会去享受“傻人有傻福”的时刻。</p><h3 id="背负污名的天使-x-琴吹七濑"><a href="#背负污名的天使-x-琴吹七濑" class="headerlink" title="背负污名的天使 x 琴吹七濑"></a>背负污名的天使 x 琴吹七濑</h3><blockquote><p>文艺社社长天野远子，是对故事喜爱到想要把它吃下去的“文学少女”，可是不知道为什么，突然有一天她竟然发表了休社宣言！听到这一切后，心叶感到愕然的同时也察觉了自己心底的一丝寂寞。心叶决定放下心底的感觉，去过平和的生活，一边给音乐老师球谷帮忙，一边每天放学后与七濑一起留校……圣诞节将近的街道上，一位少女突然消失，拼命寻找她的七濑和心叶，面前出现了一位仿佛是心叶自身投影的“天使”……</p></blockquote><p>七濑是整本书我最喜欢的角色之一（从恋爱角度看），傲娇，呆萌，贤惠，可爱；简直是女朋友的不二之选，可惜是<del>败犬</del>，不过我就勉为其难拿下啦。</p><p>这是《文学少女》中三大禁忌之爱的第二对，也是第二对以悲伤结尾的恋情。一切都如同《歌剧魅影》中一样，化为泡影。</p><p>一方是从小的天才，被誉为“天使”的歌手；一边是平凡但追求梦想的学生。</p><blockquote><p>天使的歌声使人坠入地狱。</p></blockquote><p>球谷躲避着真正天使的嗓音，却始终放不下自己所爱的音乐，最终作为一个平凡的音乐老师收尾，而深爱着水户夕歌。然而，现实是滑稽的，天使也来到于此，并不断传授夕歌以天使的唱歌技巧。最终，迫于过去的罪恶，他杀害了自己心爱的人，堕入了地狱。他拥有与臣一样的痛苦，因为美丽的嗓音而被厚望，与梦想背道而驰。两个人都是歌剧里的魅影，两个人都是被魅影挟持的人质。</p><blockquote><p>没有人绝对正义，所以没有人绝对邪恶。</p></blockquote><p>在失去之后，才能得到的正确答案。无法挽回，所以才会选择承担，也正因如此，才能毫无顾忌地去接受过去。球谷才会去自首，臣也安然离开。留下名为“天使”的传说。</p><p>所谓“天使”，却背负着污名；所谓“魅影”，却承担着过去。</p><h3 id="绝望恸哭的信徒-x-朝仓美羽"><a href="#绝望恸哭的信徒-x-朝仓美羽" class="headerlink" title="绝望恸哭的信徒 x 朝仓美羽"></a>绝望恸哭的信徒 x 朝仓美羽</h3><p>这是最接近现实的一本。</p><blockquote><p>快要毕业的远子学姐和心叶似乎有些渐行渐远，为此感到寂寞的心叶并不承认心底的感觉。他继续跟七濑保持着交往，而他们的关系在一起去新年参拜之后，愈来愈近……此时，不知怎的，七濑突然住院！而前往探望的心叶，竟然跟他未曾淡忘的少女朝仓美羽重逢！那个代表了心叶心底最深秘密的少女，就这样重新出现在心叶的眼前……</p></blockquote><p>怎样才叫现实？我也说不明白。总归来讲，就更偏重于记叙文，讲述了一个彻头彻尾的故事，没有悬疑，不会推理。只是对过去的和解。（也就为什么剧场版会选择这一本来拍摄，虽然 $2010$ 的技术不太成熟就是了）</p><p>《银河铁道之夜》，一篇童话，不同人总是能看到不同的故事，也会发现其不算童话的一面。</p><blockquote><p>一个故事的阅读方法，绝对不只有一种。只要还有别的登场人物，就会有别的故事存在。</p></blockquote><p>自己想象的过去并不一定就是真正的过去，记忆也会存在造假的情况，因为无法接受而麻痹自己，看自己想看的事，听自己想听的话，想自己所想之梦。每个人都存在着自己的梦，所以才会存在现实的偏差。当多年的谎言最终被残忍拆穿，才最后明白，每个人都有每个人的苦衷，所以</p><blockquote><p>心叶，你一定不懂吧。</p></blockquote><p>说实话，美羽的形象还是把我吓了一跳，虽然我猜出估计不算是个好人，但没想到坏得如此彻底，还是有魅力所在。这本里面的心叶确实智商时时不在线，在回想起来其实还是能理解的，毕竟一个自己守护了这么多年的梦，就这样被梦的制造者打碎而践踏，谁也无法接受，都只能躲在自己的世界里逃避。</p><p>所有人都是这样，拥有自己梦的界限，即使有人有意无意走过了那条界限，自己最理性的那一面也会感性地告诉你无事发生，否则，除非意志的坚定，也只剩下绝望恸哭可以做了。</p><h3 id="怀抱花月的水妖-x-姬仓麻贵"><a href="#怀抱花月的水妖-x-姬仓麻贵" class="headerlink" title="怀抱花月的水妖 x 姬仓麻贵"></a>怀抱花月的水妖 x 姬仓麻贵</h3><p>真正可怕的是，真实的鬼，其实是人假扮的。</p><blockquote><p>“我被坏人抓走了，请立刻带着换洗衣服和作业来救我！”</p><p>天野远子学姐的求救让心叶的暑假只好在姬仓家的别墅里写着“点心”度过了。而此时此刻，发生在八十年前的悲剧之阴影却悄悄逼近了他们！</p><p>“千金小姐”、“学生”、“妖怪”等演员都已到齐，舞台也准备妥善，一切又开始倾向崩坏……究竟是什么造成了一切的回溯？而一手导出这事态的麻贵学姐又所愿为何？因自己的想象而心神不安的“文学少女”到底有什么“秘密”呢？</p><p>如梦似幻的夏季，逆转颠倒的时间，野村美月文学少女特别卷《文学少女(怀抱花月的水妖)》来袭！</p></blockquote><p>特别篇，放在终章之前，以倒叙的手法，讲述了过去的故事。</p><p>以《夜叉池》为范本，联立七十年的故事，探讨鬼之后，人的故事。</p><p>人的任务是抓鬼，守护属于自己的利益；鬼的任务是守护，守护自己坚守的使命。是么？</p><blockquote><p>知晓真相，并不意味着得出了正确答案。</p></blockquote><p><del>纱代真的可爱。</del></p><p>麻贵代表着的是新时代对旧时代的鄙夷，纱代代表着的是新时代对旧时代的执着。这其实也是当今社会探讨的一个重要问题——对于传统文化，是传承，还是摒弃？</p><p>洗脑的政治书上早就给出过答案了——创造性转化，创新性发展。</p><p>没有人能够忘记过去，正如同没有人可以两手空空前往未来。</p><h3 id="迈向神境的作家-x-井上心叶-amp-天野远子"><a href="#迈向神境的作家-x-井上心叶-amp-天野远子" class="headerlink" title="迈向神境的作家 x 井上心叶 &amp; 天野远子"></a>迈向神境的作家 x 井上心叶 &amp; 天野远子</h3><p>仅有独者，迈向神境。</p><blockquote><p>只要把这个吃下去，所有的悲伤痛苦都会像雪一样融化，再也不用憎恨、怀疑或是嫉妒。可以如同躺在神的怀抱一样安心地入眠。他说我可以留着自己吃，也可以给别人吃。</p><p>我把装在紫色心形罐子的奥列·路却埃睡眠药粉放进珠宝箱锁起来，偶尔才会拿出来，对着光线眺望。在晶莹透明的紫色玻璃之中轻轻摇晃的银粉，让我看得入迷了，我将它贴在火烫的脸颊上，用那凉爽的感觉抚慰心情。</p><p>只要有这个小罐子，我就能改变命运了。一定连那高耸遥远的天上之门都能进入吧。现在握在我掌中的，到底是谁的心脏呢？</p><p>是我？是那个人？还是小叶呢？</p></blockquote><hr><blockquote><p>“不写小说也没关系。我会一直陪伴在井上身边。”心叶因为七濑的这句话而得到解脱，却又被流人威胁说：“我或许会把琴吹小姐彻底毁掉喔！”一波未平一波又起中，远子学姐突然消失无踪，空荡荡的房间里只留下了被割破的制服——</p><p>心叶能寻回远子吗？逐渐显露的真相，会让他找出什么样的答案呢？</p><p>远子的祈祷、叶子的怨憎、流人的绝望──藏在这些情感底下的故事，如今就要揭开……</p><p>风起云涌的最后一卷终于登场！</p></blockquote><p>作家是会背叛读者的，就如同读者一样会背叛作家一样。而作家，是需要独自走过窄门的存在，这就是作为《窄门》给我的道理。</p><p>《窄门》的定义源于基督教。</p><blockquote><p>“你们要进窄门。因为引到灭亡，那门是宽的，路是大的，进去的人也多；引到永生，那门是窄的，路是小的，找着的人也少。” ————《圣经：新约马太福音》</p></blockquote><p>随波逐浪的大流是引向灭亡的，而中途退出自由浪荡的雨滴，才能获取永生。</p><p>无论所谓的“灭亡”和所谓的“永生”对于你我而言是什么，但总归知道，“永生”大于“灭亡”的道理吧。这也是为什么所有人都需要立下觉悟而越过窄门。</p><blockquote><p>总之非常有趣，很喜欢登场人物都背负着过去的设定。——小野大辅</p></blockquote><p>没有背负过去的人，一定不太完整。曾经有一次，我的其中一个 U 盘中了病毒（因为太菜而无法删除），后来我唯一的抉择就是格式化。虽然我直到现在都不太清楚我失去了什么，但是在格式化之后，里面写了一句话：</p><blockquote><p>The one who cannot escape from the past, who cannot run for the future.</p></blockquote><p>背负了过去的人看起来更加完整，他的未来也会更加充实。但记忆终究有限，人无法沉迷入过去，适当的舍弃是更好的选择。而舍弃，需要一定的觉悟。<font style="color:white">是吧？言若。</font></p><h2 id="外传"><a href="#外传" class="headerlink" title="外传"></a>外传</h2><h3 id="文学少女见习生-x-日阪菜乃"><a href="#文学少女见习生-x-日阪菜乃" class="headerlink" title="文学少女见习生 x 日阪菜乃"></a>文学少女见习生 x 日阪菜乃</h3><p>我想，如果在我的生活中，能够遇到像菜乃这样的女孩，一生都会满足吧。</p><blockquote><p>进入圣条学园就读的日坂菜乃认识了一位学长──文艺社社长井上心叶。菜乃受到心叶的吸引后选择加入了文艺社，但是心叶的心已经被一位“文学少女”占据了，菜乃为毫无希望的感情陷入低潮。但是，当她被卷入某桩事件而陷入困境时，心叶却对她说：“我发誓，不会再对你视若无睹，也不会再撇开视线。”</p></blockquote><p>以下，是摘自两年前的对菜乃的书评。</p><blockquote><p>日坂菜乃是一个开朗又勇敢的少女，也许是因为性格力量的强大，或是初恋时爱意的深切，菜乃在与心叶接触不久之后，就向他勇敢表达了爱意……虽然被拒绝，但即使初战告败，菜乃也没有丝毫放弃的意思，仍旧坚持不懈，与心叶在文艺社里共度了一天又一天，其间两人一同经历了各种离奇事件，菜乃也不断地向心叶表达自己的心意，精心编织彼此的关系。最终，两人在离别之际互表心意，菜乃在微笑中向自己的初恋告别。</p><p>日坂菜乃是一个令人同情的角色，她勇敢的迈出了自己的步伐，追逐爱情，却注定不能够拥有属于自己的美满结局。在整篇故事的发展过程中，菜乃将自己追求爱情的实现方法，寄托在成为“文学少女”之上，而为了成为文学少女，她需要努力去读自己无法理解的文学作品。</p><blockquote><p>死定了！我一点都看不懂啊！<br>我把开头反复读了五遍，虽然感觉得出是在表达什么大道理，但我简单的脑袋完全不理解那是什么意思。我在努力思考之中，变得越来越困。<br>不能这样下去，难得井上学长推荐书给我，我非得读到最后不可。<br>……<br>我一边“唔唔”沉吟，中途还去吃了晚餐和洗了澡以此转换心情，好不容易读完的时候天都亮了。<br>我的眼睛充血，身体还因为中途躺到床上用不自然的姿势读书而腰酸背痛，脑袋里席卷着意义不明的单字和语句。</p></blockquote><p>需要像“文学少女”一样，把书本当做美味的食物一样吃下去。</p><blockquote><p>我勉强吞下几乎哽住喉咙的纸团。<br>一点都不好吃，喉咙好干涩。<br>接着，我把剩下的半页撕碎放进嘴里。<br>“呜呜……咿咿……哽哽……呜……”<br>我哭着，哽咽着，不停不停地把碎纸送入口中。<br>……<br>《茵梦湖》吃到一半，就变成泪水的味道。</p></blockquote><p>……</p><p><strong>努力是不会背叛自己的，虽然梦想有时会背叛自己。</strong></p><p>日坂菜乃通过自己的努力，逐渐从原本只读读漫画，看看恐怖片的普通女孩，变成了能耐心品读文学著作，有模有样讲述文学故事的文学少女。她逐渐喜爱上了文学，通过阅读感受各种生活，和书中的角色交朋友，但越是读着饱含情愫的作品，越是能体悟到自己实现不了最初的愿望。</p><blockquote><p>如果我不再是见习生，而是成为真正的文学少女，我们就能再见面吗？<br>你会等我成长到那个时候吗？我可以继续跟着你吗？<br>即将脱口而出的问题又被我咽回去。<br>如果不是心叶学长主动给我承诺就没有意义了。</p></blockquote><p>日坂菜乃陷入的困境，在于自己所相信的方法并不能够实现既定的愿望，甚至无论做什么，都无法改变结局的走向。已有心仪之人的心叶不会给予她爱的承诺，而年级相异的两人也注定会因为毕业而分离。正因此，两人最后度过的时光愈是甜蜜，菜乃所体悟到的痛楚就越发深刻。</p><p>故事的最后，菜乃在心叶面前，仿照着能够实现愿望的传说，在树上绑着自己的缎带，然后大声重复着自己内心的喜爱。</p><blockquote><p>其实我知道，一定要在没人看到的时候绑缎带。<br>心叶学长刚刚想说的应该是这件事。<br>让人看见的话，愿望就不能实现。<br>可是，我的愿望从一开始就不能实现啊！<br>大家早就说了绝无可能啊！</p></blockquote><p>这是个充满悲伤气味的故事，但绝不是一个痛彻心扉的悲剧，日坂菜乃天真幻想，勇敢冒进的追求初恋，却爱而不得，但她最终能与自己和解，能够微笑着向自己的初恋告别，这个青涩甜苦的结局，正是我所许久不见的某种青春味道。</p><p>像是把青涩的橘子瓣，连同籽粒嚼碎，有一股伴着酸甜的苦味，窜上鼻尖，跌入心头。</p><p>相比起一些天马行空的幻想，喧闹热腾的喜剧，这部小说极富青春的味道，初恋时求爱的激情，青春期烦恼的苦闷……我们往日里青春的热情是否因为时间消磨殆尽，这也许不得而知，但我认为，本作的女主角——日坂菜乃还会继续读、继续笑、继续对爱的追求，即便再失败，失去些什么，她也不会就此驻足不前，因为她 就是这样一个散发着生活光辉的“文学少女”。</p></blockquote><p>见习生终将毕业，我们最后做的事，就是向过去的自己告别。这是无奈而无悔的抉择。只有疯子和傻子才会认为自己的时间会暂停。“爸爸的花儿落了，我也不是小孩子了”，是时候成长的，少年。总有一天，会有人站在我们曾经站过的位置，做着我们曾经做过的事，想着我们曾经幻想着的梦。但是，所有人都会成长的，无论何时。也许，在知晓了未来并不如曾说那样美好，不过黄粱一梦；真正的现实一片死沉，劳碌的生活会将人击垮……</p><p>但，总归走过来了吧。</p><h3 id="爱恋插画集"><a href="#爱恋插画集" class="headerlink" title="爱恋插画集"></a>爱恋插画集</h3><p>那么，角色的定义，究竟是什么呢？</p><p>那些正传中没有出现过的名字，在那个时候，究竟在干些什么呢？我很喜欢美月的写作手法，虽然曾经我并不是很喜欢去看第一人称写的小说，包括我自己写的时候也不会使用第一人称。但美月让我克服了这一点，甚至让我觉得第一人称的手法比第三人称更加高明（各有各的好处），特别是这种中途切换视角的第一人称，我秉承一个观点：</p><blockquote><p>一个故事的阅读方法，绝对不只有一种。只要还有别的登场人物，就会有别的故事存在。</p></blockquote><p>而同样的，美羽也坚持了这一点。</p><p>普通人的生活终究是不同的，普通人之间也是。暗恋之中，暗恋的人与被暗恋的人的思想也是存在差异的。这也是人作为个体而存在的理由，作为一个独立思想的理由。</p><p>外传的存在，不仅让本传的故事更加精彩，更重要的，是让读者在本传阅读完之后没有怅然若失之感。让我们明白，那些人的故事并没有结束，他们也会像普通人一般地活着。</p><p>爱恋着的插画集，就如同插画一般，点缀着生活，爱恋着世界。</p><h2 id="后传"><a href="#后传" class="headerlink" title="后传"></a>后传</h2><h3 id="青涩作家"><a href="#青涩作家" class="headerlink" title="青涩作家"></a>青涩作家</h3><p>尚未阅读，之后补充。</p><h3 id="追想长廊"><a href="#追想长廊" class="headerlink" title="追想长廊"></a>追想长廊</h3><p>尚未阅读，之后补充。</p>]]></content>
      
      
      <categories>
          
          <category> 记随影落 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻小说 </tag>
            
            <tag> 野村美月 </tag>
            
            <tag> 文学 </tag>
            
            <tag> 恋爱 </tag>
            
            <tag> 冒险 </tag>
            
            <tag> 校园 </tag>
            
            <tag> 治愈 </tag>
            
            <tag> 致郁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Q-Tree系列</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/qtree/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/qtree/</url>
      
        <content type="html"><![CDATA[<p>树链剖分/动态树最好的练习题之一。</p><span id="more"></span><h2 id="Q-Tree-I"><a href="#Q-Tree-I" class="headerlink" title="Q-Tree I"></a>Q-Tree I</h2><p>树链剖分维护边权，线段树区间最大值。</p><p><a href="https://www.luogu.com.cn/problem/P4114">P4114</a>，<a href="https://www.luogu.com.cn/problem/SP375">SP375</a></p><p>你以为是双倍经验？其实是双倍<strong>经验</strong>。</p><p>洛谷里的题而言，就是一个普普通通的边权挂点。但是，在 $SPOJ$ 里，你会发现提交 <code>c++</code> 语言的提交都显示 <code>waiting</code> ，而那些 $AC$ 了的，都用的是 <code>c</code> 语言。</p><p><del>所以为了拿到这双倍经验我还去学了一下 c 语言的语法</del>。</p><p><code>c</code> 语言语法如下：</p><ol><li><code>c</code> 语言中没有 <code>iostream</code> 和 <code>algorithm</code> 的头文件；</li><li>以 <code>c-</code> 开头的头文件需要换成 <code>-h</code> 的头文件，如 <code>cstdio</code> 换成 <code>stdio.h</code> 等；</li><li>不能使用 <code>const</code> 以及 <code>struct</code> 和 <code>template</code> ；</li><li>所以类似于 <code>max</code> 和 <code>swap</code> 之类的函数需要手写。</li></ol><p>这是这道题需要注意的。</p><details>    <summary>AC Code for C++ ver</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total,Idx[MAXN],Bck[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u,w);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fa[MAXN],Son[MAXN],Size[MAXN],Dep[MAXN],Path[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fa[x]=last,Size[x]=<span class="number">1</span>,Dep[x]=Dep[last]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        Path[v]=Edge[e].val;</span><br><span class="line">        <span class="built_in">dfsTree</span>(v,x);</span><br><span class="line">        Size[x]+=Size[v];</span><br><span class="line">        <span class="keyword">if</span>(!Son[x]||Size[Son[x]]&lt;Size[v]) Son[x]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Top[MAXN],Dfn[MAXN],Val[MAXN],Cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_Seg</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dfn[x]=++Cnt;</span><br><span class="line">    Val[Cnt]=Path[x],Top[x]=topf;</span><br><span class="line">    <span class="keyword">if</span>(!Son[x]) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">dfs_Seg</span>(Son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==Fa[x]||v==Son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs_Seg</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,val;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].val=<span class="built_in">max</span>(Tree[ls].val,Tree[rs].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l,Tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val=Val[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls,l,mid),<span class="built_in">build</span>(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> d,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=d)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val=k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=mid) <span class="built_in">modify</span>(ls,d,k);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;d) <span class="built_in">modify</span>(rs,d,k);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r) <span class="keyword">return</span> Tree[p].val;</span><br><span class="line">    <span class="type">int</span> val=-INF;</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) val=<span class="built_in">max</span>(val,<span class="built_in">query</span>(ls,l,r));</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) val=<span class="built_in">max</span>(val,<span class="built_in">query</span>(rs,l,r));</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">queryPath</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=-INF;</span><br><span class="line">    <span class="keyword">while</span>(Top[x]!=Top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[Top[x]]&lt;Dep[Top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        res=<span class="built_in">max</span>(res,<span class="built_in">query</span>(<span class="number">1</span>,Dfn[Top[x]],Dfn[x]));</span><br><span class="line">        x=Fa[Top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&gt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    res=<span class="built_in">max</span>(res,<span class="built_in">query</span>(<span class="number">1</span>,Dfn[x]+<span class="number">1</span>,Dfn[y]));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> Str[<span class="number">256</span>];</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,u,v,w;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,w);</span><br><span class="line">        Bck[i<span class="number">-1</span>]=u,Idx[i<span class="number">-1</span>]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfsTree</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs_Seg</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;++i)</span><br><span class="line">        Idx[i]=(Bck[i]==Fa[Idx[i]]?Idx[i]:Bck[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,Str+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(Str[<span class="number">1</span>]!=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(Str[<span class="number">1</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x==y) <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">queryPath</span>(x,y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(<span class="number">1</span>,Dfn[Idx[x]],y);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,Str+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=N;++i) printf(&quot;%d &quot;,Dfn[i]);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;N;++i) printf(&quot;%d &quot;,Idx[i]);*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">2 3 2</span></span><br><span class="line"><span class="comment">QUERY 1 2</span></span><br><span class="line"><span class="comment">CHANGE 1 3</span></span><br><span class="line"><span class="comment">QUERY 1 2</span></span><br><span class="line"><span class="comment">DONE</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment">3 4 2</span></span><br><span class="line"><span class="comment">3 5 5</span></span><br><span class="line"><span class="comment">5 6 4</span></span><br><span class="line"><span class="comment">QUERY 4 2</span></span><br><span class="line"><span class="comment">CHANGE 2 6</span></span><br><span class="line"><span class="comment">QUERY 1 6</span></span><br><span class="line"><span class="comment">QUERY 5 4</span></span><br><span class="line"><span class="comment">CHANGE 4 2</span></span><br><span class="line"><span class="comment">QUERY 4 6</span></span><br><span class="line"><span class="comment">QUERY 2 6 </span></span><br><span class="line"><span class="comment">DONE </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><details>    <summary>AC Code for c ver.</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> N,Test;</span><br><span class="line"><span class="type">int</span> Next[MAXN&lt;&lt;<span class="number">1</span>],To[MAXN&lt;&lt;<span class="number">1</span>],Wt[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total,Idx[MAXN],Bck[MAXN];</span><br><span class="line"><span class="type">int</span> Fa[MAXN],Son[MAXN],Siz[MAXN],Dep[MAXN],Path[MAXN];</span><br><span class="line"><span class="type">int</span> Top[MAXN],Dfn[MAXN],Val[MAXN],Cnt;</span><br><span class="line"><span class="type">int</span> L[MAXN&lt;&lt;<span class="number">2</span>],R[MAXN&lt;&lt;<span class="number">2</span>],val[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="type">char</span> Str[<span class="number">256</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123; <span class="keyword">return</span> a&gt;b?a:b; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(A, B)   \</span></span><br><span class="line"><span class="meta">    &#123;                \</span></span><br><span class="line"><span class="meta">        int __T = A; \</span></span><br><span class="line"><span class="meta">        A = B;       \</span></span><br><span class="line"><span class="meta">        B = __T;     \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span><br><span class="line">&#123;</span><br><span class="line">    Next[++Total]=Head[u];</span><br><span class="line">    To[Total]=v;</span><br><span class="line">    Wt[Total]=w;</span><br><span class="line">    Head[u]=Total;</span><br><span class="line">    Next[++Total]=Head[v];</span><br><span class="line">    To[Total]=u;</span><br><span class="line">    Wt[Total]=w;</span><br><span class="line">    Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfsTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span><br><span class="line">&#123;</span><br><span class="line">    Fa[x]=last,Siz[x]=<span class="number">1</span>,Dep[x]=Dep[last]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=To[e])==last) <span class="keyword">continue</span>;</span><br><span class="line">        Path[v]=Wt[e];</span><br><span class="line">        dfsTree(v,x);</span><br><span class="line">        Siz[x]+=Siz[v];</span><br><span class="line">        <span class="keyword">if</span>(!Son[x]||Siz[Son[x]]&lt;Siz[v]) Son[x]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs_Seg</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span><br><span class="line">&#123;</span><br><span class="line">    Dfn[x]=++Cnt;</span><br><span class="line">    Val[Cnt]=Path[x],Top[x]=topf;</span><br><span class="line">    <span class="keyword">if</span>(!Son[x]) <span class="keyword">return</span> ;</span><br><span class="line">    dfs_Seg(Son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=To[e])==Fa[x]||v==Son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs_Seg(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line">    val[p]=max(val[ls],val[rs]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    L[p]=l,R[p]=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        val[p]=Val[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls,l,mid),build(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushUp(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">modify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> d,<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=L[p]&amp;&amp;R[p]&lt;=d)</span><br><span class="line">    &#123;</span><br><span class="line">        val[p]=k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(L[p]+R[p])&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=mid) modify(ls,d,k);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;d) modify(rs,d,k);</span><br><span class="line">    pushUp(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=L[p]&amp;&amp;R[p]&lt;=r) <span class="keyword">return</span> val[p];</span><br><span class="line">    <span class="type">int</span> res=-INF;</span><br><span class="line">    <span class="type">int</span> mid=(L[p]+R[p])&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) res=max(res,query(ls,l,r));</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) res=max(res,query(rs,l,r));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">queryPath</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> res=-INF;</span><br><span class="line">    <span class="keyword">while</span>(Top[x]!=Top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[Top[x]]&lt;Dep[Top[y]]) swap(x,y);</span><br><span class="line">        res=max(res,query(<span class="number">1</span>,Dfn[Top[x]],Dfn[x]));</span><br><span class="line">        x=Fa[Top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&gt;Dep[y]) swap(x,y);</span><br><span class="line">    res=max(res,query(<span class="number">1</span>,Dfn[x]+<span class="number">1</span>,Dfn[y]));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Cnt=Total=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(Head,<span class="number">0</span>,<span class="keyword">sizeof</span>(Head));</span><br><span class="line">    <span class="built_in">memset</span>(Son,<span class="number">0</span>,<span class="keyword">sizeof</span>(Son));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Test);</span><br><span class="line">    <span class="keyword">while</span>(Test--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,u,v,w;i&lt;=N;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            addEdge(u,v,w);</span><br><span class="line">            Bck[i<span class="number">-1</span>]=u,Idx[i<span class="number">-1</span>]=v;</span><br><span class="line">        &#125;</span><br><span class="line">        dfsTree(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        dfs_Seg(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;++i)</span><br><span class="line">            Idx[i]=(Bck[i]==Fa[Idx[i]]?Idx[i]:Bck[i]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,Str+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(Str[<span class="number">1</span>]!=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="keyword">if</span>(Str[<span class="number">1</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(x==y) <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,queryPath(x,y));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> modify(<span class="number">1</span>,Dfn[Idx[x]],y);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,Str+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">2 3 2</span></span><br><span class="line"><span class="comment">QUERY 1 2</span></span><br><span class="line"><span class="comment">CHANGE 1 3</span></span><br><span class="line"><span class="comment">QUERY 1 2</span></span><br><span class="line"><span class="comment">DONE</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment">3 4 2</span></span><br><span class="line"><span class="comment">3 5 5</span></span><br><span class="line"><span class="comment">5 6 4</span></span><br><span class="line"><span class="comment">QUERY 4 2</span></span><br><span class="line"><span class="comment">CHANGE 2 6</span></span><br><span class="line"><span class="comment">QUERY 1 6</span></span><br><span class="line"><span class="comment">QUERY 5 4</span></span><br><span class="line"><span class="comment">CHANGE 4 2</span></span><br><span class="line"><span class="comment">QUERY 4 6</span></span><br><span class="line"><span class="comment">QUERY 2 6 </span></span><br><span class="line"><span class="comment">DONE </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> RMQ </tag>
            
            <tag> String </tag>
            
            <tag> 图论 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> dfs </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> Dfs序 </tag>
            
            <tag> LCA </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> Splay </tag>
            
            <tag> 分治 </tag>
            
            <tag> 单调栈 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 树上差分 </tag>
            
            <tag> 差分约束 </tag>
            
            <tag> Link-Cut Tree </tag>
            
            <tag> 动态树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>E.N.D</title>
      <link href="/Eternity/Until-The-End/my-senior-high-school-life/"/>
      <url>/Eternity/Until-The-End/my-senior-high-school-life/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e3c70d29a2047a9533a75abaf7134313114fe54cd3da193ddce92741848cf8e5">67a1534bda8b9fab0136ec08af9f8eb10e034c41a34e3d859e558bda8798431be1e3783a2e5fc5d52bfe124d90b7bb318f658b751ffcad7cbecdb7c0064d8b791dccd633d385c8dc4974347ae8de8ba47d2fc5e84d63020ab047bb5205147aaf667554f57f1c7f6cdc8db153870f5795e40122cf9e2902816a5f1c95d4499a81e6066162340db78ae727b5ff740094c7691752130505b87f2d04dd6472dc6149427a119678ea96bc52206e09a34d36690d8b9d36c42d744f45cf9762916410407e3e2a850b43a1e408c2eef125b85561ad8baa24b4cca14bc6a51a68f089de3cc7cc6b849172f5cc6d40150bb4f96fe356309c798d2ee966d9de1e381f776bda7d6dd7de86114d42281ca34d3723a8040b6d320dcb1baaa6cfb1ab1aa9c365fe257fa8bc83ea82bd533ddbc9c60d097a5ee8f41a29af0055e0d4a6b4132ed0ef26b491c9e1b75bf538a5a9a08c75b43b39d20d9670f5dd13286cbe1a6973264dfe0925fd1400f5a2bbfa7ef040ca8d654255b07ca9e01fd0ee95bf01125b83c4d9b2e5b31a6881ffdad19a53e7426fdcc10112d05be8b2bb1b92e74a5d61fce18f3d7c5dad192778e1680ede571f8b609f4cf79fd92b09054348fd65fb5baefb6cadf1e7ac55a86fcb35054f61fe0ae7ba92c6837ec26e199da3f922b54c78913db8a7d3413bc4e722dedbc405e47be7fa02afed335437df32a5c2c699a7b77e42f6d294735a8803d5369327dda3700f52050a2ff1550a951db0ff4da15f407055907a48688fab0c05c2045279aadbe759317175f980fbaf2a61b139e3b7d12e0b95b2dfcd0d598f42f14305b6a97505433d98753665d39eda91f0b825791c9954594a8756f7f536890826c84e9cca2f52f315ee42db69a96e2ffbfe515fab5a4b9078d2a0fa7ec480fec31246042e88c03b9c4a26e07cf4ff917790b30d7fc88b875f5225ba4565f9422a1b3ad7c4f3727cbc9ed24c2d71afe3c6b6c424bf633ecdfb61ad5a39b93a6bbe4650ca4fa40758eb47ed0ab05af913059c291bf915831d38cfb1fbb3b904ee49a9fbf470c0d33e27e55923b0386446fc84563a3993358f4098caa30a360e5e1dc2c63e9276c6f55034e7c843625bff08239696e480d77debb7872c02d0c0ecf868a279ddf148d0877a66b2100a6237ab6e2b578699c4f7d51d550d1a4ed41ef41858b607c31c33254cd965d5075e4509d54dc107cf9d7233c3e39d10c0cdf0ba2724719e8ad0b01a942b40e994dd9e81752755c6a950a1e7fc4c394070a0d6b001bab7ab56b0daca1ddd6c86785c7bb79df19653c80cb3c38dc7cdb5e21845cfa0d041fecd12f652a7b94a53c5cd311a2ae82860064195f38dcc1cec3fde8abb1d4596af6c62f40f48e4eb349e889c0ef2213191139813a21a3b448fc506652a3e30ae24831a1f2a57d9062a95ce3a263dcdcf160493c65b7e1cc277d9fb2a785624e549198e0b313d3cf309c922bd9c014205b328214d9adcbe32ad339a45fc4880ae88d4d1bbdc67a4b30833c7f7037f908b2d6382262b57b02b7cef70723fd366c62a5fe150bb20c3059df207dd154d0016f65fbfbd58095d1e46fe7417aa155dbcb1d23cbecce43ed23885dc0c9a0211afedce6def60d5560d7c01e36c1c57561f2197225a813646701c2c7e2a915f0ec3dcf735b86d5e74b02238f09bd55cd3d9c44103379df833bfeb20e25199a09a6f1c769b4346f9e5ca0e8b971d69c4c7bc61eafce4940996ac4d8d109da571d8391a6676cda7dfb492b8a884586d81166c26f22a70168d931c01b4670f34eb18ddf1881bd083a3c76a261dd1f65423b276de826f9702f280a8bb5a39128f5c6af189a6ebea15ae61e88c6b105418a44e7f13e05a0188a9fa31e06497174e6c2eade04a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Eternalにはいくつかの秘密があります。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/Eternity/lib/hbe.js"></script><link href="/Eternity/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Until The End </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>树链剖分</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/tree-chain-segmentation/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/tree-chain-segmentation/</url>
      
        <content type="html"><![CDATA[<p>“枷锁层深纵横，末路穷途糜烂。”</p><span id="more"></span><p>实质：将一棵树剖分成若干条链，并使用数据结构去优化维护，以达到 $\mathcal O(\log n)$ 的时间复杂度。是一些数据结构或者算法在树上的推广。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="轻重链剖分-启发式剖分"><a href="#轻重链剖分-启发式剖分" class="headerlink" title="轻重链剖分/启发式剖分"></a>轻重链剖分/启发式剖分</h3><p>给出定义：将树分成<strong>轻边</strong>和<strong>重边</strong>，对于一个节点 $u$ 有函数 $size[u]$ 表示以 $u$ 为根节点的子树节点个数。那么有一个节点 $u$ 有 $\forall v,c(u,v)\in E$ ，而 $size[v]=\max\{size[u.son]\}$ ，则 $c(u,v)$ 为重边，而 $c(u,u.son),u.son\ne v$ 为轻边。</p><p>有下列性质：</p><ul><li>$c’(u,v)$ 为轻边，则有 $size[v]\le \frac{size[u]}{2}$ ；</li><li>从 $root$ 到任意一点的路径上，不超过 $\mathcal O(\log n)$ 条轻边数和重链数。</li></ul><p>另外：</p><ul><li>重儿子：与父节点以重边相连的节点，也是子树节点最多的节点。</li><li>重边：定义如上。</li><li>重链：全部由重边构成的路径（一个节点也是一条重链）。</li><li>轻儿子：一个节点除重儿子外的所有子节点。</li><li>轻边：一个节点到其轻儿子的边。</li></ul><p><img src="https://oi-wiki.org/graph/images/hld.png" alt="img"></p><p>有一个性质：</p><p>一棵树的重心一定在这棵树的重链（由根结点及其重儿子组成的链）上。</p><p>对于一个大小为 $n$ 的树与任意一个树中结点 $c$，称 $c$ 是该树的<strong>重心</strong>当且仅当在树中删去 $c$ 及与它关联的边后，分裂出的所有子树的大小均<strong>不超过</strong> $\lfloor \frac{n}{2} \rfloor$（其中 $\lfloor x \rfloor$ 是下取整函数）。对于包含至少一个结点的树，它的重心只可能有 $1$ 或 $2$ 个。</p><h3 id="节点信息"><a href="#节点信息" class="headerlink" title="节点信息"></a>节点信息</h3><p>$fa[x]$ 表示 $x$ 的父节点。</p><p>$dep[x]$ 表示 $x$ 的深度。</p><p>$size[x]$ 表示以 $x$ 为根的子树的节点数。</p><p>$son[x]$ 表示 $x$ 的重儿子。</p><p>$top[x]$ 表示 $x$ 所在重链的顶部节点编号。</p><p>$seg[x]$ 表示 $x$ 在线段树中的编号（如果以线段树维护）。</p><p>$rev[x]$ 表示线段树中编号为 $x$ 的节点在原树中对应的节点编号。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>首先一遍 <code>dfs(int x,int last)</code> 处理出 $fa[],dep[],size[],son[]$ 等信息，类似于树型 dp 。</p><p>然后第二遍 <code>dfs(int x,int last)</code> 处理出 $seg[],top[],rev[]$ 等信息。</p><p>第一遍 $dfs$ ：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last,<span class="type">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Pt[x].size=<span class="number">1</span>,Pt[x].fa=last;</span><br><span class="line">    Pt[x].dep=depth;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsTree</span>(v,x,depth+<span class="number">1</span>);</span><br><span class="line">        Pt[x].size+=Pt[v].size;</span><br><span class="line">        <span class="keyword">if</span>(Pt[v].size&gt;Pt[Pt[x].son].size) Pt[x].son=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二遍 $dfs$ ：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsDfn</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dfn[x]=++Cnt;<span class="comment">//树的dfs序，也就是映射到线段树内的编号</span></span><br><span class="line">    Wgt[Cnt]=val[x];<span class="comment">//是排序之后对应的值，也就是映射到线段树内树的点权值</span></span><br><span class="line">    Pt[x].top=topf;</span><br><span class="line">    <span class="keyword">if</span>(!Pt[x].son) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">dfsDfn</span>(Pt[x].son,topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v==Pt[x].fa||v==Pt[x].son) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsDfn</span>(v,v);<span class="comment">//每一个轻儿子都有一条从自己开始的重链</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p><strong>映射</strong>指的是将整个树链映射到所对应的数据结构内，可以是 BIT 或者 Segment Tree 甚至是 Splay 等平衡树，视题目而定。</p><p><a href="https://violeteternal.github.io/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/segment-tree/">线段树不太详解</a></p><p>接下来就是常规的线段树操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val,size,tag,l,r;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].val=(Tree[p&lt;&lt;<span class="number">1</span>].val+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val)%Mod;</span><br><span class="line">&#125;<span class="comment">//向上传递</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushDown</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].val=(Tree[p&lt;&lt;<span class="number">1</span>].val+Tree[p].tag*Tree[p&lt;&lt;<span class="number">1</span>].size)%Mod;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val=(Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val+Tree[p].tag*Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].size)%Mod;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].tag=(Tree[p&lt;&lt;<span class="number">1</span>].tag+Tree[p].tag)%Mod;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag=(Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+Tree[p].tag)%Mod;</span><br><span class="line">        Tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//向下传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l,Tree[p].r=r,Tree[p].size=r-l+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val=Wgt[l]%Mod;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;<span class="comment">//建树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modifyAdd</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val+=d*Tree[p].size;</span><br><span class="line">        Tree[p].tag+=d;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modifyAdd</span>(p&lt;&lt;<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) <span class="built_in">modifyAdd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;<span class="comment">//区间修改</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">queryAdd</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r) <span class="keyword">return</span> Tree[p].val;</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) sum=(sum+<span class="built_in">queryAdd</span>(p&lt;&lt;<span class="number">1</span>,l,r))%Mod;</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) sum=(sum+<span class="built_in">queryAdd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r))%Mod;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;<span class="comment">//区间查询</span></span><br></pre></td></tr></table></figure><h3 id="树链操作"><a href="#树链操作" class="headerlink" title="树链操作"></a>树链操作</h3><p>如果你观察仔细，会发现一个非常神奇的特点：</p><p>在最后求出来的 $dfs$ 序内（也就是线段树的顺序），满足：</p><ul><li>任意一条重链内的节点编号连续；</li><li>任意一棵子树内的节点编号连续。</li></ul><p><del>岂不美哉</del>。</p><h4 id="路径查询与修改"><a href="#路径查询与修改" class="headerlink" title="路径查询与修改"></a>路径查询与修改</h4><p>因为任意重链内节点编号连续，那么对于路径 $(x,y)$ ，我们的首要任务是把 $x$ 和 $y$ 跳到同一条链中。（然后你会发现最后他们跳到了 $lca(x,y)$ 的链上）然后每跳一次，就把跳过的那条链修改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modifyTreeAdd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> dz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Pt[x].top!=Pt[y].top)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Pt[Pt[x].top].dep&lt;Pt[Pt[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modifyAdd</span>(<span class="number">1</span>,Dfn[Pt[x].top],Dfn[x],dz);</span><br><span class="line">        x=Pt[Pt[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Pt[x].dep&gt;Pt[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modifyAdd</span>(<span class="number">1</span>,Dfn[x],Dfn[y],dz);</span><br><span class="line">&#125;<span class="comment">//路径修改</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">queryTreeAdd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(Pt[x].top!=Pt[y].top)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Pt[Pt[x].top].dep&lt;Pt[Pt[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        res=(res+<span class="built_in">queryAdd</span>(<span class="number">1</span>,Dfn[Pt[x].top],Dfn[x]))%Mod;</span><br><span class="line">        x=Pt[Pt[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Pt[x].dep&gt;Pt[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    res=(res+<span class="built_in">queryAdd</span>(<span class="number">1</span>,Dfn[x],Dfn[y]))%Mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;<span class="comment">//路经查询</span></span><br></pre></td></tr></table></figure><h4 id="子树查询与修改"><a href="#子树查询与修改" class="headerlink" title="子树查询与修改"></a>子树查询与修改</h4><p>既然子树节点也是连续的，那就更没什么说头了，直接一步解决即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">modifyAdd</span>(<span class="number">1</span>,Dfn[x],Dfn[x]+Pt[x].size<span class="number">-1</span>,z%Mod);</span><br><span class="line"><span class="comment">//子树修改</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">queryAdd</span>(<span class="number">1</span>,Dfn[x],Dfn[x]+Pt[x].size<span class="number">-1</span>));</span><br><span class="line"><span class="comment">//子树查询</span></span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h3><p>路径修改，路径查询，子树修改，子树查询。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Root,Mod,val[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fa,dep,size,son,top;</span><br><span class="line">&#125;Pt[MAXN];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="type">int</span> Dfn[MAXN&lt;&lt;<span class="number">2</span>],Cnt,Wgt[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last,<span class="type">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Pt[x].size=<span class="number">1</span>,Pt[x].fa=last;</span><br><span class="line">    Pt[x].dep=depth;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsTree</span>(v,x,depth+<span class="number">1</span>);</span><br><span class="line">        Pt[x].size+=Pt[v].size;</span><br><span class="line">        <span class="keyword">if</span>(Pt[v].size&gt;Pt[Pt[x].son].size) Pt[x].son=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsDfn</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dfn[x]=++Cnt;</span><br><span class="line">    Wgt[Cnt]=val[x];</span><br><span class="line">    Pt[x].top=topf;</span><br><span class="line">    <span class="keyword">if</span>(!Pt[x].son) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">dfsDfn</span>(Pt[x].son,topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v==Pt[x].fa||v==Pt[x].son) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsDfn</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val,size,tag,l,r;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].val=(Tree[p&lt;&lt;<span class="number">1</span>].val+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushDown</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].val=(Tree[p&lt;&lt;<span class="number">1</span>].val+Tree[p].tag*Tree[p&lt;&lt;<span class="number">1</span>].size)%Mod;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val=(Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val+Tree[p].tag*Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].size)%Mod;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].tag=(Tree[p&lt;&lt;<span class="number">1</span>].tag+Tree[p].tag)%Mod;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag=(Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+Tree[p].tag)%Mod;</span><br><span class="line">        Tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l,Tree[p].r=r,Tree[p].size=r-l+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val=Wgt[l]%Mod;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modifyAdd</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val+=d*Tree[p].size;</span><br><span class="line">        Tree[p].tag+=d;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modifyAdd</span>(p&lt;&lt;<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) <span class="built_in">modifyAdd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">queryAdd</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r) <span class="keyword">return</span> Tree[p].val;</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) sum=(sum+<span class="built_in">queryAdd</span>(p&lt;&lt;<span class="number">1</span>,l,r))%Mod;</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) sum=(sum+<span class="built_in">queryAdd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r))%Mod;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modifyTreeAdd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> dz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Pt[x].top!=Pt[y].top)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Pt[Pt[x].top].dep&lt;Pt[Pt[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modifyAdd</span>(<span class="number">1</span>,Dfn[Pt[x].top],Dfn[x],dz);</span><br><span class="line">        x=Pt[Pt[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Pt[x].dep&gt;Pt[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modifyAdd</span>(<span class="number">1</span>,Dfn[x],Dfn[y],dz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">queryTreeAdd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(Pt[x].top!=Pt[y].top)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Pt[Pt[x].top].dep&lt;Pt[Pt[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        res=(res+<span class="built_in">queryAdd</span>(<span class="number">1</span>,Dfn[Pt[x].top],Dfn[x]))%Mod;</span><br><span class="line">        x=Pt[Pt[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Pt[x].dep&gt;Pt[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    res=(res+<span class="built_in">queryAdd</span>(<span class="number">1</span>,Dfn[x],Dfn[y]))%Mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,Root,Mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(val[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,u,v;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfsTree</span>(Root,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfsDfn</span>(Root,Root);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,opt,x,y,z;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x,y,z);</span><br><span class="line">            <span class="built_in">modifyTreeAdd</span>(x,y,z%Mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x,y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">queryTreeAdd</span>(x,y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x,z);</span><br><span class="line">            <span class="built_in">modifyAdd</span>(<span class="number">1</span>,Dfn[x],Dfn[x]+Pt[x].size<span class="number">-1</span>,z%Mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">queryAdd</span>(<span class="number">1</span>,Dfn[x],Dfn[x]+Pt[x].size<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5 2 24</span></span><br><span class="line"><span class="comment">7 3 7 8 0 </span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">3 1</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">3 4 2</span></span><br><span class="line"><span class="comment">3 2 2</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">1 5 1 3</span></span><br><span class="line"><span class="comment">2 1 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">8 10 2 448348</span></span><br><span class="line"><span class="comment">458 718 447 857 633 264 238 944 </span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">6 2</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">5 7</span></span><br><span class="line"><span class="comment">8 6</span></span><br><span class="line"><span class="comment">3 7 611</span></span><br><span class="line"><span class="comment">4 6</span></span><br><span class="line"><span class="comment">3 1 267</span></span><br><span class="line"><span class="comment">3 2 111</span></span><br><span class="line"><span class="comment">1 6 3 153</span></span><br><span class="line"><span class="comment">3 7 673</span></span><br><span class="line"><span class="comment">4 8</span></span><br><span class="line"><span class="comment">2 6 1</span></span><br><span class="line"><span class="comment">4 7</span></span><br><span class="line"><span class="comment">3 4 228</span></span><br><span class="line"><span class="comment">*/</span>    </span><br></pre></td></tr></table></figure></details><hr><h3 id="最近公共祖先"><a href="#最近公共祖先" class="headerlink" title="最近公共祖先"></a>最近公共祖先</h3><p>裸裸的树剖，甚至不需要数据结构维护。</p><p>对于一组询问 $(x,y)$ 首先将两个点跳到同一条重链上，然后输出深度小的点即可。</p><p>另外，还是不建议用结构体来存储节点，读者可以比对一下这道题和上一道题的代码量，就会发现其实还是单数组的更好读和修改一些（个人意见）。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Root;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Size[MAXN],Dep[MAXN],Top[MAXN],Fa[MAXN],Son[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fa[x]=last,Size[x]=<span class="number">1</span>,Dep[x]=dep;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsTree</span>(v,x,dep+<span class="number">1</span>);</span><br><span class="line">        Size[x]+=Size[v];</span><br><span class="line">        <span class="keyword">if</span>(!Son[x]||Size[Son[x]]&lt;Size[v]) Son[x]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsDfn</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Top[x]=topf;</span><br><span class="line">    <span class="keyword">if</span>(!Son[x]) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">dfsDfn</span>(Son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v==Fa[x]||v==Son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsDfn</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Top[x]!=Top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[Top[x]]&lt;Dep[Top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        x=Fa[Top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&gt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,Root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,u,v;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfsTree</span>(Root,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfsDfn</span>(Root,Root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x,y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">lca</span>(x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5 4</span></span><br><span class="line"><span class="comment">3 1</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="P3128"><a href="#P3128" class="headerlink" title="P3128"></a><a href="https://www.luogu.com.cn/problem/P3128">P3128</a></h3><p>维护区间和，然后单点查找即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,K;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Dep[MAXN],Son[MAXN],Fa[MAXN],Size[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dep[x]=Dep[last]+<span class="number">1</span>;Size[x]=<span class="number">1</span>;Fa[x]=last;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsTree</span>(v,x);</span><br><span class="line">        Size[x]+=Size[v];</span><br><span class="line">        <span class="keyword">if</span>(Size[v]&gt;Size[Son[x]]||!Son[x]) Son[x]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Dfn[MAXN],Top[MAXN],Cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsDfn</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dfn[x]=++Cnt;</span><br><span class="line">    Top[x]=topf;</span><br><span class="line">    <span class="keyword">if</span>(!Son[x]) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">dfsDfn</span>(Son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==Fa[x]||v==Son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsDfn</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,val,tag;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].val=Tree[p&lt;&lt;<span class="number">1</span>].val+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushDown</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].val+=(Tree[p&lt;&lt;<span class="number">1</span>].r-Tree[p&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)*Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val+=(Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>)*Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].tag+=Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=Tree[p].tag;</span><br><span class="line">        Tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l,Tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val=Tree[p].tag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val+=(Tree[p].r-Tree[p].l+<span class="number">1</span>)*d;</span><br><span class="line">        Tree[p].tag+=d;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r) <span class="keyword">return</span> Tree[p].val;</span><br><span class="line">    <span class="type">int</span> val=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) val+=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) val+=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modifyPath</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Top[x]!=Top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[Top[x]]&lt;Dep[Top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>,Dfn[Top[x]],Dfn[x],d);</span><br><span class="line">        x=Fa[Top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&gt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modify</span>(<span class="number">1</span>,Dfn[x],Dfn[y],d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,K);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,u,v;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfsTree</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfsDfn</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;=K;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x,y);</span><br><span class="line">        <span class="built_in">modifyPath</span>(x,y,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=-INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(<span class="number">1</span>,Dfn[i],Dfn[i]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 10</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">4 2</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">4 3</span></span><br><span class="line"><span class="comment">4 3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="P3258"><a href="#P3258" class="headerlink" title="P3258"></a><a href="https://www.luogu.com.cn/problem/P3258">P3258</a></h3><p>与上一题类似，可以说是双倍经验。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">3e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,Turn[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fa[MAXN],Son[MAXN],Dep[MAXN],Size[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fa[x]=last,Dep[x]=Dep[last]+<span class="number">1</span>,Size[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsTree</span>(v,x);</span><br><span class="line">        Size[x]+=Size[v];</span><br><span class="line">        <span class="keyword">if</span>(!Son[x]||Size[v]&gt;Size[Son[x]]) Son[x]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Top[MAXN],Dfn[MAXN],Cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsDfn</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dfn[x]=++Cnt;</span><br><span class="line">    Top[x]=topf;</span><br><span class="line">    <span class="keyword">if</span>(!Son[x]) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">dfsDfn</span>(Son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==Fa[x]||v==Son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsDfn</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,val,tag,size;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].val=Tree[p&lt;&lt;<span class="number">1</span>].val+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushDown</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].val+=Tree[p&lt;&lt;<span class="number">1</span>].size*Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val+=Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].size*Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].tag+=Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=Tree[p].tag;</span><br><span class="line">        Tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l,Tree[p].r=r,Tree[p].size=r-l+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val=Tree[p].tag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val+=d*Tree[p].size;</span><br><span class="line">        Tree[p].tag+=d;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="built_in">pushUp</span>(p); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r) <span class="keyword">return</span> Tree[p].val;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) val+=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) val+=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modifyPath</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Top[x]!=Top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[Top[x]]&lt;Dep[Top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>,Dfn[Top[x]],Dfn[x],d);</span><br><span class="line">        x=Fa[Top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&gt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modify</span>(<span class="number">1</span>,Dfn[x],Dfn[y],d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tc.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tc.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Turn[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,u,v;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfsTree</span>(Turn[<span class="number">1</span>],<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfsDfn</span>(Turn[<span class="number">1</span>],Turn[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N<span class="number">-1</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modifyPath</span>(Turn[i+<span class="number">1</span>],Turn[i+<span class="number">1</span>],<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">modifyPath</span>(Turn[i],Turn[i+<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,Dfn[i],Dfn[i]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 4 5 3 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="边权挂点"><a href="#边权挂点" class="headerlink" title="边权挂点"></a>边权挂点</h3><p>我们知道，树剖的实质是维护点权的，但是，树剖也可以进行一系列操作使其能够维护边权。俗称<strong>边权挂点</strong>。</p><p>我们把题目的树视作有根树，每一个节点都只存在至多 $1$ 个父亲。那么，我们将原来维护 $u$ 节点的 $dfn[u]$ 指向 $c(fa[u],u)$ 的权值。通俗地讲，维护该点与其父节点的边。</p><p>但是，维护边权时有许多需要注意的。在我们已经跳到了同一重链中，以边权和为例，对于 $lca(x,y)$ 而言，维护的是 $c(fa[lca(x,y)],lca(x,y))$ 的权值，但事实上，我们在求解 $\sum\limits^{e\in path(x,y)}_{e}e(u,v)$ 时，不会去求 $lca(x,y)$ 与其父节点的边权。那么，我们在 $dfn[x]$ 的地方 $+1$ 使其跳过 $lca(x,y)$ 即可。</p><p>但是，这并不是普遍情况，真正需要 <code>+1</code> 还是需要 <code>-1</code> 要视题目而定，所以为什么树剖的边权题非常难调，调得人想趋势。</p><p>给出一道比较模板的<a href="https://www.luogu.com.cn/problem/P2420">边权挂点题</a></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">2e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">    ll val;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,ll v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total,Xor[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u,w);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Dep[MAXN],Son[MAXN],Fa[MAXN],Size[MAXN],Top[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fa[x]=last,Dep[x]=dep,Size[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        Xor[v]=Edge[e].val;</span><br><span class="line">        <span class="built_in">dfsTree</span>(v,x,dep+<span class="number">1</span>);</span><br><span class="line">        Size[x]+=Size[v];</span><br><span class="line">        <span class="keyword">if</span>(!Son[x]||Size[v]&gt;Size[Son[x]]) Son[x]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Dfn[MAXN],Val[MAXN],Cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsDfn</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dfn[x]=++Cnt;</span><br><span class="line">    Val[Cnt]=Xor[x];Top[x]=topf;</span><br><span class="line">    <span class="keyword">if</span>(!Son[x]) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">dfsDfn</span>(Son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==Fa[x]||Edge[e].to==Son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsDfn</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,val;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].val=Tree[p&lt;&lt;<span class="number">1</span>].val^Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l,Tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val=Val[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">queryXor</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r) <span class="keyword">return</span> Tree[p].val;</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) val^=<span class="built_in">queryXor</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) val^=<span class="built_in">queryXor</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">queryPath</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(Top[x]!=Top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[Top[x]]&lt;Dep[Top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        ans^=<span class="built_in">queryXor</span>(<span class="number">1</span>,Dfn[Top[x]],Dfn[x]);</span><br><span class="line">        x=Fa[Top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&gt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    ans^=<span class="built_in">queryXor</span>(<span class="number">1</span>,Dfn[x]+<span class="number">1</span>,Dfn[y]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,u,v,w;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfsTree</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfsDfn</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">    <span class="built_in">read</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x,y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">queryPath</span>(x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=N;++i) printf(&quot;%d &quot;,Dfn[i]);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=N;++i) printf(&quot;%d &quot;,Val[i]);*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 4 9644</span></span><br><span class="line"><span class="comment">2 5 15004</span></span><br><span class="line"><span class="comment">3 1 14635</span></span><br><span class="line"><span class="comment">5 3 9684</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">*/</span>    </span><br></pre></td></tr></table></figure></details><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 建图 </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> Dfs序 </tag>
            
            <tag> LCA </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> Splay </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022.07.04练习题</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220704/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220704/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ff1f45489e9ba452e4d5809281dfdec53c4dffbda9140adc1a878909a206efdc"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Eternalにはいくつかの秘密があります。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/Eternity/lib/hbe.js"></script><link href="/Eternity/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 优化 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 状压dp </tag>
            
            <tag> 状态压缩 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> LCA </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 背包 </tag>
            
            <tag> 树型dp </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 分析数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3829 [SHOI2012]信用卡凸包</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p3829/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p3829/</url>
      
        <content type="html"><![CDATA[<p>凸包练习题</p><span id="more"></span><p>凸包模板 + 初中几何知识。</p><p>难在将中点坐标转化成四角坐标。</p><p>注意：信用卡有 $N$ 个，所以点的坐标也就有 $4N$ 个，所以数组空间要开 $4$ 倍大小。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">4e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,cnt;</span><br><span class="line"><span class="type">double</span> len,wid,rth;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="type">const</span> Point &amp;a)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x-a.x,y-a.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">double</span> x=<span class="number">0</span>,<span class="type">double</span> y=<span class="number">0</span>):<span class="built_in">x</span>(x),<span class="built_in">y</span>(y)&#123;&#125;</span><br><span class="line">&#125;Pt[MAXN],centre[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">cross</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x*b.y-a.y*b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">area</span><span class="params">(Point a,Point b,Point c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(b-a,c-a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">rotate</span><span class="params">(Point a,<span class="type">double</span> alph)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x*<span class="built_in">cos</span>(alph)+a.y*<span class="built_in">sin</span>(alph),-a.x*<span class="built_in">sin</span>(alph)+a.y*<span class="built_in">cos</span>(alph)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> theta[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">4</span>;++k)</span><br><span class="line">        &#123;</span><br><span class="line">            Point dis=<span class="built_in">rotate</span>(&#123;dx[k]*len,dy[k]*wid&#125;,-theta[i]);</span><br><span class="line">            Pt[++cnt]=<span class="built_in">Point</span>(centre[i].x+dis.x,centre[i].y+dis.y);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=cnt;++i) printf(&quot;%.2lf %.2lf\n&quot;,Pt[i].x,Pt[i].y);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> stk[MAXN&lt;&lt;<span class="number">1</span>],top;</span><br><span class="line"><span class="type">bool</span> used[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">getDist</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">andrew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="built_in">sort</span>(Pt+<span class="number">1</span>,Pt+<span class="number">1</span>+cnt,cmp);</span><br><span class="line">    top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> res=<span class="built_in">area</span>(Pt[stk[top<span class="number">-1</span>]],Pt[stk[top]],Pt[i]);</span><br><span class="line">            <span class="keyword">if</span>(res&lt;<span class="number">0</span>) used[stk[top--]]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(res==<span class="number">0</span>) --top;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stk[++top]=i;</span><br><span class="line">        used[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    used[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=cnt;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(used[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">area</span>(Pt[stk[top<span class="number">-1</span>]],Pt[stk[top]],Pt[i])&lt;<span class="number">0</span>) --top;</span><br><span class="line">        stk[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=top;++i) res+=<span class="built_in">getDist</span>(Pt[stk[i<span class="number">-1</span>]],Pt[stk[i]]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,res+(<span class="number">2</span>*rth*<span class="built_in">acos</span>(<span class="number">-1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;geo.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;geo.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf&quot;</span>,&amp;wid,&amp;len,&amp;rth);</span><br><span class="line">    wid=(wid<span class="number">-2</span>*rth)/<span class="number">2</span>;</span><br><span class="line">    len=(len<span class="number">-2</span>*rth)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf&quot;</span>,&amp;centre[i].x,&amp;centre[i].y,&amp;theta[i]);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">andrew</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">6.0 2.0 0.0</span></span><br><span class="line"><span class="comment">0.0 0.0 0.0</span></span><br><span class="line"><span class="comment">2.0 -2.0 1.5707963268</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 几何 </tag>
            
            <tag> 计算几何 </tag>
            
            <tag> 凸包 </tag>
            
            <tag> 叉积 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络流</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/network-flow/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/network-flow/</url>
      
        <content type="html"><![CDATA[<p>“互联网就像影子，侵蚀着这个世界的边边角角。”</p><span id="more"></span><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>网络流是网络中的流，网络是一张<strong>有向图</strong>，表示为 $G=(V,E)$ ，对于每一条边 $(u,v)$ ，存在一个权值 $c(u,v)$ 表示容量 (capacity) ，当 $(u,v)\notin E$ ，则有 $c(u,v)=0$ ，注意，不保证 $c(u,v)=c(v,u)$ 。每一个网络有两个特殊点，一个是<strong>源点 (Source) </strong> $s\in V$ ，一个是<strong>汇点(Sink) </strong> $t\in V,(s\neq t)$ 。</p><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>一个实数函数满足 $f(u,v),(u\in V,v\in E)$ ，且有：</p><ol><li>容量限制 $f(u,v)\leq c(u,v)$ ；</li><li>流守恒性 $\sum^{i\in V,i\neq s}_{i}f(s,i)=\sum^{j\in V,j\neq t}_{j}f(j,t)$ ，即从源点流出的流量等于汇点流入的流量。</li><li>如果考虑反向边，则有第三性质：斜对称性 $f(u,v)=-f(v,u)$ 。</li></ol><p>$f$ 是 $G$ 的流函数， $f(u,v)$ 被称为 $(u,v)\in E$ 的流量，而 $f’(u,v)=c(u,v)-f(u,v)$ 称为边的<strong>剩余流量</strong>。则 $\sum_{(s,v)\in E}f(s,v)$ 为从源点出发的流量和。</p><h2 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h2><p>可以把网络流看作水库出水，而<strong>源点</strong>则是水库，<strong>汇点</strong>就是你家。源点的“量”是无限的，中途的任何一个点不存储任意一点流量也不会产生任何一点流量，所以源点出发的所有流量必定流入汇点。而经过每一条边的<strong>最大流量</strong>，即是 $c(x,y)$ </p><p>最大流的算法，就是在满足流过边 $c$ 的流量满足 $\leq c(x,y)$ 的情况下，汇点的流量最大的问题。</p><h3 id="残余网络"><a href="#残余网络" class="headerlink" title="残余网络"></a>残余网络</h3><p>首先我们介绍一下一条边的剩余容量 $c_f(u,v)$（Residual Capacity），它表示的是这条边的容量与流量之差，即 $c_f(u,v)=c(u,v)-f(u,v)$ 。</p><p>对于流函数 $f$ ，残量网络 $G_f$（Residual Network）是网络 $G$ 中所有结点 <strong>和剩余容量大于 0</strong> 的边构成的子图。形式化的定义，即 $G_f=(V_f=V,E_f=\{(u,v)\in E,c_f(u,v)&gt;0\})$ 。</p><p>注意，剩余容量大于 0 的边可能不在原图 $G$ 中（根据容量、剩余容量的定义以及流函数的斜对称性得到）。可以理解为，残量网络中包括了那些还剩了流量空间的边构成的图，也包括虚边（即反向边）。</p><hr><p>以下是二月份初学时做下的笔记。</p><hr><p>我们设 $f(x,y)$ 为边 $(x,y)$ 的实际容量。</p><ul><li>饱和弧： $f(x,y)=c(x,y)$ ，流量为该边的容量</li><li>非饱和弧： $f(x,y)&lt;c(x,y)$ ，实际流量小于容量</li><li>零流弧： $f(x,y)=0$ ，该边未流过流量。</li><li>非零流弧： $f(x,y)&gt;0$ ，当前流量不为 $0$ 。</li></ul><p><strong>残余网络</strong>：设有容量网络 $G(V,E)$ 及其上的网络流 $f$ ， $G$ 关于 $f$ 的残留网络即为 $G(V’,E’)$ ，其中 $G’$ 的顶点集 $V’$ 和 $G$ 的顶点集 $V$ 相同，即 $V’=V$ ，对于 $G$ 中任何一条弧 $(u,v)$ ，如果 $f(u,v)&lt;c(u,v)$ ，那么在 $G’$ 中有一条弧  $(u,v)\in E’$  ，其容量为 $c’(u,v)=c(u,v)-f(u,v)$ ，如果 $f(u,v)&gt;0$ ，则在 $G’$ 中有一条弧 $(v,u)\in E’$ ，其容量为 $c’(v,u)=f(u,v)$ 。</p><p>从残留网络的定义来看，原容量网络中的每条弧在残留网络中都化为一条或者两条弧。在残留网络中，从源点到汇点的任意一条简单路径都对应一条增光路，路径上每条弧容量的最小值即为能够一次增广的最大流量。</p><hr><h3 id="增广路"><a href="#增广路" class="headerlink" title="增广路"></a>增广路</h3><p><strong>增广路</strong>是一条从源点到汇点的路径，满足所有边的剩余容量都大于 $0$ ，则该路是网络 $G$ 的一条增广路（Augmenting Path）。也可以定义为：残余网络 $G_f$ 中，存在一条从源点到汇点的路径被称为增广路。</p><hr><p>以下是二月份自学时做的笔记。</p><hr><ol><li>增广路是一条链。（链是网络中的一个顶点序列，这个序列中前后两个顶点有弧相连）</li><li>链上的前向弧都是非饱和弧，链上的后向弧都是非零弧。（前向弧即输入的边，后向弧即建立的反边）</li><li>链的起点是源点，终点是汇点。</li></ol><p>增广路是一个<strong>边的集合</strong>，从 $S$ 至 $T$ 的一条路径。增广路的<strong>最大流量</strong>表示该路径经过的边中流量最小的边的流量，即：</p><blockquote><p>一条增广路  $i$ 的边集是 $E_i$ ，最大流量是 $c$ ，则 $\forall r\in E,c_r\leq c$ </p></blockquote><p>用<a href="https://2745518585.github.io/post/maximum-flow-Dinic/">赵悦岑巨佬</a>的话来讲，增广路指的就是一条从源点到汇点，且经过的边最小容量不为 $0$ 的路径。而我们寻找增广路之后，就会将所有经过的边的容量减去增广路的流量。但是，这种算法并不保险。所以我们对于每一条存在的 $c(x,y)$ ，都建立其后向弧满足 $c(y,x)=0$ 使得我们在后续寻找增广路时可以“反悔”，使其不因之前的错误增广路而影响。</p><p>我们对于每一条边都增加一条容量为 $0$ 反向边，找到增广路后经过的边流量要减去此增广路的流量，其反向边的流量还要加上此增广路的流量。所有反向边组成的图就是<strong>残留网络</strong>。</p><hr><h3 id="反向边"><a href="#反向边" class="headerlink" title="反向边"></a>反向边</h3><p>增广时需要建造反向边，这是通理，虽然我也没有想明白其正确性。总之，增广的时候，由于贪心原则，其并非全局最优解，而减去之后会导致最优解无法到达，我们要让子程序进行反悔。那么，我们每次增广的时候，就要建造一个反向边满足 $c(v,u)=f(u,v)$ ，即<strong>反向边的容量是正向边的流量</strong>。我无法解释为什么，反正它确实对了。</p><p>对于建反向边的技巧，邻接矩阵就是 $table[x,y]=table[y,x]$ 。而链式前向星更常用，我们也不需要在增广时才加入反向边，我们可以预处理出反向边，而在用的时候直接将 $id\operatorname{xor}1$ 即可。这个不必太多解释。但是，初始值需要有 <code>Total=-1</code> 或者 <code>Total=1</code> ，如果边从 $1$ 开始，则会错位。</p><h3 id="Edmonds-Karp-动能算法"><a href="#Edmonds-Karp-动能算法" class="headerlink" title="Edmonds-Karp 动能算法"></a>Edmonds-Karp 动能算法</h3><p>圈内人称 EK 算法。</p><p>算法只有一句话，用 bfs 找增广路，然后对其进行增广即可。</p><ul><li>找：从源点开始 bfs ，直到碰到汇点，然后进行增广（每一条路），注意流量合法。</li><li>增广：重走找到的增广路，然后减去这条路能够达到的最大流量，然后把答案加上最小流量即可。</li></ul><p>时间复杂度 $\mathcal O(nm^2)$ ，不太效率。但是好想和好记。</p><details>    <summary>EK</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">201</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">5001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from,to,cap,flow;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> c,<span class="type">int</span> f):<span class="built_in">from</span>(u),<span class="built_in">to</span>(v),<span class="built_in">cap</span>(c),<span class="built_in">flow</span>(f)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> EdmondsKarp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Total;</span><br><span class="line">    vector&lt;Edge&gt;Edges;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;G[MAXN];</span><br><span class="line">    <span class="type">int</span> fl[MAXN],id[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) G[i].<span class="built_in">clear</span>();</span><br><span class="line">        Edges.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(u,v,c,<span class="number">0</span>));</span><br><span class="line">        Edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(v,u,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        Total=Edges.<span class="built_in">size</span>();</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(Total<span class="number">-2</span>);</span><br><span class="line">        G[v].<span class="built_in">push_back</span>(Total<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">maxFlow</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll flow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(fl,<span class="number">0</span>,<span class="built_in">sizeof</span>(fl));</span><br><span class="line">            queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">            Q.<span class="built_in">push</span>(s);</span><br><span class="line">            fl[s]=INF;</span><br><span class="line">            <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G[u].<span class="built_in">size</span>();++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    Edge&amp; e=Edges[G[u][i]];</span><br><span class="line">                    <span class="keyword">if</span>(!fl[e.to]&amp;&amp;e.cap&gt;e.flow)</span><br><span class="line">                    &#123;</span><br><span class="line">                        id[e.to]=G[u][i];</span><br><span class="line">                        fl[e.to]=<span class="built_in">min</span>(fl[u],e.cap-e.flow);</span><br><span class="line">                        Q.<span class="built_in">push</span>(e.to);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(fl[t]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!fl[t]) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> u=t;u!=s;u=Edges[id[u]].from)</span><br><span class="line">            &#123;</span><br><span class="line">                Edges[id[u]].flow+=fl[t];</span><br><span class="line">                Edges[id[u]^<span class="number">1</span>].flow-=fl[t];</span><br><span class="line">            &#125;</span><br><span class="line">            flow+=fl[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> EdmondsKarp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;ek.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;ek.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,S,T);</span><br><span class="line">    EdmondsKarp::<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,c;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,c);</span><br><span class="line">        EdmondsKarp::<span class="built_in">addEdge</span>(u,v,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,EdmondsKarp::<span class="built_in">maxFlow</span>(S,T));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5 4 3</span></span><br><span class="line"><span class="comment">4 2 30</span></span><br><span class="line"><span class="comment">4 3 20</span></span><br><span class="line"><span class="comment">2 3 20</span></span><br><span class="line"><span class="comment">2 1 30</span></span><br><span class="line"><span class="comment">1 3 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h3><p>在学习完 EK 之后，我才真正开始理解 Dinic 的本质。</p><p>思路同 EK ，但是在增广之前，使用 bfs 进行分层（将图进行分层处理，建图的常见技巧之一），源点的层数满足 $dep[s]=0$ ，其他点的层数取决于其与源点的距离。</p><p>分层之后，有两个优化：</p><ol><li>同时进行多路增广，且在断层时（即找不到增广路的时候）直接中断增广，进行时间优化；</li><li>增广路一定最短。</li></ol><p>我们用 dfs 来找增广路。</p><p>对层数加 $1$ 的点进行增广（从而确保增广路最短，原理同最短路，因为同层的点只会经过一个）。</p><p>Dinic 的优化：</p><ol><li>多路增广：每找到一条增广路之后，从残余流量再次增广；从而在一次 dfs 中找出多条增广路，提高算法效率。</li><li>当前弧优化：可以推出（<del>或者直接背下</del>），一条边如果已经是一条增广路的边（被增广过），那么这条边不可能被增广第二次。所以，对所有边进行标记，不必要再走已经被增广过的边。</li></ol><p>在运用了上述两个优化之后，时间复杂度可以达到 $\mathcal O(n^2m)$ ，在稠密图上比 EK 更胜一筹。就和 SPFA 一样，这个上界一般而言很难到达，且在二分图最大匹配问题上，Dinic 算法的复杂度能达到 $\mathcal O(m\sqrt n)$ ，不过不在我今天讲的范围内，所以只是提一嘴。</p><hr><p>以下讲解不太明晰（个人意见），酌情观看。</p><hr><ul><li><p>每次多路增广： $u$  点通过一条边，向  $v$  输出流量以后，  $v$  会尝试到达汇点（到达汇点才真正增广），然后  $v$  返回实际增广量。这时，<strong>如果 u 还有没用完的供给，就继续尝试输出到其它边。</strong></p><p>但是要警惕绕远路、甚至绕回的情况，不加管制的话极易发生。怎么管？</p></li><li><p>源点<strong>顺着残量网络</strong>想要到达其它点，需要经过一些边对吧？<strong>按照经过的边数（即源点出发以后的距离）把图分层，即用 bfs 分层。</strong> 每次尝试给予时，<strong>只考虑给予自己下一层的点</strong>，就可以防止混乱。</p></li><li><p>综合上面两条。每回合也是从源点出发，<strong>先按照当前残量网络分一次层</strong>，随后多路增广，尽可能增加流量。增广过程中，会加入一些反向边，这些反向边逆着层次图，本回合并不会走。所以还需要进入下一回合。一直到 $ bfs $ 分层时搜不到汇点（即残量网络断了）为止。</p></li></ul><p>$Dinic$  首先  $bfs$  对网络进行分层，构成一张分层图。然后进行  $dfs$  寻找当前的最大流。直到  $bfs$  无法达到汇点，则整个算法停止。</p><h4 id="Dinic-的当前弧优化"><a href="#Dinic-的当前弧优化" class="headerlink" title="Dinic 的当前弧优化"></a>Dinic 的当前弧优化</h4><p>$dfs$  过程中我们会一直流直到把一条边流完再转到下一条边，如果一条边有容量但是却没有增广路，说明这条边的下一个点已经没有更多容量了，我们就可以把连接的这个点的高度标记为  $0$ ，下一次就不会再搜索到这个点了。</p><p>不过  $Dinic$  还是很慢，甚至比  $EK$  还慢，这时候我们就需要拯救  $Dinic$  的当前弧优化。上面说到， $dfs$  过程中会一直流直到把一条边流完再转到下一条边，当搜索到一条边的时候说明这条边之前的所有边都已经没有增广路了，我们就可以直接将 $t$ 指向这条边，这样下一次就不会再次搜索已经没有流量的边了。</p><hr><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">1e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,s,t,u,v;</span><br><span class="line">ll r;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">    ll val;</span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,ll v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM];</span><br><span class="line"><span class="type">int</span> First[MAXN],Total=<span class="number">1</span>,t0[MAXN];</span><br><span class="line">ll f[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Que</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,r;</span><br><span class="line">    <span class="built_in">Que</span>(<span class="type">int</span> u=<span class="number">0</span>,<span class="type">int</span> r=<span class="number">0</span>):<span class="built_in">u</span>(u),<span class="built_in">r</span>(r)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAdd</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(edge)&#123;First[u],v,r&#125;,First[u]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">underBfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">    f[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=First[u];e;e=Edge[e].next)</span><br><span class="line">            <span class="keyword">if</span>(!f[Edge[e].to]&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                f[Edge[e].to]=f[u]+<span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(Edge[e].to);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[t]!=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">underDfs</span><span class="params">(<span class="type">int</span> x,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==t) <span class="keyword">return</span> r;</span><br><span class="line">    ll S=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=t0[x];e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        t0[x]=e;</span><br><span class="line">        <span class="keyword">if</span>(f[Edge[e].to]==f[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            ll k=<span class="built_in">underDfs</span>(Edge[e].to,<span class="built_in">underMin</span>(r,Edge[e].val));</span><br><span class="line">            <span class="keyword">if</span>(k)</span><br><span class="line">            &#123;</span><br><span class="line">                Edge[e].val-=k;</span><br><span class="line">                Edge[e^<span class="number">1</span>].val+=k;</span><br><span class="line">                r-=k,S+=k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> f[Edge[e].to]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(!r) <span class="keyword">return</span> S;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;maxinum-flow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;maxinum-flow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>,&amp;u,&amp;v,&amp;r);</span><br><span class="line">        <span class="built_in">underAdd</span>(u,v,r),<span class="built_in">underAdd</span>(v,u,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ll R=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">underBfs</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) t0[i]=First[i];</span><br><span class="line">        R+=<span class="built_in">underDfs</span>(s,INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,R);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5 4 3</span></span><br><span class="line"><span class="comment">4 2 30</span></span><br><span class="line"><span class="comment">4 3 20</span></span><br><span class="line"><span class="comment">2 3 20</span></span><br><span class="line"><span class="comment">2 1 30</span></span><br><span class="line"><span class="comment">1 3 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h4 id="Dinic-New-Version"><a href="#Dinic-New-Version" class="headerlink" title="Dinic New Version"></a>Dinic New Version</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e4</span>+<span class="number">1</span>,MAXM=<span class="number">1e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">namespace</span> Netflow</span><br><span class="line">&#123;</span><br><span class="line">    ll rest,fl[MAXN];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edges</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> next,to;</span><br><span class="line">        ll val;</span><br><span class="line">        <span class="built_in">Edges</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,ll v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">    &#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> Head[MAXN],Total=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,ll r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Edge[++Total]=<span class="built_in">Edges</span>(Head[u],v,r);Head[u]=Total;</span><br><span class="line">        Edge[++Total]=<span class="built_in">Edges</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">        <span class="built_in">memset</span>(fl,<span class="number">0</span>,<span class="built_in">sizeof</span>(fl));</span><br><span class="line">        fl[S]=<span class="number">1</span>;</span><br><span class="line">        Q.<span class="built_in">push</span>(S);</span><br><span class="line">        <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">                <span class="keyword">if</span>(!fl[Edge[e].to]&amp;&amp;Edge[e].val)</span><br><span class="line">                &#123;</span><br><span class="line">                    fl[Edge[e].to]=fl[u]+<span class="number">1</span>;</span><br><span class="line">                    Q.<span class="built_in">push</span>(Edge[e].to);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fl[T]!=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> newTail[MAXN];</span><br><span class="line">    <span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,ll r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==T) <span class="keyword">return</span> r;</span><br><span class="line">        ll s=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=newTail[x];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            newTail[x]=e;</span><br><span class="line">            <span class="keyword">if</span>(fl[Edge[e].to]==fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                ll k=<span class="built_in">dfs</span>(Edge[e].to,<span class="built_in">min</span>(r,Edge[e].val));</span><br><span class="line">                <span class="keyword">if</span>(k)</span><br><span class="line">                &#123;</span><br><span class="line">                    Edge[e].val-=k;</span><br><span class="line">                    Edge[e^<span class="number">1</span>].val+=k;</span><br><span class="line">                    r-=k,s+=k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> fl[Edge[e].to]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(!r) <span class="keyword">return</span> s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(N,M,S,T);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=M;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ll r;</span><br><span class="line">            <span class="built_in">read</span>(u,v,r);</span><br><span class="line">            <span class="built_in">addEdge</span>(u,v,r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll maxFlow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) newTail[i]=Head[i];</span><br><span class="line">            maxFlow+=<span class="built_in">dfs</span>(S,INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,maxFlow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Netflow;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dinic.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dinic.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    Netflow::<span class="built_in">init</span>();</span><br><span class="line">    Netflow::<span class="built_in">dinic</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5 4 3</span></span><br><span class="line"><span class="comment">4 2 30</span></span><br><span class="line"><span class="comment">4 3 20</span></span><br><span class="line"><span class="comment">2 3 20</span></span><br><span class="line"><span class="comment">2 1 30</span></span><br><span class="line"><span class="comment">1 3 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h3 id="MPM"><a href="#MPM" class="headerlink" title="MPM"></a>MPM</h3><p>有两种实现方法，一种是基于堆的优先队列，时间复杂度 $\mathcal O(n^3\log n)$ ；一种是使用 $bfs$ 的解法，时间复杂度 $\mathcal O(n^3)$ 。其中寻找增广路的时间用了 $\mathcal O(n^2)$ ，而在寻找的过程中，考虑顶点而非边的容量。</p><p>在分层网络 $L$ 中引入定义点的函数 $p[v]$ 表示点 $v$ 传入残量和传出残量的最小值，满足：</p><script type="math/tex; mode=display">p_{in}(v)=\sum_{(u,v)\in L}(c(u,v)-f(u,v))\\p_{out}(v)=\sum_{(v,u)\in L}(c(v,u)-f(v,u))\\p(v)=\min(p_{in}(v),p_{out}(v))    \nonumber</script><p>$r$ 为<strong>参考节点</strong>当且仅当 $p(r)=\min p(v)$ 。这是 MPM 特有的定义。</p><p>对于 MPM 的其他内容，读者可以自行查阅。也没什么太大必要学（不要刀我），更重要的是 Dinic。</p><h3 id="ISAP"><a href="#ISAP" class="headerlink" title="ISAP"></a>ISAP</h3><p>与 Dinic 不同的是，我们跑反图，即从 $t$ 向 $s$ 推进。增广的时候，选择比当前点层数少 $1$ 的点来增广。每一次也不需要重跑 $bfs$ 来重新分层，而是一边增广，一边重分层。</p><blockquote><p> 其实吧，SAP（Shortest Augument Path，最短增广路）就是 EK 算法。</p></blockquote><p>在结束对 $i$ 点增广之后，我们遍历残量网络中 $i$ 的出边，找出其层最小的出点 $j$ ，令 $d_i=d_j+1$ ，若 $i$ 无出边，则有 $d_i=n$ 。如果 $d_s\ge n$ 则图不存在增广路。</p><h4 id="ISAP-的当前弧优化-x-ISAP-的-GAP-优化"><a href="#ISAP-的当前弧优化-x-ISAP-的-GAP-优化" class="headerlink" title="ISAP 的当前弧优化 x ISAP 的 GAP 优化"></a>ISAP 的当前弧优化 x ISAP 的 GAP 优化</h4><p>当前弧优化不必多说。</p><p>记录层数为 $i$ 的点的数量，并在更新层数时更新 $num$ 数组，如果存在 $num_x=0$ ，则图断层，不存在增广路，将 $d_s=n$ ，终止算法。该优化称为 GAP 优化。</p><p>加上两个优化的 $ISAP$ 基本上可以吊打除了 $HLPP$ 以外的所有算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">201</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">5001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">    ll val;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,ll v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Cur[MAXN],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Dep[MAXN],Num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dep,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Dep));</span><br><span class="line">    <span class="built_in">memset</span>(Num,<span class="number">0</span>,<span class="built_in">sizeof</span>(Num));</span><br><span class="line">    Dep[T]=<span class="number">0</span>;Num[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Dep[v]!=<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            Q.<span class="built_in">push</span>(v);</span><br><span class="line">            Dep[v]=Dep[u]+<span class="number">1</span>;</span><br><span class="line">            ++Num[Dep[v]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">ll MaxFlow;</span><br><span class="line"><span class="function">ll <span class="title">Dfs</span><span class="params">(<span class="type">int</span> u,ll inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==T)</span><br><span class="line">    &#123;</span><br><span class="line">        MaxFlow+=inf;</span><br><span class="line">        <span class="keyword">return</span> inf;</span><br><span class="line">    &#125;</span><br><span class="line">    ll flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[u];e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[u]=e;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Edge[e].val&amp;&amp;Dep[v]+<span class="number">1</span>==Dep[u])</span><br><span class="line">        &#123;</span><br><span class="line">            ll k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(k)</span><br><span class="line">            &#123;</span><br><span class="line">                Edge[e].val-=k;</span><br><span class="line">                Edge[e^<span class="number">1</span>].val+=k;</span><br><span class="line">                flow+=k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flow==inf) <span class="keyword">return</span> flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    --Num[Dep[u]];</span><br><span class="line">    <span class="keyword">if</span>(Num[Dep[u]]==<span class="number">0</span>) Dep[S]=N+<span class="number">1</span>;</span><br><span class="line">    ++Dep[u];</span><br><span class="line">    ++Num[Dep[u]];</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ISAP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MaxFlow=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Bfs</span>();</span><br><span class="line">    <span class="keyword">while</span>(Dep[S]&lt;N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(Cur,Head,<span class="built_in">sizeof</span>(Head));</span><br><span class="line">        <span class="built_in">Dfs</span>(S,INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MaxFlow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;isap.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;isap.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,S,T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll w;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">ISAP</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5 4 3</span></span><br><span class="line"><span class="comment">4 2 30</span></span><br><span class="line"><span class="comment">4 3 20</span></span><br><span class="line"><span class="comment">2 3 20</span></span><br><span class="line"><span class="comment">2 1 30</span></span><br><span class="line"><span class="comment">1 3 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h3 id="预流推进"><a href="#预流推进" class="headerlink" title="预流推进"></a>预流推进</h3><p>我们可以稍微回想一下网络流的形象化定义：</p><blockquote><p>可以把网络流看作水库出水，而<strong>源点</strong>则是水库，<strong>汇点</strong>就是你家。源点的“量”是无限的，中途的任何一个点不存储任意一点流量也不会产生任何一点流量，所以源点出发的所有流量必定流入汇点。</p></blockquote><p>那么，我们在处理网络流的时候，也可以看做不停从源点倒水，然后能流就流直到流完为止，最后看汇点有多少流量。听着就跟个大模拟一样。</p><p>这就是所谓<strong>预流推进</strong>的本质：</p><ul><li>在求解过程中忽略流守恒性，并每次对一个节点更新消息，以求解最大流。</li></ul><p>但是，如果真去模拟的话，你会发现最后的时间复杂度甚至没有过不了网络最大流模板题，更不要说预流推进的模板题了。这就要引出最大流的最后一个算法：</p><p><strong>最高标号预流推进算法</strong></p><p>$Highest\ Label\ Preflow\ Push$</p><h3 id="HLPP"><a href="#HLPP" class="headerlink" title="HLPP"></a>HLPP</h3><p>其实还有一个通用的预流推进算法（称为 Push-Relabel ），但考虑在预流推进这个东西本来就冷门，我也不想学了。</p><blockquote><p>网络流，网络流，学到秃头。</p></blockquote><p>引出一些定义：</p><h4 id="流函数"><a href="#流函数" class="headerlink" title="流函数"></a>流函数</h4><p>同样是 $f$ 函数，但是不一定保持流守恒性；在预流推进里，我们允许入流大于出流。并将超过的那部分称为 $u(u\in V-\{S,T\})$ 结点的<strong>超额流</strong>，记作 $e(u)$ ，满足：</p><script type="math/tex; mode=display">e(u)=\sum_{(x,u)\in E}f(x,u)-\sum_{(u,y)\in E}f(u,y)    \nonumber</script><p>若 $e(u)&gt;0$ ，则称为 $u$ <strong>溢出</strong>，当然，溢出结点不会包括源点和汇点。</p><h4 id="高度函数"><a href="#高度函数" class="headerlink" title="高度函数"></a>高度函数</h4><p>预流推进维护每个结点的高度 $h(u)$ ，并规定溢出的结点 $u$ 如果要推送超额流，只能向满足 $h(u)&gt;h(v)$ 的 $v$ 结点推送；如果 $u$ 没有相邻的高度小于 $u$ 的结点，就修改 $u$ 的高度，称为<strong>重贴标签</strong>。</p><p>实际上，预流推进维护一个映射 $h:V\to \mathbf N$ ：</p><ul><li>$h(s)=|V|,h(t)=0$ ；</li><li>$\forall (u,v)\in E,h(u)\le h(v)+1$ 。</li></ul><p>则 $h$ 函数是残量网络 $G_f=(V_f,E_f)$ 的高度函数。有性质：</p><blockquote><p>设 $G_f$ 中的高度函数为 $h$ ，则如果有 $\forall u,v\in V,h(u)&gt;h(v)+1$ ，则 $(u,v)$ 不是 $G_f$ 的边。</p></blockquote><p>预流推进只会在满足 $h(u)=h(v)+1$ 的边执行推送。</p><h4 id="推送-Push"><a href="#推送-Push" class="headerlink" title="推送(Push)"></a>推送(Push)</h4><p>在 $u$ 溢出时，且存在 $v$ 满足 $(u,v)\in E_f,c(u,v)-f(u,v)&gt;0,h(u)=h(v)+1$ 时执行。</p><p>将 $u$ 的超额流从 $u$ 推送到 $v$ 去，只考虑超额流和 $c(u,v)-f(u,v)$ 的最小值，无需考虑 $v$ 的溢出情况。</p><p>如果 $(u,v)$ 在推送完之后满流，则将 $(u,v)$ 从残量网络中删除。</p><h4 id="重贴标签-Relabel"><a href="#重贴标签-Relabel" class="headerlink" title="重贴标签(Relabel)"></a>重贴标签(Relabel)</h4><p>在 $u$ 溢出时，且任意 $v$ 满足 $\forall (u,v)\in E_f,h(u)\le h(v)$ 时执行。</p><p>执行时，将 $h(u)$ 更新为 $\min_{(u,v)\in E_f}h(v)+1$ 即可。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化流函数，超额流函数和高度函数：</p><script type="math/tex; mode=display">\begin{align}&\forall (u,v)\in E,f(u,v)=\begin{cases}c(u,v)&,u=s    \nonumber\\0&,u\ne s\end{cases}    \nonumber\\&\forall u\in V,h(u)=\begin{cases}|V|&,u=s    \nonumber\\0&,u\ne s\end{cases}\\&\forall u\in V,e(u)=\sum_{(x,u)\in E}f(x,u)-\sum_{(u,y)\in E}f(u,y)    \nonumber\end{align}</script><p>这样的初始化使 $(s,u)\in E$ 都可以满流，并使 $h(s)$ 抬高，满足 $(s,u)\notin E_f$ 。</p><p>因为 $h(s)&gt;h(v)$ ，且 $(s,v)$ 满流，则 $(s,v)$ 没有必要留在残量网络中；</p><p>上述操作还将 $e(s)$ 初始化为 $\sum_{(s,v)\in E}f(s,v)$ 的相反数。</p><h4 id="HLPP-的实质"><a href="#HLPP-的实质" class="headerlink" title="HLPP 的实质"></a>HLPP 的实质</h4><p>有一个不为人知，但众所皆知的网络流算法——$\text{PP}$ 算法，是唯一一个会在模板题上超时的算法。它就是<strong>推进</strong>算法，用一个队列储存待维护的点（起始为源点），然后对于每一个当前点，把它有的流量尽可能地推往与之相连的点，然后将相连的点也加入队列。</p><p>但是，如果存在两个点可以互相推送，则会死循环。这也是为什么 $\text{PP}$ 是一个不成功的算法。所以才会出现 $\text{HLPP}$ ，类似于 $\text{Dinic}$ 构建一个高度函数 $h_i$ 。</p><p>著名<del>毒瘤</del>科学家 $\text{Tarjan}$ 和他的同事 $\text{Goldberg}$ 在 $1986$ 年提出了最高标号预留推进算法，将 $\text{PP}$ 中的队列替换为<strong>优先队列</strong>，每一次都流高度最高的，可以理解为先将高处的点的水移到低处，那么给低处节点推流时可以顺便带走。后来，另外两名科学家 $\text{Cheriyan}$ 和 $\text{Maheshwari}$ 证明了 $\text{HLPP}$ 的复杂度：</p><p>$\mathcal O(n^2\sqrt m)$ 。</p><p>每一次扫描整个图，只要存在结点 $u$ 能够执行 <code>push</code> 或 <code>relabel</code> 操作，就执行。下图是暴力推进的示意图：颜色深度代表结点高度，绿色边代表满足 $h_u=h_v+1$ 的边 $(u,v)$ 。</p><p><img src="https://oi-wiki.org/graph/flow/images/2149.gif" alt="img"></p><p>结果：</p><p><img src="https://oi-wiki.org/graph/flow/images/2150.png" alt="img"></p><blockquote><p>图片来自 $\text{OI-Wiki}$ 。</p></blockquote><hr><h4 id="HLPP-的实现及优化"><a href="#HLPP-的实现及优化" class="headerlink" title="HLPP 的实现及优化"></a>HLPP 的实现及优化</h4><p>$\text{HLPP}$ 的算法过程包括：</p><ol><li>初始化（基于预流推进）；</li><li>选出溢出结点中高度最高的结点 $u$ ，推送 $u$ ；</li><li>如果 $u$ 仍然溢出，重贴标签 $u$ ，并执行步骤 $2$ ；</li><li>没有溢出，算法结束。</li></ol><p>所涉及的三个操作上文都有讲过，读者请自行查阅。</p><p>$\text{HLPP}$ 的复杂度是较稳定的 $\mathcal O(n^2\sqrt m)$ ，卡得比较紧，且常数极大。在随机数据上甚至可能连 $\text{Dinic}$ 都跑不过，所以需要许许多多的优化。</p><h5 id="BFS-优化"><a href="#BFS-优化" class="headerlink" title="BFS 优化"></a>BFS 优化</h5><p>优化初始化高度，将 $h_u$ 赋为 $u$ 到 $T$ 的最短距离，使 $h_S=|V|$ 。并在使用 $\text{BFS}$ 时检查图的连通性，排除无解的情况。</p><h5 id="GAP-优化"><a href="#GAP-优化" class="headerlink" title="GAP 优化"></a>GAP 优化</h5><p>如果在某一刻存在 $h_u=T$ 的结点个数为 $0$ ，则对于 $h_u&gt;T$ 的结点就永远无法推送超额流到 $T$ ，只能流回 $S$ 。所以直接改变高度到至少 $|V|+1$ ，以尽快推送回源点，减少重贴标签操作的复杂度。</p><h5 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h5><p><a href="https://www.luogu.com.cn/problem/P4722">预流推进</a></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e3</span>+<span class="number">2e2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">1e5</span>+<span class="number">2e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Net</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Net</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):</span><br><span class="line">        <span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Cur[MAXN],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Net</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Net</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Ht[MAXN+<span class="number">1</span>],Ex[MAXN+<span class="number">1</span>],Gap[MAXN+<span class="number">1</span>];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt;B[MAXN];</span><br><span class="line"><span class="type">int</span> Level=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> Init=x==S;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x];e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> &amp;v=Edge[e].to,&amp;w=Edge[e].val;</span><br><span class="line">        <span class="keyword">if</span>(!w||(!Init)&amp;&amp;Ht[x]!=Ht[v]+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> k=Init?w:<span class="built_in">min</span>(w,Ex[x]);</span><br><span class="line">        <span class="keyword">if</span>(v!=S&amp;&amp;v!=T&amp;&amp;!Ex[v])</span><br><span class="line">            B[Ht[v]].<span class="built_in">push</span>(v),<span class="built_in">checkMax</span>(Level,Ht[v]);</span><br><span class="line">        Ex[x]-=k,Ex[v]+=k,Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k;</span><br><span class="line">        <span class="keyword">if</span>(!Ex[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Relabel</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ht[x]=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x];e;e=Edge[e].next)</span><br><span class="line">        <span class="keyword">if</span>(Edge[e].val) <span class="built_in">checkMin</span>(Ht[x],Ht[Edge[e].to]);</span><br><span class="line">    <span class="keyword">if</span>(++Ht[x]&lt;N)</span><br><span class="line">    &#123;</span><br><span class="line">        B[Ht[x]].<span class="built_in">push</span>(x);</span><br><span class="line">        <span class="built_in">checkMax</span>(Level,Ht[x]);</span><br><span class="line">        ++Gap[Ht[x]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Ht,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(Ht));</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(T),Ht[T]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> &amp;v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Edge[e^<span class="number">1</span>].val&amp;&amp;Ht[v]&gt;Ht[u]+<span class="number">1</span>)</span><br><span class="line">                Ht[v]=Ht[u]+<span class="number">1</span>,Q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Ht[S]!=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Select</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(B[Level].<span class="built_in">empty</span>()&amp;&amp;Level&gt;=<span class="number">0</span>) --Level;</span><br><span class="line">    <span class="keyword">return</span> Level==<span class="number">-1</span>?<span class="number">0</span>:B[Level].<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Hlpp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Bfs</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(Gap,<span class="number">0</span>,<span class="built_in">sizeof</span>(Gap));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">if</span>(Ht[i]!=INF) ++Gap[Ht[i]];</span><br><span class="line">    Ht[S]=N;</span><br><span class="line">    <span class="built_in">Push</span>(S);</span><br><span class="line">    <span class="type">int</span> u;</span><br><span class="line">    <span class="keyword">while</span>((u=<span class="built_in">Select</span>()))</span><br><span class="line">    &#123;</span><br><span class="line">        B[Level].<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Push</span>(u))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!--Gap[Ht[u]])</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">                    <span class="keyword">if</span>(i!=S&amp;&amp;i!=T&amp;&amp;Ht[i]&gt;Ht[u]&amp;&amp;Ht[i]&lt;N+<span class="number">1</span>)</span><br><span class="line">                        Ht[i]=N+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">Relabel</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Ex[T];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;Hlpp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;Hlpp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,S,T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">Hlpp</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 16 1 2</span></span><br><span class="line"><span class="comment">1 3 2</span></span><br><span class="line"><span class="comment">1 4 2</span></span><br><span class="line"><span class="comment">5 2 2</span></span><br><span class="line"><span class="comment">6 2 2</span></span><br><span class="line"><span class="comment">3 5 1</span></span><br><span class="line"><span class="comment">3 6 1</span></span><br><span class="line"><span class="comment">4 5 1</span></span><br><span class="line"><span class="comment">4 6 1</span></span><br><span class="line"><span class="comment">1 7 2147483647</span></span><br><span class="line"><span class="comment">9 2 2147483647</span></span><br><span class="line"><span class="comment">7 8 2147483647</span></span><br><span class="line"><span class="comment">10 9 2147483647</span></span><br><span class="line"><span class="comment">8 5 2</span></span><br><span class="line"><span class="comment">8 6 2</span></span><br><span class="line"><span class="comment">3 10 2</span></span><br><span class="line"><span class="comment">4 10 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="多源汇最大流"><a href="#多源汇最大流" class="headerlink" title="多源汇最大流"></a>多源汇最大流</h3><p>很简单，建立一个超级源点 $S$ 链接所有的源点 $s’$ ，容量为 $inf$ ；建立一个超级汇点链接所有的汇点 $t’$ ，容量为 $inf$ 。然后处理增广路（跑模板）。</p><p>可能是因为太简单了吧，我没有找到模板题，就和普通的网络最大流少了一步而已。</p><hr><h2 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h2><h3 id="割"><a href="#割" class="headerlink" title="割"></a>割</h3><p>割是一种划分，将 $V$ 划分成两个集合 $S,T$ 满足 $S\cup T=V,S\cap T=\varnothing$ 。且有 $s\in S,t\in T$ 。</p><hr><h3 id="割的容量-x-最小割"><a href="#割的容量-x-最小割" class="headerlink" title="割的容量 x 最小割"></a>割的容量 x 最小割</h3><p>对于割 $(S,T)$ 有容量 $c(S,T)$ 表示 $c(S,T)=\sum_{u\in S,v\in T}c(u,v)$ ，即从 $S$ 到 $T$ 的边的容量之和。且有 $c(s,t)=c(S,T)$ 。</p><p>而最小割就是求一个集合划分使 $c(S,T)$ 最小。</p><hr><h3 id="最大流最小割定理"><a href="#最大流最小割定理" class="headerlink" title="最大流最小割定理"></a>最大流最小割定理</h3><p>$f(s,t)_{\max}=c(s,t)_{\min}$</p><p>对于任意一个可行流 $f(s,t)$ 的割 $(S,T)$ ，则有：</p><script type="math/tex; mode=display">f(s,t)=S出边的总流量-S入边的总流量\leq S出边的总流量=c(s,t)</script><p>那么，令 $f$ 是最大流，则其残余网络中不会存在 $(s,t)$ 的增广路，那么 $S$ 的出边是满流，入边是零流，则：</p><script type="math/tex; mode=display">f(s,t)=S出边的总流量-S入边的总流量=S出边的总流量=c(s,t)</script><p>而此时的 $f(s,t)$ 实际上是流函数 $f$ 的 $f(s,t)_{\max}$ 。</p><hr><h3 id="求割边数量"><a href="#求割边数量" class="headerlink" title="求割边数量"></a>求割边数量</h3><p>即在满足最小割的前提下，最小化割边的数量（即删除的边的数量）。首先跑最大流求出最小割，然后将没有满流的边容量改成 $inf$ ，并将满流了的边的容量改为 $1$ ，重新跑一遍最小割，求出来的即是最小割边数。如果没有最小割，则直接将所有边的容量都设为 $1$ 并跑最小割。</p><hr><h3 id="全局最小割-x-Stoer-Wagner-算法"><a href="#全局最小割-x-Stoer-Wagner-算法" class="headerlink" title="全局最小割 x Stoer-Wagner 算法"></a>全局最小割 x Stoer-Wagner 算法</h3><p>你可以把它理解为无源汇最小割，其最小割的重定义为：</p><blockquote><p>去掉其中一些边能使一张网络不再连通的边集称为该网络的割。</p><p>其最小割定义为方案中边集和最小的一种方案。</p></blockquote><p>使用 $Stoer-Wagner$ 算法来解决这个问题。（因为无源汇，所以你暴力建源汇点跑 $N^2$ 次即使是 $ISAP$ 也是行不通的）</p><p>时间复杂度 $\mathcal O(|V||E|+|V|^2\log |V|)$ 近似于 $\mathcal O(V^3)$ 。</p><p>存在一个结论：</p><blockquote><p>图中有任意两点 $u,v$ ，存在 $G$ 的任意一个割 $C$ ，要么 $u$ 和 $v$ 连通，在同意连通块；要么 $C$ 是一个 $u-v$ 割。</p></blockquote><p>Stoer-Wagner 算法在 1995 年由 Mechthild Stoer 与 Frank Wagner 提出，是一种通过<strong>递归</strong>的方式来解决<strong>无向正权图</strong>上的全局最小割问题的算法。</p><p>流程：</p><ol><li>任意指定两点 $s,t$ 作为源汇点并求出 $C(s-t)$ ，记作 $cut\ of\ phase$ ，更新答案；</li><li><strong>合并</strong>点 $s,t$ ，如果 $|V|&gt;1$ ，重复操作一；</li><li>答案保证 $ans=\min\{cut\ of\ phase\}$ 。</li></ol><p>合并：</p><blockquote><p>删除边 $c(s,t)$ ，并对于 $G/\{s,t\}$ 中的 $k$ ，删除 $c(t,k)$ ，并将边权 $val(t,k)$ 加到 $val(s,k)$ 中。</p></blockquote><h4 id="算法的正确性"><a href="#算法的正确性" class="headerlink" title="算法的正确性"></a>算法的正确性</h4><p>如果 $s,t$ 在同一连通块中，则 $(k,s)\in C_{\min}$ 与 $(k,t)\in C_{\min}$ 互为充分必要条件。否则，因为 $s,t$ 连通， $k,t$ 连通，导致 $s,k$ 连通，此时 $C=C_{\min}/s$ ，将比 $C_{\min}$ 更优，反之亦然。所以 $s,t$ 可以看做同一点。</p><p>操作一考虑了 $s,t$ 不连通的情况，而 $s,t$ 解决了剩下的情况。根据操作的递归性，操作执行 $|V|-1$ 次后必然结束。</p><h4 id="求取-S-T-最小割"><a href="#求取-S-T-最小割" class="headerlink" title="求取 S-T 最小割"></a>求取 S-T 最小割</h4><p>如果我都写出来了，说明就不能跑最大流啊。</p><p>当前状态下的图表示为 $G’=(V’,E’)$ ，构造一个集合记为 $A$ ，初始有 $A=\varnothing$ 。</p><p>定义权值函数为 $w(A,i)=\sum_{j\in A}val(i,j)$ ，特殊地， $val(i,j)=0,(i,j)\notin E’$ 。</p><p>遍历 $V’$ 中的所有点，若有 $i\notin A$ ，将 $w(A,i)$ 中最大的节点加入 $A$ 直到 $|A|=|V’|$ 。</p><p>所有点加入 $A$ 的顺序必然是固定的，有 $ord(i)$ 表示第 $i$ 个加入 $A$ 的点，有 $t=ord(|V’|)$ ； $pos(v)$ 表示 $v$ 被加入 $A$ 后 $|A|$ 的大小，即 $v$ 被加入的顺序。</p><p>对于任意点 $s$ ，则 $c(s-t)=w(t)$ 。</p><p><a href="https://oi-wiki.org/graph/stoer-wagner/#_6">正确性证明</a></p><p>似乎这个算法的绝大部分代码使用的都是邻接矩阵。（至少我没有发现链式前向星和邻接表的写法）似乎可以联系 Prim 算法来理解，不过 Prim 我也没学过，所以不考虑。</p><p>写法参考 OI-Wiki 。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">601</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fa[MAXN],Size[MAXN],Edge[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==Fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> Fa[x]=<span class="built_in">Find</span>(Fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Dist[MAXN],Vis[MAXN],Bin[MAXN];</span><br><span class="line"><span class="comment">//Bin记录该点是否被合并过</span></span><br><span class="line"><span class="comment">//Vis记录本次查询中是否已经被搜到过</span></span><br><span class="line"><span class="comment">//Dist记录当前最大权值（具体什么权值我也不太清楚）</span></span><br><span class="line"><span class="type">int</span> N,M;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">contract</span><span class="params">(<span class="type">int</span> &amp;s,<span class="type">int</span> &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dist,<span class="number">0</span>,<span class="built_in">sizeof</span>(Dist));</span><br><span class="line">    <span class="built_in">memset</span>(Vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(Vis));</span><br><span class="line">    <span class="type">int</span> k,minCut,maxCut;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        k=maxCut=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">            <span class="keyword">if</span>(!Bin[j]&amp;&amp;!Vis[j]&amp;&amp;Dist[j]&gt;maxCut)</span><br><span class="line">            &#123;</span><br><span class="line">                k=j;</span><br><span class="line">                maxCut=Dist[j];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">-1</span>) <span class="keyword">return</span> minCut;</span><br><span class="line">        s=t,t=k;</span><br><span class="line">        minCut=maxCut;</span><br><span class="line">        Vis[k]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">            <span class="keyword">if</span>(!Bin[j]&amp;&amp;!Vis[j]) Dist[j]+=Edge[k][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCut;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Stoer_Wagner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,minCut,s,t,res;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>,minCut=INF;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res=<span class="built_in">contract</span>(s,t);</span><br><span class="line">        Bin[t]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(minCut&gt;res) minCut=res;</span><br><span class="line">        <span class="keyword">if</span>(minCut==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">            <span class="keyword">if</span>(!Bin[j]) Edge[s][j]=(Edge[j][s]+=Edge[j][t]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCut;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;sto.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;sto.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M);</span><br><span class="line">    <span class="keyword">if</span>(M&lt;N<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) Fa[i]=i,Size[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        <span class="type">int</span> uf=<span class="built_in">Find</span>(u),vf=<span class="built_in">Find</span>(v);</span><br><span class="line">        <span class="keyword">if</span>(uf!=vf)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Size[uf]&gt;Size[vf]) <span class="built_in">swap</span>(uf,vf);</span><br><span class="line">            Fa[uf]=vf,Size[vf]+=Size[uf];</span><br><span class="line">        &#125;</span><br><span class="line">        Edge[u][v]+=w,Edge[v][u]+=w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> rf=<span class="built_in">Find</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(Size[rf]!=N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">Stoer_Wagner</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 6</span></span><br><span class="line"><span class="comment">1 2 5</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment">2 4 1</span></span><br><span class="line"><span class="comment">3 4 2</span></span><br><span class="line"><span class="comment">2 3 1</span></span><br><span class="line"><span class="comment">1 4 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="最大权闭合图"><a href="#最大权闭合图" class="headerlink" title="最大权闭合图"></a>最大权闭合图</h3><p>在一个网络（图） $G=(V,E)$ 中的一个子图满足该子图中的任意点的任意一条边都不会引申到该图之外的任意节点。而最大权闭合子图就是满足上述条件，点权和最大的子图。</p><p>一般而言，这种定义都针对于有向图，如果是无向图，那么这张图唯一一个闭合图就是它本身，否则该图不连通。</p><p>那么如何求解最大权闭合图。</p><p>当然是使用网络流。（否则也不会写在这儿）</p><p>首先给出结论和做法：</p><ol><li>建立一个超级源点 $S$ 和一个超级汇点 $T$ ；</li><li>对于 $\forall x\in V,pt[x]\ge 0$ ，链接 $(S,x,pt[x])$ ；</li><li>对于 $\forall x\in V,pt[x]&lt;0$ ，链接 $(x,T,-pt[x])$ 。</li><li>对于 $\forall c(u,v)\in E$ ，链接 $(u,v,inf)$ 。</li><li>最大权闭合图的权值等于正权点点权和减去从 $S$ 到 $T$ 的最大流。</li></ol><p>从 $S$ 而出的是最大可获得权值（正权值和），向 $T$ 而出的是最大损失权值（负权值和）。</p><p>尽量多从 $S$ 获得的同时，避免向 $T$ 丢失。</p><blockquote><p>如果选定一个点进入最大权闭合图，则这个点的所有后继点都必须被选择。</p></blockquote><p>否则有悖定义。</p><p>对于我们建出来的这个图，得到的最小割必定是<strong>简单割</strong>，（即划分出来的其中一个集合有且仅有源点或者汇点）否则不是该图的最小割。</p><p>那么，从 $S$ 流出的流量则是得到的，流向 $T$ 的则是损失的。所以 $flow[S]-flow[T]$ 即是最大权。</p><p>所谓 $flow[S]$ ，就是 $\sum\limits_{x}^{x\in V} pt[x],pt[x]\ge 0$ 。</p><p>但如何求出 $flow[T]$ ，就是关键所在。因为对于一个点 $x$ 的后继损失不会超过该点的权值。那不妨我一开始就把所有的正权点都给选了（满足从 $S$ 流出的最多），让他们往后代流，大不了被负权子孙点损失完，而那些没有被损失完的，就是我们统计下来的结果。</p><p>最后得出结论：$flow[T]$ 就是从 $S$ 到 $T$ 的最大流（最小割）。</p><p>值得注意的一点：<strong>最大权闭合图与最小割一一对应</strong>。</p><p>令 $sum_+$ 为正点权和，$choose_+$ 为不选的正点权和，$choose_-$ 为选择的负点权和，则有：</p><p>$c(S,T)=choose_++|choose_-|$</p><p>$val_{max}=sum_+-(choose_++|choose_-|)=sum_+-c(S,T)$ </p><p>$sum_+$ 是定值，所以最大权闭合子图和最小割一一对应，而最小割又与最大流一一对应。所以上文的结论也就显而易见了。</p><hr><h3 id="最大密度子图"><a href="#最大密度子图" class="headerlink" title="最大密度子图"></a>最大密度子图</h3><p>对于一个图 $G=(V,E)$ ，选出其一个子边集 $E’\subseteq E$ ，在求出一个子点集 $V’\subseteq V,\forall u,v\in V’,(u,v)\in E’$ ，即 $E’$ 集合中所有的边的两端点都必须在 $V’$ 中。对于一个子图 $G’=(V’,E’)$ 满足 $\frac{\mid E’|}{|V’|}$ 最大，则 $G’$ 是 $G$ 的最大密度子图。</p><p>这让人不禁想到了<a href="https://violeteternal.github.io/Eternity/OI/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/fractional-programming/">01 规划</a> ，所以也就采用二分求解。但是判断函数需要联系到最小割去。</p><p>再次回忆一次 $01$ 规划的思路。</p><p>令 $\frac{|E’|}{|V’|}=g$ ，则有 $|E’|=g|V’|$ ，那么如果要让该式子最大，则有 $\frac{|E’|}{|V’|}&gt;g$ ，同理就有 $|E’|-g|V’|&gt;0$ ，那么问题就可以转化为求出 $|E’|-g|V’|$ 的最大值，或者求 $g|V’|-|E’|$ 的最小值。</p><p>有一种方法是把求最大密度子图转化为最大权闭合图来做。但这样时间复杂度较高。</p><p>点数： $|V|+|E|$ ，边数 $3|E|+|V|$ 。</p><p>从最大密度子图的定义来看，它是满足了闭合图的性质的。而由边定点，对于边 $e=c(u,v)$ ，我们可以看做有一个点 $e$ ，有边 $u$ 和边 $v$ 与其相连。</p><p>建图：</p><ol><li>从超级源点 $S$ 到所有边点 $e$ 链接一条容量为 $1$ 的边；</li><li>从已知点 $e_a$ 到已知点 $e_b$ 链接一条容量为 $inf$ 的边；</li><li>从所有边点 $e$ 到超级汇点 $T$ 链接一条容量为 $g$ 的边。（$g$ 是当前二分抉择）</li></ol><p>然后跑最小割以求最大权闭合子图，求出的最大权就是 $|E’|-g|V’|$ 的最大值。</p><h4 id="性质法"><a href="#性质法" class="headerlink" title="性质法"></a>性质法</h4><p>已知算式 $|E’|-g|V’|$ 与 $g|V’|-|E’|$ 一一对应，且当 $|E’|-g|V’|$ 最大时，$g|V’|-|E’|$ 正好取得最小值，我们可以从这一方面入手。</p><blockquote><p>选择的点集为 $|V’|$ 的话，则点集内所有的边都被选择的情况，是对于当前点集最优的情况。</p></blockquote><p>该性质显然，无需证明。</p><p>我们定义一个反点集 $\overline{V’}=V-V’$ ，即所有没有选择的点的集合，并定义一个函数 $deg[v]$ 表示 $v$ 的度数。（即有多少条边以 $v$ 为端点）</p><p>有：</p><script type="math/tex; mode=display">g|V'|-|E'|=\sum_{v\in V'}g-(\frac{\sum_{v\in V'}dep[v]-C(V',\overline{V'})}{2})</script><p>设集合内部所有点的度数之和是 $sum$ ，那么，处于集合内部的边一定被计算了 $2$ 次，因为该边的两个端点均在集合内。而处于集合 $V’$ 与集合 $\overline{V’}$ 之间的割边只被计算了一次，而这样的割边的数量就是该割的容量 $C(V’,\overline{V’})$ ，因为原图的所有边的容量在流网络中都设置成了 $1$ 。</p><p>变换形式，得到一个较好处理的式子：</p><script type="math/tex; mode=display">\text{原式}=\frac{1}{2}(\sum_{v\in V'}(2g-dep[v])+C(V',\overline{V'}))</script><p>在每一次抉择时， $2g-dep[v]$ 的值是相等的，所以影响整个式子的唯一点就是这张图的最小割。</p><p>再说说怎么建图：（讲的不是太明白）</p><ol><li>从每一个点往超级汇点 $T$ 链接一条容量为 $2g-deg[v]+Q$ 的边；</li><li>从超级源点 $S$ 向每一个点链接一条容量为 $Q$ 的边。</li><li>取出原图，将所有原边的容量修改为 $1$ 。</li></ol><p>这里的 $Q$ 是一个常数，一个偏移量，一个满足 $2g-dep[v]$ 是正数的任意值，一般可以取到 $|E|$ ，即原图的边数。（$Q$ 存在的原因是容量不能为负）</p><p>我们已知，割的容量 $C(S,T)$ 表达式可以有三种：</p><ol><li>$s\rightarrow \overline{V’}$</li><li>$V’\rightarrow t$</li><li>$V’\rightarrow \overline{V’}$</li></ol><p>其中 $V’=S-s$ 。</p><p>以 $c_{(u,v)}$ 的一个 $\{0,1\}$ 函数表示 $u,v$ 之间是否连接，则有</p><script type="math/tex; mode=display">C(S,T)=\sum_{v\in V'}Q+\sum_{u\in V'}(2g-dep[u]+Q)+\sum_{u\in V'}\sum_{v\in\overline{V'}}c_{(u,v)}</script><p>因为有：</p><blockquote><p>$dep[u]$ 表示的是以 $u$ 点为端点的边数；</p><p>而 $\sum_{v\in\overline{V’}}c_{(u,v)}$ 表示的是点 $u$ 到达集合 $V’$ 外部 $\overline{V’}$ 的边数；</p><p>相减得到点 $u$ 到达集合内部的边数 $\sum_{u\in V’}c_{(u,v)}$</p></blockquote><p>再次化简：</p><script type="math/tex; mode=display">\begin{align}C(S,T)&=\sum_{v\in V'}Q+\sum_{u\in V'}(Q+2g-dep[u]+\sum_{v\in V'}c_{(u,v)})    \nonumber&\\&=\sum_{v\in\overline{V'}}Q+\sum_{u\in V'}(Q+2g-\sum_{v\in V'}c_{(u,v)})    \nonumber&\\&=\sum_{v\in V'}Q+\sum_{v\in\overline{V'}}Q+\sum_{u\in V'}2g-\sum_{u\in V'}\sum_{v\in V'}c_{(u,v)}    \nonumber&\\&=nQ+2g|V'|-2|E'|    \nonumber&\end{align}</script><p>最后得到一个肥肠简单的式子：</p><script type="math/tex; mode=display">C(S,T)=nQ+2(g|V'|-|E'|)</script><p>显然地，$nQ$ 是针对全局的定值，而 $\min\{g|V’|-|E’|\}$ 就是整道题的答案，也就有：</p><script type="math/tex; mode=display">\min\{g|V'|-|E'|\}=\frac{1}{2}\min\{C(S,T)-nQ\}</script><p>总结全题：</p><p>点数：$|V|$ ，边数：$2|V|+|E|$ 。时间复杂度在于 $\mathcal O(\log (l,r)\times \mathcal O(maxFlow))$ ，取决于二分的值域以及跑最小割（最大流）的算法。</p><p>后来发现，二分的值域可以取 $[\frac{1}{n},m]$ ，不过取 $[0,m]$ 也不会有太大影响。</p><p><strong>需要注意的是：上述所有方法都是限于无权点无权边最大密度子图问题，如果有权点或者有权边则需另加讨论。</strong></p><p><a href="https://www.luogu.com.cn/problem/UVA1389">模板题指路</a></p><hr><h3 id="最小权点覆盖集"><a href="#最小权点覆盖集" class="headerlink" title="最小权点覆盖集"></a>最小权点覆盖集</h3><p>点覆盖集 $A$ 是一个集合，满足图上所有边的至少一个端点都在集合内，所有点覆盖集中，总点权值最小的集合就是<strong>最小权点覆盖集</strong>。</p><p>求解是一个 NP 完全问题。即没有多项式时间复杂度的做法，有且仅有枚举暴力的实现。但在一个二分图里，有一种特殊的最小权点覆盖集。</p><h3 id="最大权独立集"><a href="#最大权独立集" class="headerlink" title="最大权独立集"></a>最大权独立集</h3><p>对于一般的最大权独立集而言，指的是：</p><p>在一个图 $G$ 中选取一个点集 $A$ ，使 $A$ 中任意两点不相连，其中 $|A|$ 最大的集合称为 $G$ 的<strong>最大权独立集</strong>。</p><hr><h2 id="网络流最大二分匹配问题"><a href="#网络流最大二分匹配问题" class="headerlink" title="网络流最大二分匹配问题"></a>网络流最大二分匹配问题</h2><h3 id="二分图匹配"><a href="#二分图匹配" class="headerlink" title="二分图匹配"></a>二分图匹配</h3><p>另作讲解。</p><h3 id="二分图最大匹配（匈牙利算法）"><a href="#二分图最大匹配（匈牙利算法）" class="headerlink" title="二分图最大匹配（匈牙利算法）"></a>二分图最大匹配（匈牙利算法）</h3><p>之后的二分图再另做讲解。</p><h3 id="二分图最大匹配（网络流算法）"><a href="#二分图最大匹配（网络流算法）" class="headerlink" title="二分图最大匹配（网络流算法）"></a>二分图最大匹配（网络流算法）</h3><p>构造网络流模型：</p><ol><li>建立一个超级源点 $S$ 与 $n$ 中所有结点链接一条容量为 $1$ 的边，表示一个结点只能被用 $1$ 次；</li><li>建立一个超级汇点 $T$ 与 $m$ 中所有结点链接一条容量为 $1$ 的边，表示一个结点只能匹配 $1$ 次。</li><li>对于原图，链接 $n$ 中的 $u$ 与 $m$ 中的 $v$ ，容量为 $1$ 。</li></ol><p>求出该图的最大流即是该二分图的最大匹配。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXP=<span class="number">2001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,E,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">G</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">G</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXE&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXP],Cur[MAXP],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">G</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">G</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fl[MAXP];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Fl[S]=<span class="number">0</span>,Cur[S]=Head[S];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u],v;e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Fl[v]==<span class="number">-1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[v]=Fl[u]+<span class="number">1</span>;</span><br><span class="line">                Cur[v]=Head[v];</span><br><span class="line">                <span class="keyword">if</span>(v==T) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==T) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[x],v;e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[x]=e;</span><br><span class="line">        v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Fl[v]==Fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(!k) Fl[v]=<span class="number">-1</span>;</span><br><span class="line">            Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k,flow+=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(S,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;Dinic.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;Dinic.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,E);</span><br><span class="line">    S=<span class="number">0</span>,T=N+M+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=E;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,M+v,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">addEdge</span>(S,i,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) <span class="built_in">addEdge</span>(i+M,T,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">Dinic</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 2 7</span></span><br><span class="line"><span class="comment">3 1</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">4 2</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="网络流解决二分匹配"><a href="#网络流解决二分匹配" class="headerlink" title="网络流解决二分匹配"></a>网络流解决二分匹配</h3><p>以<a href="https://www.luogu.com.cn/problem/P2756">飞行员配对方案问题</a>为例，最重要的是建出网络模型，然后照板子跑就好了。建出一个 $S$ 源点和一个 $T$ 汇点，然后链接 $S$ 和所有外籍飞行员，链接 $T$ 和所有英国飞行员，然后将所有能够匹配的外籍飞行员和英国飞行员链接，容量皆为 $1$ 。最后检验一些建构出的网络的可行流和原问题的可行方案是否对应，如果是，说明建图成功，跑模板。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">101</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXN*MAXN];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total=<span class="number">1</span>,newTail[MAXN],Fl[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">0</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Fl[S]=<span class="number">1</span>;</span><br><span class="line">    Q.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">            <span class="keyword">if</span>(!Fl[Edge[e].to]&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[Edge[e].to]=Fl[u]+<span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(Edge[e].to);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Fl[T]!=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==T) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=newTail[x];e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        newTail[x]=e;</span><br><span class="line">        <span class="keyword">if</span>(Fl[Edge[e].to]==Fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(Edge[e].to,<span class="built_in">min</span>(inf-s,Edge[e].val));</span><br><span class="line">            <span class="keyword">if</span>(k)</span><br><span class="line">            &#123;</span><br><span class="line">                Edge[e].val-=k;</span><br><span class="line">                Edge[e^<span class="number">1</span>].val+=k;</span><br><span class="line">                s+=k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s&lt;inf) Fl[x]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> maxFlow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=N+<span class="number">1</span>;++i) newTail[i]=Head[i];</span><br><span class="line">        maxFlow+=<span class="built_in">Dfs</span>(S,INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(maxFlow==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;No Solution!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,maxFlow);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=Total;i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Edge[i].to!=S&amp;&amp;Edge[i^<span class="number">1</span>].to!=S)</span><br><span class="line">                <span class="keyword">if</span>(Edge[i].to!=T&amp;&amp;Edge[i^<span class="number">1</span>].to!=T)</span><br><span class="line">                    <span class="keyword">if</span>(Edge[i^<span class="number">1</span>].val!=<span class="number">0</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,Edge[i^<span class="number">1</span>].to,Edge[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dinic.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dinic.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(M,N);</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">    T=N+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">read</span>(u,v);</span><br><span class="line">    <span class="keyword">while</span>(u!=<span class="number">-1</span>&amp;&amp;v!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) <span class="built_in">addEdge</span>(S,i,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=M+<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">addEdge</span>(i,T,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Dinic</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 10</span></span><br><span class="line"><span class="comment">1 7</span></span><br><span class="line"><span class="comment">1 8</span></span><br><span class="line"><span class="comment">2 6</span></span><br><span class="line"><span class="comment">2 9</span></span><br><span class="line"><span class="comment">2 10</span></span><br><span class="line"><span class="comment">3 7</span></span><br><span class="line"><span class="comment">3 8</span></span><br><span class="line"><span class="comment">4 7</span></span><br><span class="line"><span class="comment">4 8</span></span><br><span class="line"><span class="comment">5 10</span></span><br><span class="line"><span class="comment">-1 -1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="最小割求解最小权点覆盖集"><a href="#最小割求解最小权点覆盖集" class="headerlink" title="最小割求解最小权点覆盖集"></a>最小割求解最小权点覆盖集</h3><p>有性质：</p><blockquote><p>在二分图中，有一个特殊的性质：当所有点权都是 $1$ 时，有最大匹配数等于最小权点覆盖集；最大权独立集等于点数减去最小权点覆盖集。</p></blockquote><p>在二分图中，最小权点覆盖集解决了这一类问题：</p><p>在二分图中，对于每条边，两个端点至少选一个，求所选取的点的最小权值和。</p><p>对应方法：</p><ol><li>二分图染色，使每一条边的端点颜色不同；</li><li>建立超级源点 $S$ 与所有颜色为 $a$ 的边链接一条容量为该点权值的边；</li><li>建立超级汇点 $T$ 与所有颜色为 $b$ 的边链接一条容量为该点权值的边。</li><li>对于二分图中原有的边，改为从 $u$ 到 $v$ 的容量为 $inf$ 的边。</li></ol><p>求取构造网络的最大流（最小割），结果则是最小点权和。 （这个结论我暂时还没有理解，但是挺好背，所以先背比较好）</p><h3 id="最小割求解最大点权独立集"><a href="#最小割求解最大点权独立集" class="headerlink" title="最小割求解最大点权独立集"></a>最小割求解最大点权独立集</h3><p>因为有：</p><blockquote><p>最大权独立集等于所有点的总权值减去最小权点覆盖。</p></blockquote><p>所以这两个问题其实是相通的，只是输出的答案略微不同罢了。</p><p><a href="https://www.luogu.com.cn/problem/P2774">最大点权独立集模板题</a>的<a href="https://www.luogu.com.cn/problem/P4474">双倍经验</a>。</p><p>因为不能够选相邻的点，则我们将所有点分为两类使每一类不存在相邻。</p><p>建图：</p><ol><li>对于所有 $a$ 类点，链接 $(S,a,pt[a])$ ；</li><li>对于所有 $b$ 类点，链接 $(b,T,pt[b])$ ；</li><li>对于相邻的点 $u,v$ ，链接 $(u,v,inf)$ 。</li></ol><p>如上述方法一致。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">101</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXP=<span class="number">2e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE=<span class="number">2e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">G</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">G</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXE&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXP],Cur[MAXP],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">G</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">G</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fl[MAXP];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Fl[S]=<span class="number">0</span>,Cur[S]=Head[S];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Fl[v]==<span class="number">-1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[v]=Fl[u]+<span class="number">1</span>;Cur[v]=Head[v];</span><br><span class="line">                <span class="keyword">if</span>(v==T) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==T) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[x];e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[x]=e;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Fl[v]==Fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(!k) Fl[v]=<span class="number">-1</span>;</span><br><span class="line">            Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k,flow+=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(S,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> Color[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;netflow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;netflow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M);</span><br><span class="line">    S=<span class="number">0</span>,T=N*M+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(((i&amp;<span class="number">1</span>)&amp;&amp;(j&amp;<span class="number">1</span>))||((!(i&amp;<span class="number">1</span>))&amp;&amp;(!(j&amp;<span class="number">1</span>))))</span><br><span class="line">                Color[i][j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> Color[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=N;++i)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;=M;++j) cout&lt;&lt;Color[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">        puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    ll Cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>,x;j&lt;=M;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            Cnt+=x;</span><br><span class="line">            <span class="keyword">if</span>(Color[i][j]) <span class="built_in">addEdge</span>(M*(i<span class="number">-1</span>)+j,T,x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">addEdge</span>(S,M*(i<span class="number">-1</span>)+j,x);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">4</span>;++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> Nx=i+Dx[k],Ny=j+Dy[k];</span><br><span class="line">                    <span class="keyword">if</span>(Nx&lt;<span class="number">1</span>||Ny&lt;<span class="number">1</span>||Nx&gt;N||Ny&gt;M) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="built_in">addEdge</span>(M*(i<span class="number">-1</span>)+j,M*(Nx<span class="number">-1</span>)+Ny,INF);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Cnt-<span class="built_in">Dinic</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">3 2 3</span></span><br><span class="line"><span class="comment">2 3 1 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="上下界最大流"><a href="#上下界最大流" class="headerlink" title="上下界最大流"></a>上下界最大流</h2><p>字面意思，对于每一条边的可行流，存在最小流 $min(c(u,v))$ 和最大流 $max(c(u,v))$ ，该边在满足最大流的所有性质的前提下，必须满足 $min(c(u,v))\le f(c(u,v))\le max(c(u,v))$ 。这是上下界可行流。</p><p>上下界流分为<strong>有源汇</strong>和<strong>无源汇</strong>两种情况。</p><hr><h3 id="无源汇上下界可行流"><a href="#无源汇上下界可行流" class="headerlink" title="无源汇上下界可行流"></a>无源汇上下界可行流</h3><p><del>我居然先理解的是有源汇</del>。</p><p>所谓可行流，就是满足容量限制，流守恒性，斜对称性的流。而对于拥有上下界的网络，其限制严格许多。</p><p>首先，下界必须流满，所以我们可以在建边时直接将容量建为 $upper(x)-lower(x)$ ，但是又考虑到每条边的下界并不一定相等，所以，我们需要额外找出位置来平衡流量：</p><p><strong>建立虚拟源点和虚拟汇点。</strong></p><p>令虚拟源点为 $vS$ ，虚拟汇点为 $vT$ ，对于点 $x$ 流入的流量为 $in_x$ ，流出的流量为 $out_x$ 。出入的流量差记为 $dif[x],dif[x]=in_x-out_x$ 。则有：</p><ol><li>$in_x&gt;out_x$ ，多流入了流量由 $vS$ 补足，连边 $(vS,x,dif[x])$ 。</li><li>$in_x=out_x$ ，流量平衡，不连边（连出来也是一条容量为 $0$ 的边）。</li><li>$in_x&lt;out_x$ ，多流出的流量流入 $vT$ ，连边 $(x,vT,-dif[x])$ 。</li></ol><p>这样其实就变成了一个常规的有源汇网络，然后跑最大流即可（毕竟最大流也是一种特殊的可行流）。如果跑得出来，那么除了 $vS$ 和 $vT$ 之外的所有点的容量应当是守恒的，则说明原图存在可行流。</p><p><a href="https://loj.ac/p/115">模板无源汇上下界可行流</a></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">501</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">2e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,vS,vT;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Cur[MAXN],Lo[MAXM&lt;&lt;<span class="number">1</span>],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> lo,<span class="type">int</span> up)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v,up-lo);Lo[Total]=lo;Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fl[MAXN],Dif[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Fl[vS]=<span class="number">0</span>,Cur[vS]=Head[vS];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(vS);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Fl[v]==<span class="number">-1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[v]=Fl[u]+<span class="number">1</span>;</span><br><span class="line">                Cur[v]=Head[v];</span><br><span class="line">                <span class="keyword">if</span>(v==vT) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==vT) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[x];e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[x]=e;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Fl[v]==Fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(!k) Fl[v]=<span class="number">-1</span>;</span><br><span class="line">            Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k,flow+=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(vS,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;unset-flow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;unset-flow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M);</span><br><span class="line">    vS=<span class="number">0</span>,vT=N+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,lo,up;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,lo,up);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,lo,up);</span><br><span class="line">        Dif[u]-=lo,Dif[v]+=lo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> Tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">if</span>(Dif[i]&gt;<span class="number">0</span>) <span class="built_in">addEdge</span>(vS,i,<span class="number">0</span>,Dif[i]),Tot+=Dif[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Dif[i]&lt;<span class="number">0</span>) <span class="built_in">addEdge</span>(i,vT,<span class="number">0</span>,-Dif[i]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Dinic</span>()!=Tot) <span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=<span class="number">2</span>;e&lt;=M*<span class="number">2</span>;e+=<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Edge[e^<span class="number">1</span>].val+Lo[e]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int e=1;e&lt;=M*2;++e) printf(&quot;%d &quot;,Lo[e]);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 6</span></span><br><span class="line"><span class="comment">1 2 1 3</span></span><br><span class="line"><span class="comment">2 3 1 3</span></span><br><span class="line"><span class="comment">3 4 1 3</span></span><br><span class="line"><span class="comment">4 1 1 3</span></span><br><span class="line"><span class="comment">1 3 1 3</span></span><br><span class="line"><span class="comment">4 2 1 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="有源汇上下界可行流"><a href="#有源汇上下界可行流" class="headerlink" title="有源汇上下界可行流"></a>有源汇上下界可行流</h3><p>有给定的源点和汇点，求该网络的可行流。</p><p>凡事讲究一个推进，所以我们选择将有源汇的问题转化为无源汇的问题。首先，对于有源汇的问题而言，其与无源汇问题最大的不同就在于其 $S$ 源点的流量与 $T$ 汇点的流量一定不同。那么，我们就需要使其相同：</p><p>连接一条从 $T$ 到 $S$ 上界为 $inf$ 下界为 $0$ 的边。这样就会使流量守恒定律一样满足于源汇点了。</p><h3 id="有源汇上下界最小-最大流"><a href="#有源汇上下界最小-最大流" class="headerlink" title="有源汇上下界最小/最大流"></a>有源汇上下界最小/最大流</h3><h4 id="最大流-1"><a href="#最大流-1" class="headerlink" title="最大流"></a>最大流</h4><p>首先跑出一条可行流，对于虚拟源点 $vS$ 到虚拟汇点 $vT$ 的边已经流满，但是通过定义：最大流 $=$ 可行流 $+$ 向上浮动的流量。所以我们要在残余网络中尽量跑满上限。</p><p>而我们需要在原图的源汇路径上重找增广路，可以得到结论是向上浮动的流量就是真实源点 $S$ 到真实汇点 $T$ 的最大流。</p><p><strong>注意：跑最后一次最大流时需要把边 $(T,S,inf)$ 删掉</strong>。</p><p><a href="https://loj.ac/p/116">模板有源汇上下界最大流</a></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">501</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">2e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T,Sv,Tv;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Cur[MAXN],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> A[MAXN],Fl[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Fl[Sv]=<span class="number">0</span>,Cur[Sv]=Head[Sv];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(Sv);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[x];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Fl[v]==<span class="number">-1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[v]=Fl[x]+<span class="number">1</span>;</span><br><span class="line">                Cur[v]=Head[v];</span><br><span class="line">                <span class="keyword">if</span>(v==Tv) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==Tv) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[x];e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[x]=e;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Fl[v]==Fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(!k) Fl[v]=<span class="number">-1</span>;</span><br><span class="line">            Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k,flow+=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(Sv,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;maxflow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;maxflow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,S,T);</span><br><span class="line">    Sv=<span class="number">0</span>,Tv=N+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w,c;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w,c);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,c-w);</span><br><span class="line">        A[u]-=w,A[v]+=w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> Tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">if</span>(A[i]&gt;<span class="number">0</span>) <span class="built_in">addEdge</span>(Sv,i,A[i]),Tot+=A[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[i]&lt;<span class="number">0</span>) <span class="built_in">addEdge</span>(i,Tv,-A[i]);</span><br><span class="line">    <span class="built_in">addEdge</span>(T,S,INF);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Dinic</span>()&lt;Tot) <span class="built_in">puts</span>(<span class="string">&quot;please go home to sleep&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> res=Edge[Total].val;</span><br><span class="line">        Sv=S,Tv=T;</span><br><span class="line">        Edge[Total].val=Edge[Total<span class="number">-1</span>].val=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res+<span class="built_in">Dinic</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 15 9 10</span></span><br><span class="line"><span class="comment">9 1 17 18</span></span><br><span class="line"><span class="comment">9 2 12 13</span></span><br><span class="line"><span class="comment">9 3 11 12</span></span><br><span class="line"><span class="comment">1 5 3 4</span></span><br><span class="line"><span class="comment">1 6 6 7</span></span><br><span class="line"><span class="comment">1 7 7 8</span></span><br><span class="line"><span class="comment">2 5 9 10</span></span><br><span class="line"><span class="comment">2 6 2 3</span></span><br><span class="line"><span class="comment">2 7 0 1</span></span><br><span class="line"><span class="comment">3 5 3 4</span></span><br><span class="line"><span class="comment">3 6 1 2</span></span><br><span class="line"><span class="comment">3 7 6 7</span></span><br><span class="line"><span class="comment">5 10 16 17</span></span><br><span class="line"><span class="comment">6 10 10 11</span></span><br><span class="line"><span class="comment">7 10 14 15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h4 id="最小流"><a href="#最小流" class="headerlink" title="最小流"></a>最小流</h4><p>从代码的角度来讲，最小流代码与最大流代码只有 $2$ 处不同。</p><blockquote><p> 把上下界最大流比作是“榨干”，那上下界最小流就是把残余网络“退钱”。——yxc</p></blockquote><p>所以，最后从 $T$ 向 $S$ 跑一遍最大流，再把第一次跑的最大流减去跑的第二次最大流就是原图的最小流了。</p><p><strong>也要删去最后一条边！！</strong></p><p><a href="https://loj.ac/p/117">模板有源汇上下界最小流</a></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">3e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T,vS,vT;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Cur[MAXN],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fl[MAXN],A[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Fl[vS]=<span class="number">0</span>,Cur[vS]=Head[vS];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(vS);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Fl[v]==<span class="number">-1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[v]=Fl[u]+<span class="number">1</span>;</span><br><span class="line">                Cur[v]=Head[v];</span><br><span class="line">                <span class="keyword">if</span>(v==vT) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==vT) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[x];e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[x]=e;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Fl[v]==Fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(!k) Fl[v]=<span class="number">-1</span>;</span><br><span class="line">            Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k,flow+=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(vS,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;minflow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;minflow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,S,T);</span><br><span class="line">    vS=<span class="number">0</span>,vT=N+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,up,lo;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,lo,up);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,up-lo);</span><br><span class="line">        A[u]-=lo,A[v]+=lo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> Tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">if</span>(A[i]&gt;<span class="number">0</span>) <span class="built_in">addEdge</span>(vS,i,A[i]),Tot+=A[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[i]&lt;<span class="number">0</span>) <span class="built_in">addEdge</span>(i,vT,-A[i]);</span><br><span class="line">    <span class="built_in">addEdge</span>(T,S,INF);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Dinic</span>()&lt;Tot) <span class="built_in">printf</span>(<span class="string">&quot;please go home to sleep&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> res=Edge[Total].val;</span><br><span class="line">        vS=T,vT=S;<span class="comment">//不同点1</span></span><br><span class="line">        Edge[Total].val=Edge[Total<span class="number">-1</span>].val=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,res-<span class="built_in">Dinic</span>());<span class="comment">//不同点2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 12 6 7</span></span><br><span class="line"><span class="comment">6 1 0 2147483647</span></span><br><span class="line"><span class="comment">1 7 0 2147483647</span></span><br><span class="line"><span class="comment">6 2 0 2147483647</span></span><br><span class="line"><span class="comment">2 7 0 2147483647</span></span><br><span class="line"><span class="comment">6 3 0 2147483647</span></span><br><span class="line"><span class="comment">3 7 0 2147483647</span></span><br><span class="line"><span class="comment">6 4 0 2147483647</span></span><br><span class="line"><span class="comment">4 7 0 2147483647</span></span><br><span class="line"><span class="comment">6 5 0 2147483647</span></span><br><span class="line"><span class="comment">5 7 0 2147483647</span></span><br><span class="line"><span class="comment">5 1 1 2147483647</span></span><br><span class="line"><span class="comment">3 4 1 2147483647</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="费用流"><a href="#费用流" class="headerlink" title="费用流"></a>费用流</h2><h3 id="最小费用最大流"><a href="#最小费用最大流" class="headerlink" title="最小费用最大流"></a>最小费用最大流</h3><p>不同于最大流的普通网络，对于每一条边，除了源初的 $c(u,v)$ 表示容量限制以外，还存在一个单位流量的费用表示 $w(u,v)$ 。即流过 $1$ 个单位流量所花费的费用。</p><p>则有当边 $(u,v)$ 流过 $f(u,v)$ 的流量时，就需要支付 $f(u,v)\times w(u,v)$ 的费用。</p><p>$w$ 函数依然满足<strong>斜对称性</strong>，即有 $w(u,v)=-w(v,u)$ 。</p><p>在一个网络中花费最小的最大流称为<strong>最小费用最大流</strong>。一般是在最大化 $\sum\limits_{(s,v)\in E}f(s,v)$ 的前提下最小化 $\sum\limits_{(u,v)\in E}f(u,v)\times w(u,v)$ 。</p><hr><h3 id="SSP-算法"><a href="#SSP-算法" class="headerlink" title="SSP 算法"></a>SSP 算法</h3><p>Successive Shortest Path 算法是基于贪心的算法，每次寻找单位费用最小的增广路进行增广以满足当前费用最小，直到图不存在增广路。</p><p><strong>SSP 算法不能求解负圈</strong>，如果存在单位费用为负的圈（即负圈），则需要先使用<strong>消圈算法</strong>消除图上的负圈。</p><p>SSP 的算法时间复杂度取决于求最短路的时间复杂度和寻找增广路的时间复杂度，设网络的最大流为 $f$ ，寻找增广路的时间复杂度为 $\mathcal O(nm)$ ，则上界的时间复杂度为 $\mathcal O(nmf)$ 。而事实上，该算法是<strong>伪多项式时间</strong>的。（关于值域的多项式）</p><p>对于 $\text{SSP}$ 的实现，只需将 $\text{EK,Dinic}$ 寻找增广路的算法替换为使用最短路算法寻找单位费用最小的增广路即可。（$\text{EK}$ 我就不写了）</p><p>注意费用流的建边操作满足：</p><p>对于有向边 $(u,v,w,c)$ ，其中 $w$ 为流量， $c$ 为费用；则其反边则为 $(v,u,0,-c)$ 。</p><details>    <summary>AC Code Dinic ver.</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Net</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val,cost;</span><br><span class="line">    <span class="built_in">Net</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>,<span class="type">int</span> c=<span class="number">0</span>):</span><br><span class="line">        <span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v),<span class="built_in">cost</span>(c)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Cur[MAXN],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Net</span>(Head[u],v,w,c);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Net</span>(Head[v],u,<span class="number">0</span>,-c);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Dist[MAXN],ret;</span><br><span class="line"><span class="type">bool</span> Vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Spfa</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dist,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(Dist));</span><br><span class="line">    <span class="built_in">memcpy</span>(Cur,Head,<span class="built_in">sizeof</span>(Head));</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(s),Dist[s]=<span class="number">0</span>,Vis[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        Vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Edge[e].val&amp;&amp;Dist[v]&gt;Dist[u]+Edge[e].cost)</span><br><span class="line">            &#123;</span><br><span class="line">                Dist[v]=Dist[u]+Edge[e].cost;</span><br><span class="line">                <span class="keyword">if</span>(!Vis[v]) Q.<span class="built_in">push</span>(v),Vis[v]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Dist[t]!=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==T) <span class="keyword">return</span> inf;</span><br><span class="line">    Vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[x];e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[x]=e;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(!Vis[v]&amp;&amp;Edge[e].val&amp;&amp;Dist[v]==Dist[x]+Edge[e].cost)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(k)</span><br><span class="line">            &#123;</span><br><span class="line">                ret+=k*Edge[e].cost;</span><br><span class="line">                Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k,flow+=k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Vis[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Spfa</span>(S,T)) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(S,INF)) res+=flow;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;mincost-maxflow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;mincost-maxflow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,S,T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w,c;i&lt;=M;++i) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w,c);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,w,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="built_in">Dinic</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,ans,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5 4 3</span></span><br><span class="line"><span class="comment">4 2 30 2</span></span><br><span class="line"><span class="comment">4 3 20 3</span></span><br><span class="line"><span class="comment">2 3 20 1</span></span><br><span class="line"><span class="comment">2 1 30 9</span></span><br><span class="line"><span class="comment">1 3 40 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="Primal-Dual-原始对偶算法"><a href="#Primal-Dual-原始对偶算法" class="headerlink" title="Primal-Dual 原始对偶算法"></a>Primal-Dual 原始对偶算法</h3><p>这个算法似乎和 <a href="https://oi-wiki.org/graph/shortest-path/#johnson">$\text{Johnson}$ 全源最短路</a> 有些许类似。（看到这句话我还去学了一下 $\text{Johnson}$ 全源最短路算法）</p><p>因为费用流的时间复杂度受限于其求最短路的时间，而最快的算法 $\text{Dijkstra}$ 却无法使用（因为存在负费用），那么，我们为每一个点设置一个<strong>势能</strong>使所有的费用都变成非负值，这点类似于 $\text{Johnson}$ 算法，从而使费用流的计算可以应用 $\text{Dijkstra}$ 算法。</p><p>与 $\text{Johnson}$ 相似，首先跑一次最短路，求出源点到任意点的最短距离，即该点的初始势能 $h_i$ 。然后将边 $(u,v,c)$ 处理成 $(u,v,w+h_u-h_v)$ 即可。</p><p>与常规的最短路问题不同的是，每次增广后图的形态会发生变化，这种情况下各点的势能需要更新。</p><p>令增广之后 $S$ 到 $i$ 点的最短距离为 $d_i’$ （边权重置之后），然后将 $h_i$ 加上 $d_i’$ 即可。这样可以使图上所有边的边权均为非负。</p><p>对于原有的边，增广之前有 $d_i’+(c(i,j)+h_i-h_j)-d_j’\ge 0$ ，因此 $c(i,j)+(d_i’+h_i)-(d_j’+h_j)\ge 0$ ，即用 $h_i+d_i’$ 作为新势能并不会使 $(i,j)$ 的边权变为负。</p><p>对于该算法求增广路，可以用一个结构体 $p[v]=\{u,e\}$ 表示这一条增广路走到 $v$ 时的起点是 $u$ ，边的编号是 $e$ ，然后就可以用一个逆推来移除增广路。</p><p>可以对比一下两种方法的时间：</p><div class="table-container"><table><thead><tr><th>算法</th><th style="text-align:center">朴素</th><th style="text-align:center">$\text{O}_2$</th></tr></thead><tbody><tr><td>$\text{SSP}$</td><td style="text-align:center">$\text{1.40s}$</td><td style="text-align:center">$\text{1.10s}$</td></tr><tr><td>$\text{Primal-Dual}$</td><td style="text-align:center">$\text{2.25s}$</td><td style="text-align:center">$\text{507ms}$</td></tr></tbody></table></div><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">5e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Net</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val,cost;</span><br><span class="line">    <span class="built_in">Net</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>,<span class="type">int</span> c=<span class="number">0</span>):</span><br><span class="line">        <span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v),<span class="built_in">cost</span>(c)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Que</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> now,d;</span><br><span class="line">    <span class="built_in">Que</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> d=<span class="number">0</span>):<span class="built_in">now</span>(n),<span class="built_in">d</span>(d)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Que&amp; a)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> d&gt;a.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v,e;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> v=<span class="number">0</span>,<span class="type">int</span> e=<span class="number">0</span>):<span class="built_in">v</span>(v),<span class="built_in">e</span>(e)&#123;&#125;</span><br><span class="line">&#125;P[MAXN];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Cur[MAXN],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Net</span>(Head[u],v,w,c);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Net</span>(Head[v],u,<span class="number">0</span>,-c);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Dist[MAXN],H[MAXN],MaxF,MinC;</span><br><span class="line"><span class="type">bool</span> Vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;Que&gt;Q;</span><br><span class="line">    <span class="built_in">memset</span>(Dist,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(Dist));</span><br><span class="line">    <span class="built_in">memset</span>(Vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(Vis));</span><br><span class="line">    Dist[S]=<span class="number">0</span>;Q.<span class="built_in">push</span>(<span class="built_in">Que</span>(S,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">top</span>().now;Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(Vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        Vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to,Nc=Edge[e].cost+H[u]-H[v];</span><br><span class="line">            <span class="keyword">if</span>(Edge[e].val&amp;&amp;Dist[v]&gt;Dist[u]+Nc)</span><br><span class="line">            &#123;</span><br><span class="line">                Dist[v]=Dist[u]+Nc;</span><br><span class="line">                P[v]=<span class="built_in">Node</span>(u,e);</span><br><span class="line">                <span class="keyword">if</span>(!Vis[v]) Q.<span class="built_in">push</span>(<span class="built_in">Que</span>(v,Dist[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Dist[T]!=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    <span class="built_in">memset</span>(H,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(H));</span><br><span class="line">    H[S]=<span class="number">0</span>,Vis[S]=<span class="number">1</span>;</span><br><span class="line">    Q.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        Vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Edge[e].val&amp;&amp;H[v]&gt;H[u]+Edge[e].cost)</span><br><span class="line">            &#123;</span><br><span class="line">                H[v]=H[u]+Edge[e].cost;</span><br><span class="line">                <span class="keyword">if</span>(!Vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    Vis[v]=<span class="number">1</span>;</span><br><span class="line">                    Q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;primal-dual.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;primal-dual.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,S,T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w,c;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w,c);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,w,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Spfa</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Dijkstra</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> MinF=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) H[i]+=Dist[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=T;i!=S;i=P[i].v) <span class="built_in">checkMin</span>(MinF,Edge[P[i].e].val);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=T;i!=S;i=P[i].v)</span><br><span class="line">        &#123;</span><br><span class="line">            Edge[P[i].e].val-=MinF;</span><br><span class="line">            Edge[P[i].e^<span class="number">1</span>].val+=MinF;</span><br><span class="line">        &#125;</span><br><span class="line">        MaxF+=MinF;</span><br><span class="line">        MinC+=MinF*H[T];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,MaxF,MinC);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5 4 3</span></span><br><span class="line"><span class="comment">4 2 30 2</span></span><br><span class="line"><span class="comment">4 3 20 3</span></span><br><span class="line"><span class="comment">2 3 20 1</span></span><br><span class="line"><span class="comment">2 1 30 9</span></span><br><span class="line"><span class="comment">1 3 40 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="网络流的实际应用（构造网络）"><a href="#网络流的实际应用（构造网络）" class="headerlink" title="网络流的实际应用（构造网络）"></a>网络流的实际应用（构造网络）</h2><p>如果一道题能够使用网络流来做（一般指最大流和最小割），那这道题的代码非常格式化：</p><ol><li>建图，构造出原网络；</li><li>增广，并计算出答案。</li></ol><p>结束。就这么简单……么？</p><p>网络流的板子在于其第 $2$ 步，正因如此，难点在于如何建图。</p><hr><h3 id="一道难题-Tree"><a href="#一道难题-Tree" class="headerlink" title="一道难题 Tree"></a><a href="https://www.luogu.com.cn/problem/P3931">一道难题 Tree</a></h3><p>其实可以用树型 dp 来解，但我们今天不谈 dp 。</p><p>我们发现，如果使叶节点和根节点分离，最小的代价就是从根节点到叶节点的路径的最小边的代价。这与一条增广路是类似的，那么，我们可以把这道题转换成另外一个模型。</p><p>对于原图的根节点，则是网络的超级汇点 $S$ ，每一个叶节点都是一个汇点 $T’$ ，最后求源点到汇点的最大流。就是一个模板的多源汇最大流了，然后我们链接一个超级汇点 $T$ ，链接所有叶子汇点，求从超级源点到超级汇点的最大流。</p><p>但是，这道题的边是双向边，在开始的时候我们并不知道谁是起点谁是终点，所以我们跑一遍 $dfs$ 处理出叶节点并连边，并将双向边处理成单向边。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">5e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Net</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Net</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Cur[MAXN],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Net</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fl[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Fl[S]=<span class="number">0</span>,Cur[S]=Head[S];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Fl[v]==<span class="number">-1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[v]=Fl[u]+<span class="number">1</span>;</span><br><span class="line">                Cur[v]=Head[v];</span><br><span class="line">                <span class="keyword">if</span>(v==T) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==T) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[x];e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[x]=e;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Fl[v]==Fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(!k) Fl[v]=<span class="number">-1</span>;</span><br><span class="line">            Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k,flow+=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(S,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dpTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dpTree</span>(v,x);</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        Edge[e^<span class="number">1</span>].val=<span class="number">0</span>;<span class="comment">//处理双向边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)<span class="comment">//链接超级汇点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">addEdge</span>(x,T,INF);</span><br><span class="line">        <span class="built_in">addEdge</span>(T,x,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;mxaflow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;maxflow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,S);</span><br><span class="line">    T=N+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,u,v,w;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,w);</span><br><span class="line">        <span class="built_in">addEdge</span>(v,u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dpTree</span>(S,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">Dinic</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">1 2 1 </span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment">1 4 1</span></span><br><span class="line"><span class="comment">*/</span>    </span><br></pre></td></tr></table></figure></details><hr><h3 id="蜥蜴"><a href="#蜥蜴" class="headerlink" title="蜥蜴"></a><a href="https://www.luogu.com.cn/problem/P2472">蜥蜴</a></h3><p>将平面二维图建立成网络。可以发现，能够流入的网络应该是 $inf$ 的，而能够流出的流量就是该点的高度（权值）。这里会用到一种叫<strong>拆点</strong>的技巧——顾名思义，将原来的 $u $ 结点拆成 $u_{in}$ 和 $u_{out}$ 两个结点， $u_{in}$ 用来链接原来指向 $u$ 的边， $u_{out}$ 用来链接原来从 $u$ 出发的边。而链接 $u_{in}$ 和 $u_{out}$ 以保证经过 $u$ 之后只能有 $h[u]$ 只蜥蜴。</p><p>建图：</p><ol><li>对于 $h[u]\ne 0$ 的结点，链接 $(u_{in},u_{out},h[u])$ ；</li><li>对于 $D(|u(x_1,y_1)|-|v(x_2,y_2|)\le d$ ，链接 $(u_{out},v_{in},inf)$ ；</li><li>对于 $s[u]=L$ ，即存在蜥蜴，链接 $(S,u_{in},inf)$ ；</li><li>对于 $D(|u(x_1,y_1)|-|OUTSIDE|)$ ，即达到边界，链接 $(u_{out},T,inf)$ 。</li></ol><p>为什么所有容量都可以设成 $inf$ ？因为能够通过 $u$ 点的流，必然会经过 $(u_{in},u_{out})$ 的边，则其最多的流量必然会是 $h[u]$ ，而避免胡乱赋值导致容量变小，不如全部赋为 $inf$ 。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXR=<span class="number">21</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXP=<span class="number">1e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE=<span class="number">2e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> R,C,D,Dth,S,T,Tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">G</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">G</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXE&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXP],Cur[MAXP],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">G</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">G</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fl[MAXP];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Fl[S]=<span class="number">0</span>,Cur[S]=Head[S];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Fl[v]==<span class="number">-1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[v]=Fl[u]+<span class="number">1</span>;Cur[v]=Head[v];</span><br><span class="line">                <span class="keyword">if</span>(v==T) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==T) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[x];e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[x]=e;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Fl[v]==Fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(!k) Fl[v]=<span class="number">-1</span>;</span><br><span class="line">            Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k,flow+=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(S,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> opt[MAXR];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dist</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">int</span> x2,<span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">In</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> C*(i<span class="number">-1</span>)+j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Out</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> C*(i<span class="number">-1</span>)+j+R*C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;maxflow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;maxflow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(R,C,D);</span><br><span class="line">    Dth=D*D;</span><br><span class="line">    S=<span class="number">0</span>,T=<span class="number">2</span>*R*C+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=R;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=C;++j)</span><br><span class="line">            <span class="keyword">if</span>(opt[j]!=<span class="string">&#x27;0&#x27;</span>) <span class="built_in">addEdge</span>(<span class="built_in">In</span>(i,j),<span class="built_in">Out</span>(i,j),opt[j]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=R;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=C;++j)</span><br><span class="line">            <span class="keyword">if</span>(opt[j]==<span class="string">&#x27;L&#x27;</span>) <span class="built_in">addEdge</span>(S,<span class="built_in">In</span>(i,j),<span class="number">1</span>),++Tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=R;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=C;++j)</span><br><span class="line">            <span class="keyword">if</span>(i-D&lt;<span class="number">1</span>||j-D&lt;<span class="number">1</span>||i+D&gt;R||j+D&gt;C) <span class="built_in">addEdge</span>(<span class="built_in">Out</span>(i,j),T,INF);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=R;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=C;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=R;++k)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=C;++l)</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">Dist</span>(i,j,k,l)&lt;=Dth)</span><br><span class="line">                        <span class="built_in">addEdge</span>(<span class="built_in">Out</span>(i,j),<span class="built_in">In</span>(k,l),INF);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Tot-<span class="built_in">Dinic</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 8 2</span></span><br><span class="line"><span class="comment">00000000</span></span><br><span class="line"><span class="comment">02000000</span></span><br><span class="line"><span class="comment">00321100</span></span><br><span class="line"><span class="comment">02000000</span></span><br><span class="line"><span class="comment">00000000</span></span><br><span class="line"><span class="comment">........</span></span><br><span class="line"><span class="comment">........</span></span><br><span class="line"><span class="comment">..LLLL..</span></span><br><span class="line"><span class="comment">........</span></span><br><span class="line"><span class="comment">........</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="假期的宿舍"><a href="#假期的宿舍" class="headerlink" title="假期的宿舍"></a><a href="https://www.luogu.com.cn/problem/P2055">假期的宿舍</a></h3><p>有点像二分图匹配，所以考虑最大流。</p><p>把学生看作是结点 $1\sim n$ ，床看作是结点 $n+1\sim 2n$ ，建图：</p><ol><li>如果该学生留校（包括看望的学生），链接 $S$ 与该学生；</li><li>如果该学生有床，链接该学生的床和 $T$ 。</li><li>链接每一位本校学生和自己的床。</li><li>如果 $u$ 和 $v$ 认识，链接学生 $u$ 的人和学生 $v$ 的床。</li><li>容量都是 $1$ 。</li></ol><p>跑一遍 $\text{Dinic}$ 就好了。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXP=<span class="number">1e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE=<span class="number">2e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Net</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Net</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXE&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXP],Cur[MAXP],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Net</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Net</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fl[MAXP];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Fl[S]=<span class="number">0</span>,Cur[S]=Head[S];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u],v;e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Fl[v]==<span class="number">-1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[v]=Fl[u]+<span class="number">1</span>;</span><br><span class="line">                Cur[v]=Head[v];</span><br><span class="line">                <span class="keyword">if</span>(v==T) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==T) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[x],v;e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[x]=e;v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Fl[v]==Fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(!k) Fl[v]=<span class="number">-1</span>;</span><br><span class="line">            Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k,flow+=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(S,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Test,Cnt;</span><br><span class="line"><span class="type">bool</span> In[MAXP];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(In,<span class="number">0</span>,<span class="built_in">sizeof</span>(In));Cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(Head,<span class="number">0</span>,<span class="built_in">sizeof</span>(Head));Total=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    S=<span class="number">0</span>,T=N+N+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(In[i]);</span><br><span class="line">        <span class="keyword">if</span>(In[i]) <span class="built_in">addEdge</span>(i+N,T,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x);</span><br><span class="line">        <span class="keyword">if</span>((!x&amp;&amp;In[i])||(!In[i])) <span class="built_in">addEdge</span>(S,i,<span class="number">1</span>),++Cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(In[i]) <span class="built_in">addEdge</span>(i,i+N,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>,x;j&lt;=N;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            <span class="keyword">if</span>(x) <span class="built_in">addEdge</span>(i,j+N,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Dinic</span>()&gt;=Cnt) <span class="built_in">printf</span>(<span class="string">&quot;^_^\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;T_T\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;maxflow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;maxflow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(Test);</span><br><span class="line">    <span class="keyword">while</span>(Test--) <span class="built_in">Solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 1 0</span></span><br><span class="line"><span class="comment">0 1 0</span></span><br><span class="line"><span class="comment">0 1 1</span></span><br><span class="line"><span class="comment">1 0 0</span></span><br><span class="line"><span class="comment">1 0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="网络流-24-题"><a href="#网络流-24-题" class="headerlink" title="网络流 24 题"></a>网络流 24 题</h2><p>这里只给出指路和标程。</p><p><a href="https://www.luogu.com.cn/problem/list?tag=332&amp;page=1">指路</a></p><h3 id="飞行员配对方案问题"><a href="#飞行员配对方案问题" class="headerlink" title="飞行员配对方案问题"></a>飞行员配对方案问题</h3><p>可以当做是网络流 24 题建图之旅的开始。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">201</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">5001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from,to,cap,flow;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> c,<span class="type">int</span> f):<span class="built_in">from</span>(u),<span class="built_in">to</span>(v),<span class="built_in">cap</span>(c),<span class="built_in">flow</span>(f)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> EdmondsKarp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Total;</span><br><span class="line">    vector&lt;Edge&gt;Edges;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;G[MAXN];</span><br><span class="line">    <span class="type">int</span> fl[MAXN],id[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) G[i].<span class="built_in">clear</span>();</span><br><span class="line">        Edges.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(u,v,c,<span class="number">0</span>));</span><br><span class="line">        Edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(v,u,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        Total=Edges.<span class="built_in">size</span>();</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(Total<span class="number">-2</span>);</span><br><span class="line">        G[v].<span class="built_in">push_back</span>(Total<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">maxFlow</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll flow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(fl,<span class="number">0</span>,<span class="built_in">sizeof</span>(fl));</span><br><span class="line">            queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">            Q.<span class="built_in">push</span>(s);</span><br><span class="line">            fl[s]=INF;</span><br><span class="line">            <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G[u].<span class="built_in">size</span>();++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    Edge&amp; e=Edges[G[u][i]];</span><br><span class="line">                    <span class="keyword">if</span>(!fl[e.to]&amp;&amp;e.cap&gt;e.flow)</span><br><span class="line">                    &#123;</span><br><span class="line">                        id[e.to]=G[u][i];</span><br><span class="line">                        fl[e.to]=<span class="built_in">min</span>(fl[u],e.cap-e.flow);</span><br><span class="line">                        Q.<span class="built_in">push</span>(e.to);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(fl[t]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!fl[t]) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> u=t;u!=s;u=Edges[id[u]].from)</span><br><span class="line">            &#123;</span><br><span class="line">                Edges[id[u]].flow+=fl[t];</span><br><span class="line">                Edges[id[u]^<span class="number">1</span>].flow-=fl[t];</span><br><span class="line">            &#125;</span><br><span class="line">            flow+=fl[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> EdmondsKarp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;ek.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;ek.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(M,N);</span><br><span class="line">    S=<span class="number">0</span>,T=N+<span class="number">1</span>;</span><br><span class="line">    EdmondsKarp::<span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">    <span class="built_in">read</span>(u,v);</span><br><span class="line">    <span class="keyword">while</span>(u!=<span class="number">-1</span>&amp;&amp;v!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        EdmondsKarp::<span class="built_in">addEdge</span>(u,v,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) EdmondsKarp::<span class="built_in">addEdge</span>(S,i,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=M+<span class="number">1</span>;i&lt;=N;++i) EdmondsKarp::<span class="built_in">addEdge</span>(i,T,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,EdmondsKarp::<span class="built_in">maxFlow</span>(S,T));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;Total;i+=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(Edges[i].to!=S&amp;&amp;Edges[i].from!=S)</span><br><span class="line">            <span class="keyword">if</span>(Edges[i].to!=T&amp;&amp;Edges[i].from!=T)</span><br><span class="line">                <span class="keyword">if</span>(Edges[i].flow!=<span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,Edges[i].from,Edges[i].to);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 10</span></span><br><span class="line"><span class="comment">1 7</span></span><br><span class="line"><span class="comment">1 8</span></span><br><span class="line"><span class="comment">2 6</span></span><br><span class="line"><span class="comment">2 9</span></span><br><span class="line"><span class="comment">2 10</span></span><br><span class="line"><span class="comment">3 7</span></span><br><span class="line"><span class="comment">3 8</span></span><br><span class="line"><span class="comment">4 7</span></span><br><span class="line"><span class="comment">4 8</span></span><br><span class="line"><span class="comment">5 10</span></span><br><span class="line"><span class="comment">-1 -1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="试题库问题"><a href="#试题库问题" class="headerlink" title="试题库问题"></a>试题库问题</h3><p>本人第一次自主建图成功，大贺大贺。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK=<span class="number">21</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">2e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,K,S,T,M;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Net</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Net</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Cur[MAXN],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Net</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Net</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fl[MAXN],Ans[MAXK][MAXN],Cnt[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Fl[S]=<span class="number">0</span>,Cur[S]=Head[S];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Fl[v]==<span class="number">-1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[v]=Fl[u]+<span class="number">1</span>;</span><br><span class="line">                Cur[v]=Head[v];</span><br><span class="line">                <span class="keyword">if</span>(v==T) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==T) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[x];e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[x]=e;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Fl[v]==Fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(!k) Fl[v]=<span class="number">-1</span>;</span><br><span class="line">            Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k,flow+=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(S,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;maxflow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;maxflow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(K,N);</span><br><span class="line">    S=<span class="number">0</span>,T=N+K+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,ksum;i&lt;=K;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(ksum);</span><br><span class="line">        <span class="built_in">addEdge</span>(S,i,ksum);</span><br><span class="line">        M+=ksum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,kopt,ver;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(kopt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=kopt;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(ver);</span><br><span class="line">            <span class="built_in">addEdge</span>(ver,i+K,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">addEdge</span>(i+K,T,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Dinic</span>()&lt;M) <span class="built_in">printf</span>(<span class="string">&quot;No Solution!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=Total;i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> from=Edge[i^<span class="number">1</span>].to,to=Edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1</span>&lt;=from&amp;&amp;from&lt;=K)</span><br><span class="line">                <span class="keyword">if</span>(K+<span class="number">1</span>&lt;=to&amp;&amp;to&lt;=N+K)</span><br><span class="line">                    <span class="keyword">if</span>(Edge[i^<span class="number">1</span>].val)</span><br><span class="line">                        Ans[from][++Cnt[from]]=to-K;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=K;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sort</span>(Ans[i]+<span class="number">1</span>,Ans[i]+<span class="number">1</span>+Cnt[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d: &quot;</span>,i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=Cnt[i];++j) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Ans[i][j]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 15</span></span><br><span class="line"><span class="comment">3 3 4</span></span><br><span class="line"><span class="comment">2 1 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">3 1 2 3</span></span><br><span class="line"><span class="comment">2 2 3</span></span><br><span class="line"><span class="comment">2 1 3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 1 2</span></span><br><span class="line"><span class="comment">2 1 3</span></span><br><span class="line"><span class="comment">2 1 2</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">3 1 2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="方格取数问题"><a href="#方格取数问题" class="headerlink" title="方格取数问题"></a>方格取数问题</h3><p>最大权独立集模板题，求最小割。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">101</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXP=<span class="number">2e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXE=<span class="number">2e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">G</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">G</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXE&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXP],Cur[MAXP],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">G</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">G</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fl[MAXP];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Fl[S]=<span class="number">0</span>,Cur[S]=Head[S];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Fl[v]==<span class="number">-1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[v]=Fl[u]+<span class="number">1</span>;Cur[v]=Head[v];</span><br><span class="line">                <span class="keyword">if</span>(v==T) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==T) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Cur[x];e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        Cur[x]=e;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Fl[v]==Fl[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(!k) Fl[v]=<span class="number">-1</span>;</span><br><span class="line">            Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k,flow+=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(S,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> Color[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;netflow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;netflow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M);</span><br><span class="line">    S=<span class="number">0</span>,T=N*M+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(((i&amp;<span class="number">1</span>)&amp;&amp;(j&amp;<span class="number">1</span>))||((!(i&amp;<span class="number">1</span>))&amp;&amp;(!(j&amp;<span class="number">1</span>))))</span><br><span class="line">                Color[i][j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> Color[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=N;++i)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;=M;++j) cout&lt;&lt;Color[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">        puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    ll Cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>,x;j&lt;=M;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            Cnt+=x;</span><br><span class="line">            <span class="keyword">if</span>(Color[i][j]) <span class="built_in">addEdge</span>(M*(i<span class="number">-1</span>)+j,T,x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">addEdge</span>(S,M*(i<span class="number">-1</span>)+j,x);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">4</span>;++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> Nx=i+Dx[k],Ny=j+Dy[k];</span><br><span class="line">                    <span class="keyword">if</span>(Nx&lt;<span class="number">1</span>||Ny&lt;<span class="number">1</span>||Nx&gt;N||Ny&gt;M) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="built_in">addEdge</span>(M*(i<span class="number">-1</span>)+j,M*(Nx<span class="number">-1</span>)+Ny,INF);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Cnt-<span class="built_in">Dinic</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">3 2 3</span></span><br><span class="line"><span class="comment">2 3 1 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="圆桌问题"><a href="#圆桌问题" class="headerlink" title="圆桌问题"></a>圆桌问题</h3><p>较基础，可以作为练习。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,S,T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],NewT[MAXN],Total=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u,<span class="number">0</span>);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Fl[MAXN],Tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    <span class="built_in">memset</span>(Fl,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Fl));</span><br><span class="line">    Q.<span class="built_in">push</span>(S);</span><br><span class="line">    NewT[S]=Head[S],Fl[S]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">            <span class="keyword">if</span>(Fl[v]==<span class="number">-1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Fl[v]=Fl[u]+<span class="number">1</span>;</span><br><span class="line">                NewT[v]=Head[v];</span><br><span class="line">                <span class="keyword">if</span>(v==T) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==T) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="type">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=NewT[u];e&amp;&amp;flow&lt;inf;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        NewT[u]=e;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(Fl[v]==Fl[u]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Edge[e].val,inf-flow));</span><br><span class="line">            <span class="keyword">if</span>(!k) Fl[v]=<span class="number">-1</span>;</span><br><span class="line">            Edge[e].val-=k,Edge[e^<span class="number">1</span>].val+=k;</span><br><span class="line">            flow+=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="keyword">while</span>(flow=<span class="built_in">Dfs</span>(S,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;netflow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;netflow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(M,N);</span><br><span class="line">    S=<span class="number">0</span>,T=N+M+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,c;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(c);</span><br><span class="line">        <span class="built_in">addEdge</span>(S,i,c);</span><br><span class="line">        Tot+=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,c;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(c);</span><br><span class="line">        <span class="built_in">addEdge</span>(i+M,T,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">            <span class="built_in">addEdge</span>(i,M+j,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Dinic</span>()!=Tot) <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=Head[i];j;j=Edge[j].next)</span><br><span class="line">                <span class="keyword">if</span>(Edge[j].to&gt;M&amp;&amp;Edge[j].to&lt;=N+M)</span><br><span class="line">                    <span class="keyword">if</span>(!Edge[j].val) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Edge[j].to-M);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">4 5 3 5</span></span><br><span class="line"><span class="comment">3 5 2 6 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="汽车加油行驶问题"><a href="#汽车加油行驶问题" class="headerlink" title="汽车加油行驶问题"></a>汽车加油行驶问题</h3><details>    <summary>AC Code Older ver.</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> LL INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=x*<span class="number">10</span>+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,y,k;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> _x=<span class="number">0</span>,<span class="type">int</span> _y=<span class="number">0</span>,<span class="type">int</span> _k=<span class="number">0</span>):<span class="built_in">x</span>(_x),<span class="built_in">y</span>(_y),<span class="built_in">k</span>(_k)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> N,K;</span><br><span class="line">LL A,B,C,Map[<span class="number">101</span>][<span class="number">101</span>],Dist[<span class="number">101</span>][<span class="number">101</span>][<span class="number">11</span>],Init[<span class="number">101</span>][<span class="number">101</span>][<span class="number">11</span>];</span><br><span class="line"><span class="type">bool</span> Vis[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  freopen(&quot;car.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//  freopen(&quot;car.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld%lld%lld&quot;</span>,&amp;N,&amp;K,&amp;A,&amp;B,&amp;C);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;Map[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(Dist,<span class="number">0x7f7f7f7f</span>,<span class="built_in">sizeof</span>(Dist));</span><br><span class="line">    Dist[<span class="number">1</span>][<span class="number">1</span>][K]=<span class="number">0</span>;</span><br><span class="line">    Init[<span class="number">1</span>][<span class="number">1</span>][K]=<span class="number">1</span>;</span><br><span class="line">    queue&lt;Node&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(<span class="built_in">Node</span>(<span class="number">1</span>,<span class="number">1</span>,K));</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        Node u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        Init[u.x][u.y][u.k]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(Map[u.x][u.y]&amp;&amp;u.k!=K)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Dist[u.x][u.y][K]&gt;Dist[u.x][u.y][u.k]+A)</span><br><span class="line">            &#123;</span><br><span class="line">                Dist[u.x][u.y][K]=Dist[u.x][u.y][u.k]+A;</span><br><span class="line">                <span class="keyword">if</span>(!Init[u.x][u.y][K])</span><br><span class="line">                &#123;</span><br><span class="line">                    Init[u.x][u.y][K]=<span class="number">1</span>,Q.<span class="built_in">push</span>(<span class="built_in">Node</span>(u.x,u.y,K));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Dist[u.x][u.y][K]&gt;Dist[u.x][u.y][u.k]+A+C)</span><br><span class="line">            &#123;</span><br><span class="line">                Dist[u.x][u.y][K]=Dist[u.x][u.y][u.k]+A+C;</span><br><span class="line">                <span class="keyword">if</span>(!Init[u.x][u.y][K])</span><br><span class="line">                &#123;</span><br><span class="line">                    Init[u.x][u.y][K]=<span class="number">1</span>,Q.<span class="built_in">push</span>(<span class="built_in">Node</span>(u.x,u.y,K));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u.k&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">1</span>;o&lt;=<span class="number">4</span>;++o)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> nx=u.x+dx[o],ny=u.y+dy[o];</span><br><span class="line">                <span class="keyword">if</span>(nx&lt;<span class="number">1</span>||nx&gt;N||ny&lt;<span class="number">1</span>||ny&gt;N) <span class="keyword">continue</span>;</span><br><span class="line">                LL len=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(nx&lt;u.x||ny&lt;u.y) len=B;</span><br><span class="line">                <span class="keyword">if</span>(Dist[nx][ny][u.k<span class="number">-1</span>]&gt;Dist[u.x][u.y][u.k]+len)</span><br><span class="line">                &#123;</span><br><span class="line">                    Dist[nx][ny][u.k<span class="number">-1</span>]=Dist[u.x][u.y][u.k]+len;</span><br><span class="line">                    <span class="keyword">if</span>(!Init[nx][ny][u.k<span class="number">-1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        Init[nx][ny][u.k<span class="number">-1</span>]=<span class="number">1</span>,Q.<span class="built_in">push</span>(<span class="built_in">Node</span>(nx,ny,u.k<span class="number">-1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL Ans=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=K;++i) Ans=<span class="built_in">underMin</span>(Ans,Dist[N][N][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">9 3 2 3 6</span></span><br><span class="line"><span class="comment">0 0 0 0 1 0 0 0 0</span></span><br><span class="line"><span class="comment">0 0 0 1 0 1 1 0 0</span></span><br><span class="line"><span class="comment">1 0 1 0 0 0 0 1 0</span></span><br><span class="line"><span class="comment">0 0 0 0 0 1 0 0 1</span></span><br><span class="line"><span class="comment">1 0 0 1 0 0 1 0 0</span></span><br><span class="line"><span class="comment">0 1 0 0 0 0 0 1 0</span></span><br><span class="line"><span class="comment">0 0 0 0 1 0 0 0 1</span></span><br><span class="line"><span class="comment">1 0 0 1 0 0 0 1 0</span></span><br><span class="line"><span class="comment">0 1 0 0 0 0 0 0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="负载平衡问题"><a href="#负载平衡问题" class="headerlink" title="负载平衡问题"></a>负载平衡问题</h3><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=x*<span class="number">10</span>+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,Tot=<span class="number">0</span>,Num[<span class="number">10001</span>],Back[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underAbs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x&gt;<span class="number">0</span>?x:-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  freopen(&quot;net.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//  freopen(&quot;net.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Num[i]);</span><br><span class="line">        Tot+=Num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Tot/=N;</span><br><span class="line">    <span class="type">int</span> Ans=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> w=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            Back[j]=Num[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N<span class="number">-1</span>;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            w+=<span class="built_in">underAbs</span>(Back[(i+j)%N+<span class="number">1</span>]-Tot);</span><br><span class="line">            Back[(i+j+<span class="number">1</span>)%N+<span class="number">1</span>]+=Back[(i+j)%N+<span class="number">1</span>]-Tot;</span><br><span class="line">            Back[(i+j)%N+<span class="number">1</span>]=Tot;</span><br><span class="line">        &#125;</span><br><span class="line">        Ans=<span class="built_in">underMin</span>(Ans,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">17 9 14 16 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 建图 </tag>
            
            <tag> 构造 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> Dinic </tag>
            
            <tag> 流 </tag>
            
            <tag> 增广路 </tag>
            
            <tag> 网络 </tag>
            
            <tag> 最小费用最大流 </tag>
            
            <tag> 最小割 </tag>
            
            <tag> 网络流24题 </tag>
            
            <tag> 上下界网络流 </tag>
            
            <tag> ISAP </tag>
            
            <tag> 预流推进 </tag>
            
            <tag> MPM </tag>
            
            <tag> EK </tag>
            
            <tag> 二分图 </tag>
            
            <tag> 二分匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算几何</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/computational-geometry/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/computational-geometry/</url>
      
        <content type="html"><![CDATA[<p>“平面的向量交错生长，织成，忧伤的网。——《膜你抄》”</p><span id="more"></span><h2 id="浮点数-x-定点数"><a href="#浮点数-x-定点数" class="headerlink" title="浮点数 x 定点数"></a>浮点数 x 定点数</h2><p><a href="https://zhuanlan.zhihu.com/p/338588296">定点数详解</a>。</p><p><a href="https://zhuanlan.zhihu.com/p/339949186">浮点数详解</a>。</p><p>总而言之，浮点数表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V=(-1)^S*M*R^E</span><br></pre></td></tr></table></figure><p>其中各个变量的含义如下：</p><ul><li>S：符号位，取值 $0$ 或 $1$，决定一个数字的符号，$0$ 表示正，$1$ 表示负</li><li>M：尾数，用小数表示，例如前面所看到的 $8.345 \times 10^0$，$8.345$ 就是尾数</li><li>R：基数，表示十进制数 $R$ 就是 $10$，表示二进制数 $R$ 就是 $2$</li><li>E：指数，用整数表示，例如前面看到的 $10^{-1}$，$-1$ 即是指数</li></ul><h3 id="精度处理"><a href="#精度处理" class="headerlink" title="精度处理"></a>精度处理</h3><p>一般来说，计算机中存储一个数采用的是二进制，一个 $n$ 位整数将被表示为：</p><p>$x = \sum_{i = 0}^{n - 1} v_i \times 2^{i}$ </p><p>如果是小数，上述公式仍然适用，只是将 $i$ 的范围由 $\mathbb{N}$ 扩大至 $\mathbb{Z}$，但由于 $2$ 的幂与 $10$ 的幂不同，一些 $10$ 进制下的有限小数会变成无限小数，而计算机能够存储的东西是有限的，因此得到的浮点数只是一个近似值。<strong>因此，在做有关浮点数的操作时，一定要考虑精度问题。</strong></p><h3 id="处理浮点数的精度问题"><a href="#处理浮点数的精度问题" class="headerlink" title="处理浮点数的精度问题"></a>处理浮点数的精度问题</h3><p>定义精度，<code>EPS</code> 指希腊字母 $\epsilon$：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> EPS = <span class="number">1e-4</span>;</span><br></pre></td></tr></table></figure><p>比较大小，求一个数的正负时要考虑在精度范围内认为两个数相等：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sign</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(std::<span class="built_in">fabs</span>(x)&lt;EPS) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">comp</span><span class="params">(<span class="type">double</span> x,<span class="type">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(std::<span class="built_in">fabs</span>(x-y)&lt;EPS) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><h3 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h3><p>一般而言，将一个向量表示成一个坐标，如 $t=\left(^3_2\right)$ ，则表示一个向量的起点为 $(0,0)$ ，终点是 $(3,2)$ 。如图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/rgh3mje3.png" alt="img"></p><h3 id="加减法则"><a href="#加减法则" class="headerlink" title="加减法则"></a>加减法则</h3><p>直接加减即可，对于向量 $a=\left(^{x_1}_{y_1}\right),b=\left(^{x_2}_{y_2}\right)$ 有：</p><p>$\vec a\pm \vec b=(x_1\pm x_2,y_1\pm y_2)$</p><h3 id="乘除法则"><a href="#乘除法则" class="headerlink" title="乘除法则"></a>乘除法则</h3><h4 id="数乘"><a href="#数乘" class="headerlink" title="数乘"></a>数乘</h4><p>指的是一个实数（标量）乘上一个向量，即将该向量延长该实数倍即可。</p><h4 id="点乘"><a href="#点乘" class="headerlink" title="点乘"></a>点乘</h4><p>$\vec a\cdot\vec b=|\vec a||\vec b|\cos \theta$ 。</p><p>$(x_1,y_1)\cdot(x_2,y_2)=x_1x_2+y_1y_2$</p><p>几何意义：$\vec a$ 在 $\vec b$ 上的投影长度与 $\vec b$ 的长度的积。</p><h4 id="叉乘"><a href="#叉乘" class="headerlink" title="叉乘"></a>叉乘</h4><p><strong>不满足交换律，满足结合律。</strong></p><p>$|\vec a\times\vec b|=|\vec a||\vec b|\sin\theta$</p><p>$\vec a\times\vec b=-(\vec b\times\vec a)$</p><p>坐标表示：$(x_1,y_1)\times(x_2,y_2)=x_1y_2-x_2y_1$</p><p>几何意义：$\vec{a}$ 与 $\vec{b}$ 形成的平行四边形的有向面积（$\theta$ 带符号），$\vec{a}$ 逆时针转到 $\vec{b}$ 为正。</p><h3 id="代码实现-风格指导Rusun"><a href="#代码实现-风格指导Rusun" class="headerlink" title="代码实现(风格指导Rusun)"></a>代码实现(风格指导Rusun)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载运算符实现</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x,y;<span class="comment">//用坐标表示向量</span></span><br><span class="line">    Vector <span class="keyword">operator</span>+(Vector a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Vector)&#123;x+a.x,y+a.y&#125;;</span><br><span class="line">&#125;<span class="comment">//加法</span></span><br><span class="line">    Vector <span class="keyword">operator</span>-(<span class="type">const</span> Vector &amp;a)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Vector)&#123;x-a.x,y-a.y&#125;</span><br><span class="line">    &#125;<span class="comment">//减法，那2个const和那个&amp;都是卡常用的。</span></span><br><span class="line">    Vector <span class="keyword">operator</span>*(<span class="type">const</span> <span class="type">double</span> &amp;a)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> (Vector)&#123;x*a,y*a&#125;;</span><br><span class="line">    &#125;<span class="comment">//数乘</span></span><br><span class="line">    Vector <span class="keyword">operator</span>/(<span class="type">const</span> <span class="type">double</span> &amp;a)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>(Vector)&#123;x/a,y/a&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span>^(<span class="type">const</span> Vector &amp;a)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x*a.x+y*a.y;</span><br><span class="line">&#125;<span class="comment">//点乘</span></span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span>&amp;(<span class="type">const</span> Vector &amp;a)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x*a.y-a.x*y;</span><br><span class="line">    &#125;<span class="comment">//叉乘</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现-风格指导PigAunt"><a href="#代码实现-风格指导PigAunt" class="headerlink" title="代码实现(风格指导PigAunt)"></a>代码实现(风格指导PigAunt)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用函数实现</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    省略加减和数乘。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">dot</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.x*b.x+a.y*b.y;</span><br><span class="line">    &#125;<span class="comment">//点积</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">cross</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x*b.y-a.y*b.x;</span><br><span class="line">    &#125;<span class="comment">//叉积</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getLength</span><span class="params">(Point a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">dot</span>(a,a));</span><br><span class="line">    &#125;<span class="comment">//取模</span></span><br><span class="line">    <span class="comment">//因为a·a=|a|^2，所以会这样。</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getAngle</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">acos</span>(<span class="built_in">dot</span>(a,b)/<span class="built_in">getLength</span>(a)/<span class="built_in">getLength</span>(b));</span><br><span class="line">    &#125;<span class="comment">//计算向量夹角</span></span><br><span class="line">    <span class="comment">//a·b=|a||b|sinx</span></span><br><span class="line">    <span class="comment">//x=arccos(a·b/(|a||b|))</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">(Point a,Point b,Point c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cross</span>(b-a,c-a);</span><br><span class="line">    &#125;<span class="comment">//求向量构成的平行四边形有向面积（分正负）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点与直线"><a href="#点与直线" class="headerlink" title="点与直线"></a>点与直线</h2><h3 id="直线表达"><a href="#直线表达" class="headerlink" title="直线表达"></a>直线表达</h3><ol><li>点斜式：$ax+by+c=0$</li><li>点向式：$p_0+vt$</li><li>斜截式：$y=kx+b$</li></ol><p><strong>点向式</strong>中，$p=(x_0,y_0)$ 是直线上的一个点，而 $v=\left(^{x_v}_{y_v}\right)$ 是该直线上的一个向量，那么这个直线上的任意一个点都可以用 $p+vt,t\in \mathbb R$ 表示。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">沿用PigAunt的代码风格</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//假设一条直线AB，判断点C是否在AB上，则有ACxBC=0</span></span><br><span class="line">    <span class="function">Point <span class="title">getLineIntersection</span><span class="params">(Point p,Vector v,Point q,Vector w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Vector u=p-q;</span><br><span class="line">        <span class="type">double</span> t=<span class="built_in">cross</span>(w,u)/<span class="built_in">cross</span>(v,w);</span><br><span class="line">        <span class="keyword">return</span> p+v*t;</span><br><span class="line">    &#125;<span class="comment">//求直线交点，cross(v,w)=0则两直线平行（重合）。</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h2><h3 id="最小周长值"><a href="#最小周长值" class="headerlink" title="最小周长值"></a>最小周长值</h3><p>对于一大堆点，我们需要确定一个多边形，使所有点都在多边形内（可以在边上），使得这个多边形周长最短，这就是这个<strong>凸包</strong>。凸包的应用典型就是<a href="https://violeteternal.github.io/Eternity/学习笔记/OI/dp-convex-hull-optimization/"><strong>斜率优化</strong></a></p><h3 id="Andrew-算法"><a href="#Andrew-算法" class="headerlink" title="Andrew 算法"></a>Andrew 算法</h3><p>先给所有点以 $x$ 为第一关键字，$y$ 为第二关键字从小到大排序；然后扫描每个点，看这个点加入后能不能打破原来凸包的性质，如果能，就把原来的点删了；然后将新的点加入。从左往右做一次，我们得到一个上凸壳；从右往左再做一次，我们就得到了一个凸包（已加入的点不再加入），使用向量叉积判断。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">andrew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="built_in">sort</span>(p+<span class="number">1</span>,p+<span class="number">1</span>+cnt);</span><br><span class="line">    <span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">area</span>(p[stk[top<span class="number">-1</span>]],p[stk[top]],p[i])&lt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">area</span>(p[stk[top<span class="number">-1</span>]],p[stk[top]],p[i])&lt;<span class="number">0</span>) use[stk[top--]]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> --top;</span><br><span class="line">        &#125;</span><br><span class="line">        stk[++top]=i;</span><br><span class="line">        use[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    use[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=cnt;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(use[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">area</span>(p[stk[top<span class="number">-1</span>]],p[stk[top]],p[i])&lt;<span class="number">0</span>) --top;</span><br><span class="line">        <span class="comment">//这里不能取0，是为了应对共线的情况。</span></span><br><span class="line">        stk[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><a href="https://www.luogu.com.cn/problem/P3829">洛谷信用卡凸包</a></p><p>就类似于小学做过的一类题，一个多边形周长加上一个圆的周长。将题目给出的数据转化为定点，然后就是凸包的裸题了。补充一个向量旋转的公式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">rotate</span><span class="params">(Point a,<span class="type">double</span> alph)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x*<span class="built_in">cos</span>(alph)+a.y*<span class="built_in">sin</span>(alph),-a.x*<span class="built_in">sin</span>(alph)+a.y*<span class="built_in">cos</span>(alph)&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Talk is<font style="color:white">n’t</font> cheap,<font style="color:white">don’t </font>show me the Code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">4e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,cnt;</span><br><span class="line"><span class="type">double</span> len,wid,rth;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="type">const</span> Point &amp;a)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x-a.x,y-a.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">double</span> x=<span class="number">0</span>,<span class="type">double</span> y=<span class="number">0</span>):<span class="built_in">x</span>(x),<span class="built_in">y</span>(y)&#123;&#125;</span><br><span class="line">&#125;Pt[MAXN],centre[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">cross</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x*b.y-a.y*b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">area</span><span class="params">(Point a,Point b,Point c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(b-a,c-a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">rotate</span><span class="params">(Point a,<span class="type">double</span> alph)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a.x*<span class="built_in">cos</span>(alph)+a.y*<span class="built_in">sin</span>(alph),-a.x*<span class="built_in">sin</span>(alph)+a.y*<span class="built_in">cos</span>(alph)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> theta[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">4</span>;++k)</span><br><span class="line">        &#123;</span><br><span class="line">            Point dis=<span class="built_in">rotate</span>(&#123;dx[k]*len,dy[k]*wid&#125;,-theta[i]);</span><br><span class="line">            Pt[++cnt]=<span class="built_in">Point</span>(centre[i].x+dis.x,centre[i].y+dis.y);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=cnt;++i) printf(&quot;%.2lf %.2lf\n&quot;,Pt[i].x,Pt[i].y);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> stk[MAXN&lt;&lt;<span class="number">1</span>],top;</span><br><span class="line"><span class="type">bool</span> used[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">getDist</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">andrew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="built_in">sort</span>(Pt+<span class="number">1</span>,Pt+<span class="number">1</span>+cnt,cmp);</span><br><span class="line">    top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> res=<span class="built_in">area</span>(Pt[stk[top<span class="number">-1</span>]],Pt[stk[top]],Pt[i]);</span><br><span class="line">            <span class="keyword">if</span>(res&lt;<span class="number">0</span>) used[stk[top--]]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(res==<span class="number">0</span>) --top;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stk[++top]=i;</span><br><span class="line">        used[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    used[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=cnt;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(used[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">area</span>(Pt[stk[top<span class="number">-1</span>]],Pt[stk[top]],Pt[i])&lt;<span class="number">0</span>) --top;</span><br><span class="line">        stk[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=top;++i) res+=<span class="built_in">getDist</span>(Pt[stk[i<span class="number">-1</span>]],Pt[stk[i]]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,res+(<span class="number">2</span>*rth*<span class="built_in">acos</span>(<span class="number">-1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;geo.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;geo.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf&quot;</span>,&amp;wid,&amp;len,&amp;rth);</span><br><span class="line">    wid=(wid<span class="number">-2</span>*rth)/<span class="number">2</span>;</span><br><span class="line">    len=(len<span class="number">-2</span>*rth)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf&quot;</span>,&amp;centre[i].x,&amp;centre[i].y,&amp;theta[i]);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">andrew</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">6.0 2.0 0.0</span></span><br><span class="line"><span class="comment">0.0 0.0 0.0</span></span><br><span class="line"><span class="comment">2.0 -2.0 1.5707963268</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="旋转卡壳"><a href="#旋转卡壳" class="headerlink" title="旋转卡壳"></a>旋转卡壳</h2><p>这玩意儿居然有 $2\times2\times2\times3=24$ 种读法。</p><p>正确读法：$\text{旋}(xu\acute{a}n)\text{转}(zhu\grave an)\text{卡}(qi\check a)\text{壳}(qi\grave ao)$</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>对于一个凸包，其直径则是该凸包内两点的最大距离。可以证明：<strong>这两个点必定在凸包上（边上）</strong>。旋转卡壳则是一种求凸包直径的算法。</p><p>那么，为什么会叫旋转卡壳呢？</p><p>扩句：</p><p>用两条互相平行的直线进行（旋转）并（卡）住凸包形成<strong>对踵点</strong>的（壳）并计算。</p><p>所谓对踵点，就是一组点是当前这两条直线卡住凸包（与凸包相切）的那两个点组成的点对，则是一组对踵点。（可以证明，对于任意一个点，与其组成对踵点的点不超过 $3$ 个，那么对踵点不会超过 $3n$ 个，对踵点对也就不会超过 $\frac{3n}{2}$ 个）</p><p><img src="https://oi-wiki.org/geometry/images/rotating-calipers1.png" alt="img"></p><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>实际上，因为角度是一个区间，内有无数个数，所以让计算机去模拟旋转是不可能的，只会 $TLE$ 到飞起。而我们也会发现，真正有效的只会是当一条旋转直线与凸包的某条边平行时，才会去计算，所谓的旋转卡壳，实际上只是让人脑能够理解罢了。</p><p><img src="https://s3.bmp.ovh/imgs/2022/01/1b0d136e72e18544.gif" alt="img"></p><p>首先使用任何一种凸包算法求出给定所有点的凸包，有着最长距离的点对一定在凸包上。而由于凸包的形状，我们发现，逆时针地遍历凸包上的边，对于每条边都找到离这条边最远的点，那么这时随着边的转动，对应的最远点也在逆时针旋转，不会有反向的情况，这意味着我们可以在逆时针枚举凸包上的边时，记录并维护一个当前最远点，并不断计算、更新答案。</p><p>求出凸包后的数组自然地是按照逆时针旋转的顺序排列，不过要记得提前将最左下角的 $1$ 节点补到数组最后，这样在挨个枚举边 $(i,i+1)$ 时，才能把所有边都枚举到。</p><p>枚举过程中，对于每条边，都检查 $j+1$ 和边 $(i,i+1)$ 的距离是不是比 更大，如果是就将 加一，否则说明 是此边的最优点。判断点到边的距离大小时可以用叉积分别算出两个三角形的面积（如图，黄、蓝两个同底三角形的面积）并直接比较。</p><p><strong>注意</strong>：</p><p>作为一个数组下标喜欢使用 $[1,n]$ 的人，也必须做出取舍，在凸包和旋转卡壳中，使用 $[0,n-1]$ 有几个好处。</p><ol><li>对于单调栈之间，我们会统计两次起点，所以 <code>top</code> 的值会达到 $n+1$ ，则会 $RE$ ，显然。</li><li>在旋转卡壳中有一个操作会执行 <code>j=(j+1)%top</code> ，这样的话，如果单调栈的下标是在 $[0,top-1]$ 的话，就直接执行，而如果是 $[1,top]$ 的话，模就会模出问题。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">rotcal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top&lt;=<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">getDist</span>(Pt[<span class="number">0</span>],Pt[N<span class="number">-1</span>]);</span><br><span class="line">    <span class="type">double</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">2</span>;i&lt;top;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Pir a=Pt[stk[i]],b=Pt[stk[i+<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">area</span>(a,b,Pt[stk[j]])&lt;<span class="built_in">area</span>(a,b,Pt[stk[j+<span class="number">1</span>]])) j=(j+<span class="number">1</span>&gt;=top?<span class="number">0</span>:j+<span class="number">1</span>);</span><br><span class="line">        res=<span class="built_in">max</span>(res,<span class="built_in">max</span>(<span class="built_in">getDist</span>(a,Pt[stk[j]]),<span class="built_in">getDist</span>(b,Pt[stk[j]])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把旋转卡壳理解为当枚举边的时候，距离边最远的点是单调的。</p><p>凸包时间复杂度 $\mathcal O(n\log n)$ ，旋转卡壳时间复杂度 $\mathcal O(n)$ ，总时间复杂度 $\mathcal O(n\log n)$ 。</p><h3 id="以-0-为起点的旋转卡壳代码"><a href="#以-0-为起点的旋转卡壳代码" class="headerlink" title="以 $0$ 为起点的旋转卡壳代码"></a>以 $0$ 为起点的旋转卡壳代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> stk[MAXN&lt;&lt;<span class="number">1</span>],top;</span><br><span class="line"><span class="type">bool</span> use[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">andrew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="built_in">sort</span>(Pt,Pt+N);</span><br><span class="line">    top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">area</span>(Pt[stk[top<span class="number">-2</span>]],Pt[stk[top<span class="number">-1</span>]],Pt[i])&lt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">area</span>(Pt[stk[top<span class="number">-2</span>]],Pt[stk[top<span class="number">-1</span>]],Pt[i])&lt;<span class="number">0</span>)</span><br><span class="line">                use[stk[--top]]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> --top;</span><br><span class="line">        &#125;</span><br><span class="line">        stk[top++]=i;</span><br><span class="line">        use[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    use[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(use[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">area</span>(Pt[stk[top<span class="number">-2</span>]],Pt[stk[top<span class="number">-1</span>]],Pt[i])&lt;=<span class="number">0</span>)</span><br><span class="line">            --top;</span><br><span class="line">        stk[top++]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    --top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">rotcal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top&lt;=<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">getDist</span>(Pt[<span class="number">0</span>],Pt[N<span class="number">-1</span>]);</span><br><span class="line">    <span class="type">double</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">2</span>;i&lt;top;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Pir a=Pt[stk[i]],b=Pt[stk[i+<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">area</span>(a,b,Pt[stk[j]])&lt;<span class="built_in">area</span>(a,b,Pt[stk[j+<span class="number">1</span>]])) j=(j+<span class="number">1</span>&gt;=top?<span class="number">0</span>:j+<span class="number">1</span>);</span><br><span class="line">        res=<span class="built_in">max</span>(res,<span class="built_in">max</span>(<span class="built_in">getDist</span>(a,Pt[stk[j]]),<span class="built_in">getDist</span>(b,Pt[stk[j]])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P1452">某谷模板题</a></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="keyword">using</span> Pir=std::pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line">Pir Pt[MAXN];</span><br><span class="line">Pir <span class="keyword">operator</span>-(Pir &amp;a,Pir &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make_pair</span>(a.fi-b.fi,a.se-b.se);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">cross</span><span class="params">(Pir a,Pir b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.fi*b.se-b.fi*a.se;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">area</span><span class="params">(Pir a,Pir b,Pir c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(b-a,c-a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">getDist</span><span class="params">(Pir a,Pir b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.fi-b.fi)*(a.fi-b.fi)+(a.se-b.se)*(a.se-b.se);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> stk[MAXN&lt;&lt;<span class="number">1</span>],top;</span><br><span class="line"><span class="type">bool</span> use[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">andrew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="built_in">sort</span>(Pt,Pt+N);</span><br><span class="line">    top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">area</span>(Pt[stk[top<span class="number">-2</span>]],Pt[stk[top<span class="number">-1</span>]],Pt[i])&lt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">area</span>(Pt[stk[top<span class="number">-2</span>]],Pt[stk[top<span class="number">-1</span>]],Pt[i])&lt;<span class="number">0</span>)</span><br><span class="line">                use[stk[--top]]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> --top;</span><br><span class="line">        &#125;</span><br><span class="line">        stk[top++]=i;</span><br><span class="line">        use[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    use[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(use[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;=<span class="number">2</span>&amp;&amp;<span class="built_in">area</span>(Pt[stk[top<span class="number">-2</span>]],Pt[stk[top<span class="number">-1</span>]],Pt[i])&lt;=<span class="number">0</span>)</span><br><span class="line">            --top;</span><br><span class="line">        stk[top++]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    --top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">rotcal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top&lt;=<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">getDist</span>(Pt[<span class="number">0</span>],Pt[N<span class="number">-1</span>]);</span><br><span class="line">    <span class="type">double</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">2</span>;i&lt;top;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Pir a=Pt[stk[i]],b=Pt[stk[i+<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">area</span>(a,b,Pt[stk[j]])&lt;<span class="built_in">area</span>(a,b,Pt[stk[j+<span class="number">1</span>]])) j=(j+<span class="number">1</span>&gt;=top?<span class="number">0</span>:j+<span class="number">1</span>);</span><br><span class="line">        res=<span class="built_in">max</span>(res,<span class="built_in">max</span>(<span class="built_in">getDist</span>(a,Pt[stk[j]]),<span class="built_in">getDist</span>(b,Pt[stk[j]])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;geo.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;geo.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;N;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;Pt[i].fi,&amp;Pt[i].se);</span><br><span class="line">    <span class="built_in">andrew</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0lf&quot;</span>,<span class="built_in">rotcal</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="三角剖分"><a href="#三角剖分" class="headerlink" title="三角剖分"></a>三角剖分</h2><p>将一个 $n$ 边形剖分成 $n-2$ 个不相交的三角形，这是从小学说到高中的数学题了。</p><p>参考了 $Dyd$ 的 <a href="https://dyd-true.github.io/2022/01/21/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/">$Blog$</a></p><p>对于一个圆和一个三角形的面积交，则会分成四种情况（读者可以自行模拟）：</p><ol><li>圆把三角形包住，则面积交就是三角形面积；</li><li>有 $1$ 个点在圆外，则面积是一个小三角形面积和一个小扇形的面积和；</li><li>有 $2$ 个点在圆外且其边与圆相离，则面积是一个扇形；</li><li>有 $2$ 个点在圆外且其边与圆相割，则面积是 $2$ 个小扇形加上一个三角形的面积和。</li></ol><p>但是，多边形与圆面积交呢？情况繁杂，所以把这个多边形分成很多个三角形来算也行。</p><h3 id="叉积运用：多边形面积分"><a href="#叉积运用：多边形面积分" class="headerlink" title="叉积运用：多边形面积分"></a>叉积运用：多边形面积分</h3><p>对于一个多边形的面积（知道所有点的坐标），最好的方法是怎么算？</p><p>平面上任取一点 $p$ ，画出 $p$ 与多边形顶点的向量，则 $S=\sum_{I,J\in N}\vec{PI}\times\vec{PJ}$ ，如果点 $P$ 在多边形内很好证明，但是在多边形外也是成立的，因为叉积的结果是有向的，所以当把所有和全部算完，会发现正好会把多余部分减去，这个方法同样适用于凹多边形，读者可以自行探取。</p><h2 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h2><h3 id="矩形面积并"><a href="#矩形面积并" class="headerlink" title="矩形面积并"></a>矩形面积并</h3><p>线段树进阶知识，详见<a href="https://violeteternal.github.io/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/scan-line/">扫描线</a></p><p><img src="https://oi-wiki.org/geometry/images/scanning.svg" alt="img"></p><h3 id="三角面积并"><a href="#三角面积并" class="headerlink" title="三角面积并"></a>三角面积并</h3><p>三角形并不会平行于平面直角坐标系，那么我们用一条 $y$ 轴线，只要有顶点（或者交点）就划一次，全部划分，然后按照梯形（广义）面积来算。时间复杂度是 $\mathcal O(n^3)$ 。</p><p>听起来很简单，但是实施在代码上实际上十分困难。有很多需要讲的点。先咕着（还没学懂）。</p><h3 id="辛普森积分"><a href="#辛普森积分" class="headerlink" title="辛普森积分"></a>辛普森积分</h3><h3 id="自适应辛普森积分"><a href="#自适应辛普森积分" class="headerlink" title="自适应辛普森积分"></a>自适应辛普森积分</h3><h3 id="圆的面积并"><a href="#圆的面积并" class="headerlink" title="圆的面积并"></a>圆的面积并</h3><h2 id="平面最近点对"><a href="#平面最近点对" class="headerlink" title="平面最近点对"></a>平面最近点对</h2><h3 id="智慧法"><a href="#智慧法" class="headerlink" title="智慧法"></a>智慧法</h3><blockquote><p>我们充分发扬人类智慧</p></blockquote><p>正解分治，跟我使用<strong>智慧法</strong>有什么关系？</p><blockquote><p>在平面最近点对（加强版）里最高赞题解写道：</p><p>“我们充分发扬人类智慧：<br>将所有点全部绕原点旋转同一个角度，然后按 $x$ 坐标排序根据数学直觉，在随机旋转后，答案中的两个点在数组中肯定不会离得太远<br>所以我们只取每个点向后的 $5$ 个点来计算答案这样速度快得飞起，在 $n=10^6$时都可以在 $1s$ 内卡过”</p><p>这开启了智慧法过本问题（<del>恶心出题人</del>）的新时代！</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
            <tag> 凸包 </tag>
            
            <tag> 叉积 </tag>
            
            <tag> 点积 </tag>
            
            <tag> 旋转卡壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高斯消元</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/gauss-jordan-elimination/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/gauss-jordan-elimination/</url>
      
        <content type="html"><![CDATA[<p>“一列一列的消失，所有绝铭将会被破解。”</p><span id="more"></span><h2 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h2><h3 id="消元法说明"><a href="#消元法说明" class="headerlink" title="消元法说明"></a>消元法说明</h3><p>消元法是将方程组中的一方程的未知数用含有另一未知数的代数式表示，并将其带入到另一方程中，这就消去了一未知数，得到一解；或将方程组中的一方程倍乘某个常数加到另外一方程中去，也可达到消去一未知数的目的。消元法主要用于二元一次方程组的求解。</p><h3 id="消元法理论的核心"><a href="#消元法理论的核心" class="headerlink" title="消元法理论的核心"></a>消元法理论的核心</h3><p>消元法理论的核心主要如下：</p><ul><li>两方程互换，解不变；</li><li>一方程乘以非零数 ，解不变；</li><li>一方程乘以数 加上另一方程，解不变。</li></ul><h3 id="高斯消元法思想概念"><a href="#高斯消元法思想概念" class="headerlink" title="高斯消元法思想概念"></a>高斯消元法思想概念</h3><p>德国数学家高斯对消元法进行了思考分析，得出了如下结论：</p><ul><li>在消元法中，参与计算和发生改变的是方程中各变量的系数；</li><li>各变量并未参与计算，且没有发生改变；</li><li>可以利用系数的位置表示变量，从而省略变量；</li><li>在计算中将变量简化省略，方程的解不变。</li></ul><h3 id="高斯消元五步骤法"><a href="#高斯消元五步骤法" class="headerlink" title="高斯消元五步骤法"></a>高斯消元五步骤法</h3><p>高斯消元法在将增广矩阵化为最简形后对于自由未知量的赋值，需要掌握线性相关知识，且赋值存在人工经验的因素，使得在学习过程中有一定的困难，将高斯消元法划分为五步骤，从而提出五步骤法，内容如下：</p><ol><li>增广矩阵行初等行变换为行最简形；</li><li>还原线性方程组；</li><li>求解第一个变量；</li><li>补充自由未知量；</li><li>列表示方程组通解。</li></ol><hr><p>在说这些之后，包括 OI-Wiki 和《进阶指北》，我也都没有搞懂，所以建议像我这样蒟蒻的人，还是多背背模板好。</p><hr><h2 id="约旦消元法"><a href="#约旦消元法" class="headerlink" title="约旦消元法"></a>约旦消元法</h2><p>大致思路如下：</p><ol><li><p>选择一个尚未被选过的未知数作为主元，选择一个包含这个主元的方程。</p></li><li><p>将这个方程主元的系数化为 $1$ 。</p></li><li><p>通过加减消元，消掉其它方程中的这个未知数。</p></li><li><p>重复以上步骤，直到把每一行都变成只有一项有系数。</p></li></ol><p>我们用矩阵表示每一项系数以及结果。</p><details>    <summary>洛谷模板题</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> Eps=<span class="number">1e-6</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">double</span> Matrix[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">underFabs</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x&gt;<span class="number">0</span>?x:-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underSwap</span><span class="params">(<span class="type">double</span> &amp;a,<span class="type">double</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> t=a;a=b;b=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">underGauss</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">underFabs</span>(Matrix[j][i])&gt;<span class="built_in">underFabs</span>(Matrix[t][i])) t=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N+<span class="number">1</span>;++j) <span class="built_in">underSwap</span>(Matrix[t][j],Matrix[i][j]);</span><br><span class="line">        <span class="keyword">if</span>(!Matrix[i][i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j!=i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">double</span> temp=Matrix[j][i]/Matrix[i][i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=i+<span class="number">1</span>;k&lt;=N+<span class="number">1</span>;++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    Matrix[j][k]-=Matrix[i][k]*temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=N;i&gt;<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            Matrix[i][N]-=Matrix[i][j]*Matrix[j][N];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  freopen(&quot;Gauss.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//  freopen(&quot;Gauss.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N+<span class="number">1</span>;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;Matrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> t=<span class="built_in">underGauss</span>();</span><br><span class="line">    <span class="keyword">if</span>(!t) <span class="built_in">printf</span>(<span class="string">&quot;No Solution&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,Matrix[i][N+<span class="number">1</span>]/Matrix[i][i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 3 4 5</span></span><br><span class="line"><span class="comment">1 4 7 3</span></span><br><span class="line"><span class="comment">9 3 2 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 高斯消元 </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> 线性方程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《云边有个小卖部》——希望和悲伤，都是一道光</title>
      <link href="/Eternity/%E8%AE%B0%E9%9A%8F%E5%BD%B1%E8%90%BD/cloud-with-me/"/>
      <url>/Eternity/%E8%AE%B0%E9%9A%8F%E5%BD%B1%E8%90%BD/cloud-with-me/</url>
      
        <content type="html"><![CDATA[<p>作者；张嘉佳</p><p>作品名：《云边有个小卖部》</p><span id="more"></span><p>不知道，上次因为看书而哭是多久了……</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>从小与外婆相依为命的刘十三，因为妈妈留言让他好好读书考上名牌大学，找个好姑娘结婚，好好生活，于是笨拙不聪明的刘十三努力学习，废寝忘食，最后悲哀地发现“原来世界上有很多事情，不是你有计划、有毅力就能做到的”。追寻着远方和梦想，刘十三背起行囊，离开了故乡，在大城市里摸爬滚打、失恋又失业、被情敌嘲笑，喝得酩酊大醉后被外婆开着老旧拖拉机，奔波一天一夜“绑架”回到了他的故乡。</p><p>刘十三就这样稀里糊涂地回到故乡，与童年时认识的女孩程霜重逢。程霜热情地为刘十三一年要卖出 1001 份保险出谋划策；和他带着小女孩球球假装一家三口一起玩耍；与他见证了牛大田和秦小贞的爱情故事。同时，他们自己的爱情也逐渐升温。</p><p>可刘十三的命运总是如此曲折：原来外婆早在半年前就知道自己患癌症，已是晚期，最多只有半年时间，如今再也撑不住了。在邻里和程霜的帮忙下，刘十三办好外婆的后事，在除夕夜顶风冒雪 8 个小时把指引亡魂的灯笼挂到高高的山顶。紧接着，程霜也要离开他，到医院动手术，临走前她对刘十三许下一生的承诺。外婆带着对外孙的爱走了，程霜带着对他的期待走了，他带着希望，坚强地活着。</p></blockquote><h2 id="读后"><a href="#读后" class="headerlink" title="读后"></a>读后</h2><blockquote><p> “悲伤的，并不是这本书讲的有多么曲折，而是你把自己带入了故事。”——马也</p></blockquote><p>正值一个很微妙的时间段，阅读到了这本书。其实，在阅读完“外婆的拖拉机”一章之后，我并没有太大的波动，只是，这些话语后来一遍又一遍地出现，才让我最终忍不住，在宁静的正午哭了出来。</p><p>真的是一本比较好的小说，文笔恰到好处，所谓平俗也被化为乡土气息。虽然被吐槽成是给多情小女生看的恋爱悲剧，但我看完之后，也甘愿去做一个多情的小女生。</p><h2 id="随记"><a href="#随记" class="headerlink" title="随记"></a>随记</h2><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 记随影落 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻小说 </tag>
            
            <tag> 恋爱 </tag>
            
            <tag> 治愈 </tag>
            
            <tag> 致郁 </tag>
            
            <tag> 张嘉佳 </tag>
            
            <tag> 乡村 </tag>
            
            <tag> 亲情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B.O.O.K</title>
      <link href="/Eternity/Until-The-End/my-reading-life/"/>
      <url>/Eternity/Until-The-End/my-reading-life/</url>
      
        <content type="html"><![CDATA[<p>用来记录一些我读过，但是又不太想写笔记的书。</p><span id="more"></span><h3 id="《告白》"><a href="#《告白》" class="headerlink" title="《告白》"></a>《告白》</h3><p>$date:2022.6.27$</p><p>经典中国式言情小说，结尾稍微有些 $\text{BE}$ 。</p><h3 id="《不哭不哭，痛痛飞走吧》"><a href="#《不哭不哭，痛痛飞走吧》" class="headerlink" title="《不哭不哭，痛痛飞走吧》"></a>《不哭不哭，痛痛飞走吧》</h3><p>三秋缒的另一本，可惜最近时间紧（懒了），不太想写。</p><p>$date:2022.7.14$</p>]]></content>
      
      
      <categories>
          
          <category> Until The End </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Z函数（扩展Kmp）</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/z-func-kmp-ex/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/z-func-kmp-ex/</url>
      
        <content type="html"><![CDATA[<p>“$\text{Plan Z never fail!}$”</p><span id="more"></span><h2 id="Z-函数"><a href="#Z-函数" class="headerlink" title="Z 函数"></a>Z 函数</h2><p>对于一个长度为 $len$ 的字符串 $s$ ，有一个长度为 $len$ 的数组称之为 $z$ ，其中 $z[i]$ 表示 $s[1..len]$ 与 $s[i..len]$ 的最长公共前缀 $LCP$ ，那么 $z$ 被称为 $s$ 的 $z$ 函数。</p><p>用文字叙述，即是 $z[i]$ 表示的是字符串 $s$ 与 $s$ 以 $i$ 开头的后缀字串的最长公共前缀长度。</p><h3 id="一些需要了解的"><a href="#一些需要了解的" class="headerlink" title="一些需要了解的"></a>一些需要了解的</h3><p>在有些领域，有这样一个特殊定义 $z[1]=0$ ，即 $s[1..len]$ 与 $s[1..len]$ 的 $LCP$ 值为 $0$ 。但是，以普遍理性而言，这个定义是赘余的，但是，对于国际上现在通用的求 $z[]$ 的办法，对于求 $z[i]$ ，我们需要使用到 $z[0..i-1]$ 。而其中，所需要的，即是 $z[0]=0$ 。但是，在洛谷上的模板题，需要记入的答案是 $z[1]=length(s)$ 。那么，挺玄学的。</p><h3 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h3><p>时间复杂度 $O(n^2)$ 。当然就是每一个后缀都一一比较即可。</p><h3 id="线性时间求解"><a href="#线性时间求解" class="headerlink" title="线性时间求解"></a>线性时间求解</h3><p>这个算法，国外称之为 $Z\ Algorithm$ ，国内则更偏向于 $Kmp.Ex$ 。原因在于此算法的做法和用处都与 $Kmp$ 相类似。</p><p>我们给出一个新的定义称为 <strong>Z-box</strong> ，对于一个 $i$ 而言，我们将区间 $[i,i+z[i]-1]$ 称为是 $i$ 的匹配段，即 <strong>Z-box</strong> 。</p><p>在求解 Z 函数时，我们需要维护右端点最右值的匹配段。为了方便，记作区间 $[l,r]$ 。因为区间 $[l,r]$ 是匹配段，那么， $s[l..r]$ 肯定是 $s$ 的前缀子串。在计算 $z[i]$ 时，我们需要保证 $l\le i$ 。且初始时， $l=r=0$ 。</p><p>在 $z[i]$ 的计算过程中具有：</p><ul><li><p>如果 $i\le r$ ，那么根据 $[l,r]$ 的定义有 $s[i,r]=s[i-l,r-l]$ ，因此 $\min(z[i-l+1],r-i+1)\leq z[i]$ 。这时：</p><ol><li>若 $z[i-l]\leq r-i+1$ ，则 $z[i]=z[i-l]$ 。 </li><li>否则 $z[i-l]\geq r-i+1$ ，这时令 $z[i]=r-i+1$ ，然后暴力枚举下一个字符扩展 $z[i]$ 直到不能扩展为止。</li></ol></li><li><p>如果 $i&gt;r$ ，则从 $s[i]$ 开始暴力求 $z[i]$ 。</p></li><li>求出 $z[i]$ 之后，如果 $i+z[i]-1&gt;r$ ，就更新 $[l,r]$ ，令 $l=i,r=i+z[i]-1$ 即可。</li></ul><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>内层函数满足将 $r$ 向后移，而 $r&lt;n-1$ ，共执行 $n$ 次。外层线性遍历，同样是 $n$ 次，总时间复杂度 $\mathcal O(n)$ 。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>详见 <a href="https://oi-wiki.org/string/z-func/#_6">OI Wiki</a></p><details>    <summary>洛谷模板题</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS=<span class="number">2e7</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> Str_a[MAXS],Str_b[MAXS];</span><br><span class="line"><span class="type">int</span> Z[MAXS],P[MAXS],Len_a,Len_b;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">getZ_Func</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> *z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>); </span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i) z[i]=<span class="number">0</span>;</span><br><span class="line">    Z[<span class="number">1</span>]=len;   <span class="comment">//特殊判定</span></span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>,l=<span class="number">0</span>,r=<span class="number">0</span>;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=r&amp;&amp;z[i-l+<span class="number">1</span>]&lt;r-i+<span class="number">1</span>) z[i]=z[i-l+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            z[i]=<span class="built_in">max</span>(<span class="number">0</span>,r-i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(i+z[i]&lt;=len&amp;&amp;s[z[i]+<span class="number">1</span>]==s[i+z[i]]) ++z[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i+z[i]<span class="number">-1</span>&gt;r) l=i,r=i+z[i]<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;       <span class="comment">//自匹配</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ex_Kmp</span><span class="params">(<span class="type">char</span> *s1,<span class="type">int</span> *z,<span class="type">char</span> *s2,<span class="type">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">getZ_Func</span>(s2,z);</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i) p[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>,l=<span class="number">0</span>,r=<span class="number">0</span>;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=r&amp;&amp;z[i-l+<span class="number">1</span>]&lt;r-i+<span class="number">1</span>) p[i]=z[i-l+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            p[i]=<span class="built_in">max</span>(<span class="number">0</span>,r-i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(i+p[i]&lt;=len&amp;&amp;s1[i+p[i]]==s2[p[i]+<span class="number">1</span>]) ++p[i];</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(i+p[i]<span class="number">-1</span>&gt;r) l=i,r=i+p[i]<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;       <span class="comment">//模式串匹配</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;Kmp-Ex.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;Kmp-Ex.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,Str_a+<span class="number">1</span>,Str_b+<span class="number">1</span>);</span><br><span class="line">    Len_a=<span class="built_in">strlen</span>(Str_a+<span class="number">1</span>),Len_b=<span class="built_in">strlen</span>(Str_b+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">getZ_Func</span>(Str_b,Z);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Len_b;++i) ans^=<span class="number">1ll</span>*i*(Z[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="built_in">ex_Kmp</span>(Str_a,Z,Str_b,P);</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=Len_a;++i) ans^=<span class="number">1ll</span>*i*(P[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">aaaabaa</span></span><br><span class="line"><span class="comment">aaaaa</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> 字符串 </tag>
            
            <tag> Kmp </tag>
            
            <tag> 后缀函数 </tag>
            
            <tag> 扩展Kmp </tag>
            
            <tag> Z函数 </tag>
            
            <tag> 前缀函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论分块&amp;狄利克雷卷积</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/sqrt-decomposition-and-dirichlet-product/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/sqrt-decomposition-and-dirichlet-product/</url>
      
        <content type="html"><![CDATA[<p>万事俱备，则时空将会反演。</p><span id="more"></span><h2 id="数论分块"><a href="#数论分块" class="headerlink" title="数论分块"></a>数论分块</h2><p>字面意思，在数学论理中进行分块处理。一般用于快速计算含有向下取整和式的题。当可以在 $\mathcal O(1)$ 内计算出 $f(r)-f(l)$ 或者已经预处理除了 $f$ 的前缀和时，数论分块就能够使用 $\mathcal O(\sqrt n)$ 的时间内计算出类似于 $\sum\limits^{n}_{i=1}f(i)g(\lfloor \frac{n}{i} \rfloor)$ 的和式的值。</p><h3 id="富比尼定理-Fubini’s-theorem"><a href="#富比尼定理-Fubini’s-theorem" class="headerlink" title="富比尼定理(Fubini’s theorem)"></a>富比尼定理(Fubini’s theorem)</h3><p>将 $\lfloor\frac{n}{i}\rfloor$ 打包计算。</p><p>又称“算两次”，以意大利数学家圭多·富比尼（Guido Fubini）命名。 富比尼定理的积分形式：只要二重积分 $ \int\int|f(x,y)|dxdy$ 有界，则可以逐次计算二重积分，并且可以交换逐次积分的顺序。 积分号也是特殊的求和号，因此在一般求和中，富比尼定理往往呈现为更换计数顺序，即交换两个求和号。 组合数学中的富比尼定理表现为，用两种不同的方法计算同一个量，从而建立相等关系。这种方法在反比例函数上有很好的解释：</p><p><img src="https://oi-wiki.org/math/number-theory/images/sqrt-decomposition.png" alt=""></p><p>在区间 $[1,11]$ 中，根据 $y=\lfloor\frac{11}{x}\rfloor$ 的答案不同，被分成了 $5$ 块， $5$ 块整点的最大纵坐标都相同，</p><h3 id="引理-Ⅰ"><a href="#引理-Ⅰ" class="headerlink" title="引理 Ⅰ"></a>引理 Ⅰ</h3><p>$\forall a,b,c\in\mathbb Z,\lfloor\frac{a}{bc}\rfloor=\lfloor\frac{\lfloor\frac{a}{b}\rfloor}{c}\rfloor$ ，证明详见 <a href="https://oi-wiki.org/math/number-theory/sqrt-decomposition/#_1">OI-Wiki</a></p><h3 id="引理-Ⅱ"><a href="#引理-Ⅱ" class="headerlink" title="引理 Ⅱ"></a>引理 Ⅱ</h3><p>$\forall n\in \mathbb N_+,|\{\lfloor\frac{n}{d}\rfloor|d\in\mathbb N_+,d\leq n\}|\leq\lfloor2\sqrt n\rfloor$ ，证明详见 OI-Wiki</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>对于常数 $n$ ，使 $\lfloor\frac{n}{i}\rfloor=\lfloor\frac{n}{j}\rfloor$ 成立的最大满足 $i\leq j\leq n$ 的 $j$ 的值为 $\lfloor\frac{n}{\lfloor\frac{n}{i}\rfloor}\rfloor$ 。即值 $\lfloor\frac{n}{i}\rfloor$ 所在块的右端点为 $\lfloor\frac{n}{\lfloor\frac{n}{i}\rfloor}\rfloor$ 。</p><h3 id="分块加速"><a href="#分块加速" class="headerlink" title="分块加速"></a>分块加速</h3><p>那么，就如同对数组进行分块一样，对于每一个块的计算，我们就直接用块值乘以个数计算即可，用数论分块加速时间，降低时间复杂度。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="UVA11526"><a href="#UVA11526" class="headerlink" title="UVA11526"></a><a href="https://www.luogu.com.cn/problem/UVA11526">UVA11526</a></h4><p>题意显而易见了。直接分块计算即可。记得开 <code>long long</code> 。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">H</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    ll l=<span class="number">1</span>,r;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        r=n/(n/l);</span><br><span class="line">        res+=<span class="number">1ll</span>*(r-l+<span class="number">1</span>)*(n/l);</span><br><span class="line">        l=r+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;sqrt-decomposition.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;sqrt-decomposition.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">H</span>(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h4 id="Luogu-2261"><a href="#Luogu-2261" class="headerlink" title="Luogu 2261"></a><a href="https://www.luogu.com.cn/problem/P2261">Luogu 2261</a></h4><p>这道题需要一点特判。</p><p>我们知道 $k\bmod p =k-\lfloor\frac{k}{p}\rfloor\times p$ ，那么，我们需要求的式子也可以转化为：</p><p>$ans=\sum_{i=1}^n k\bmod i=\sum_{i=1}^n k-\lfloor\frac{k}{i}\rfloor\times i=nk-\sum_{i=1}^n \lfloor\frac{n}{i}\rfloor\times i$</p><p>然后就转化为了数论分块的经典各式了。</p><p>对于这道题的特判，因为 $n$ 和 $k $ 的大小关系是不清楚的，而因为 $l\leq n$ 可能会存在 $\lfloor\frac{k}{l}\rfloor$ 为 $0$ 的情况，所以需要特判。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll N,K,res,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;math.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;math.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,K);</span><br><span class="line">    ll l=<span class="number">1</span>,r;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(K/l) r=<span class="built_in">min</span>(N,K/(K/l));</span><br><span class="line">        <span class="keyword">else</span> r=N;</span><br><span class="line">        res+=<span class="number">1ll</span>*(l+r)*(r-l+<span class="number">1</span>)*(K/l)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">// printf(&quot;[%d,%d]=%d\n&quot;,l,r,res);</span></span><br><span class="line">        l=r+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=N*K-res;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">k/2+1...k</span></span><br><span class="line"><span class="comment">0...(k+1)/2-1</span></span><br><span class="line"><span class="comment">l...r</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="N-维数论分块"><a href="#N-维数论分块" class="headerlink" title="N 维数论分块"></a>N 维数论分块</h3><p>不太能了解，也不大可能会考（刀我），如果感兴趣的可以自行去 OI Wiki 上浏览。</p><h2 id="狄利克雷函数"><a href="#狄利克雷函数" class="headerlink" title="狄利克雷函数"></a>狄利克雷函数</h2><h3 id="狄利克雷生成函数"><a href="#狄利克雷生成函数" class="headerlink" title="狄利克雷生成函数"></a>狄利克雷生成函数</h3><p>一个数列的<strong>狄利克雷生成函数</strong>（被称为 $DGF$ ） 被定义为：</p><script type="math/tex; mode=display">\tilde{F}(x)=\sum\limits_{i\ge 1}\frac{f_i}{i^x}</script><p>$f_i$ 是一个从 $\mathbb N_+$ 到 $\mathbb Z$ 的函数，该生成函数与一个数论函数相对应，规定 $f_1=1$ 。</p><p>如果该函数是积性函数，（<strong>积性函数</strong>定义：对于所有互质的整数 $a$ 和 $b$ 有性质 $f(ab)=f(a)f(b)$ 的数论函数）即满足 $\forall i\perp j,f(ij)=f(i)\times f(j)$ ，则 $\tilde{F}(x)$ 可以由质数及其幂来表达，记作：（令 $P$ 为全体质数集合）</p><script type="math/tex; mode=display">\tilde{F}(x)=\prod_{p\in P}(1=\frac{f(p)}{p^x}+\frac{f(p)^2}{p^{2x}}+...)</script><h3 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 块状链表，块状数组，分块 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 数论分块 </tag>
            
            <tag> 狄利克雷卷积 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 莫比乌斯函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 CSP-S 第二轮</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220618-csp-s/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220618-csp-s/</url>
      
        <content type="html"><![CDATA[<p>考场成绩： $95pt+0+48pt+0=143pt$</p><p>现成绩： $100pt+0+100pt+0=200pt$</p><span id="more"></span><h2 id="P7913-CSP-S-2021-廊桥分配"><a href="#P7913-CSP-S-2021-廊桥分配" class="headerlink" title="P7913 [CSP-S 2021] 廊桥分配"></a><a href="https://www.luogu.com.cn/problem/P7913">P7913 [CSP-S 2021] 廊桥分配</a></h2><p>实力贪心，当初真考的时候在我们学校，我当时坐在 <code>B003</code> 时有一份代码，我就替那个人交了，结果那人爆零。然后洛谷就一直留着这道题，后来清题的时候就把这道题给做了。所以留有印象。</p><p>分开计算，首先将使用 $1\sim n$ 的国内廊桥能最多停多少和 $1\sim n$ 的国外廊桥能停放多少。然后计算答案则是 $ans=\max(res_{in}[i]+res_{out}[n-i]),0\leq i\leq n$ 。这一步是能够想到的。</p><p>对于计算过程，使用两个优先队列，一个 $lQueue$ 来记录一个二元组 $(x,y)$ 表示当前停靠飞机的离开时间和停靠的廊桥编号。另一个 $wQueue$ 来记录当前空闲的廊桥编号，至于为什么是优先队列，因为整个过程秉承<strong>“先到先得”</strong>的原则，且让廊桥编号尽可能小。最后统计前缀和即可。</p><font style="color:white">好吧，事实上，今天上午并没有做出了这道题，只是翻出了之前的代码，然后贺了上去，虽然之后在摆烂的时候把代码完全搞懂了。但总归不是自己做出来的。</font> <details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;Pir;</span><br><span class="line"><span class="type">int</span> N,M_in,M_out;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Air</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arrive,leave;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> ain(i) In[i].arrive</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> aout(i) Out[i].arrive</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> lin(i) In[i].leave</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> lout(i) Out[i].leave</span></span><br><span class="line">&#125;In[MAXM],Out[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(Air a,Air b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.arrive&lt;b.arrive;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Res_in[MAXM],Res_out[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc</span><span class="params">(Air *t,<span class="type">int</span> M,<span class="type">int</span> *res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;Pir,vector&lt;Pir&gt;,greater&lt;Pir&gt; &gt;lQ;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt; &gt;wQ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) wQ.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!lQ.<span class="built_in">empty</span>()&amp;&amp;t[i].arrive&gt;=lQ.<span class="built_in">top</span>().first)</span><br><span class="line">&#123;</span><br><span class="line">wQ.<span class="built_in">push</span>(lQ.<span class="built_in">top</span>().second);</span><br><span class="line">lQ.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(wQ.<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> Dist=wQ.<span class="built_in">top</span>();</span><br><span class="line">wQ.<span class="built_in">pop</span>();</span><br><span class="line">++res[Dist];</span><br><span class="line">lQ.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(t[i].leave,Dist));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) res[i]+=res[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//     freopen(&quot;airport.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//     freopen(&quot;airport.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M_in,M_out);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M_in;++i) <span class="built_in">read</span>(<span class="built_in">ain</span>(i),<span class="built_in">lin</span>(i));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M_out;++i) <span class="built_in">read</span>(<span class="built_in">aout</span>(i),<span class="built_in">lout</span>(i));</span><br><span class="line">    <span class="built_in">sort</span>(In+<span class="number">1</span>,In+<span class="number">1</span>+M_in,cmp);</span><br><span class="line">    <span class="built_in">sort</span>(Out+<span class="number">1</span>,Out+<span class="number">1</span>+M_out,cmp);</span><br><span class="line">    <span class="built_in">calc</span>(In,M_in,Res_in);</span><br><span class="line">    <span class="built_in">calc</span>(Out,M_out,Res_out);</span><br><span class="line">    <span class="type">int</span> Ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> res=Res_in[i]+Res_out[N-i];</span><br><span class="line">    <span class="built_in">checkMax</span>(Ans,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 5 4</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">3 8</span></span><br><span class="line"><span class="comment">6 10</span></span><br><span class="line"><span class="comment">9 14</span></span><br><span class="line"><span class="comment">13 18</span></span><br><span class="line"><span class="comment">2 11</span></span><br><span class="line"><span class="comment">4 15</span></span><br><span class="line"><span class="comment">7 17</span></span><br><span class="line"><span class="comment">12 16</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="P7915-CSP-S-2021-回文"><a href="#P7915-CSP-S-2021-回文" class="headerlink" title="P7915 [CSP-S 2021] 回文"></a><a href="https://www.luogu.com.cn/problem/P7915">P7915 [CSP-S 2021] 回文</a></h2><p>考场暴力，居然只是 T 和 M ，比较顺利。</p><h3 id="暴力思路"><a href="#暴力思路" class="headerlink" title="暴力思路"></a>暴力思路</h3><p>直接 $dfs$ 或者 $bfs$ ，对于一些优化，我后来思考了一下。因为我们要查找的是字典序最小的，所以肯定是优先 $L$ 才会使用 $R$ 。而对于 $bfs$ 而言，大部分的答案都是一并算出来的，所以在比较答案是必须要全部比较，十分消耗时间。而在使用 $dfs$ 的时候，我们可以在前几次搜索时就搜出了一个备选答案，然后可以在中间段的时候就比较当前搜出的答案和原有答案，减少之后的搜索，可能会有一定优化。</p><p><del>后来发现两个方法的得分是一样的</del>。</p><p>还有，<strong>我在此以磐岩起誓，再不用 string</strong>。考场上用了 <code>string</code> ，然后就快快乐乐地 $CE$ 了。起飞， $Dev-C++$ 还没报错。</p><p>一定要用字符数组，方便又快捷。</p><details>    <summary>48pt by dfs</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Test,N,Num[MAXN],pos1,pos2;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Que</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l1,r1,l2,r2;</span><br><span class="line">string res;</span><br><span class="line"><span class="built_in">Que</span>(<span class="type">int</span> l1=<span class="number">0</span>,<span class="type">int</span> r1=<span class="number">0</span>,<span class="type">int</span> l2=<span class="number">0</span>,<span class="type">int</span> r2=<span class="number">0</span>,string res=<span class="string">&quot;\0&quot;</span>):</span><br><span class="line"><span class="built_in">l1</span>(l1),<span class="built_in">r1</span>(r1),<span class="built_in">l2</span>(l2),<span class="built_in">r2</span>(r2),<span class="built_in">res</span>(res)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">string ans;</span><br><span class="line"><span class="type">int</span> pos[MAXN],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l1,<span class="type">int</span> r1,<span class="type">int</span> l2,<span class="type">int</span> r2,string res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!ans.<span class="built_in">empty</span>()&amp;&amp;res[res.<span class="built_in">size</span>()<span class="number">-1</span>]&gt;ans[res.<span class="built_in">size</span>()<span class="number">-1</span>]) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(res.<span class="built_in">size</span>()==N/<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">string str=res;</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> l=l1+<span class="number">1</span>,r=r1<span class="number">-1</span>,ls=<span class="number">0</span>,rs=N+<span class="number">1</span>,Cnt=N/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Cnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i<span class="number">-1</span>]==<span class="string">&#x27;L&#x27;</span>) pos[++tot]=Num[++ls];</span><br><span class="line"><span class="keyword">else</span> pos[++tot]=Num[--rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Cnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> now=N+<span class="number">1</span>-(i+Cnt);</span><br><span class="line"><span class="keyword">if</span>(Num[l]==pos[now])</span><br><span class="line">&#123;</span><br><span class="line">str+=<span class="string">&quot;L&quot;</span>;</span><br><span class="line">++l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Num[r]==pos[now])</span><br><span class="line">&#123;</span><br><span class="line">str+=<span class="string">&quot;R&quot;</span>;</span><br><span class="line">--r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(str.<span class="built_in">size</span>()!=N) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(ans.<span class="built_in">empty</span>()) ans=str;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i]&gt;str[i])</span><br><span class="line">&#123;</span><br><span class="line">ans=str;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans[i]&lt;str[i]) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Num[l2<span class="number">-1</span>]==Num[l1+<span class="number">1</span>]) <span class="built_in">dfs</span>(l1+<span class="number">1</span>,r1,l2<span class="number">-1</span>,r2,res+<span class="string">&quot;L&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(Num[r2+<span class="number">1</span>]==Num[l1+<span class="number">1</span>]) <span class="built_in">dfs</span>(l1+<span class="number">1</span>,r1,l2,r2+<span class="number">1</span>,res+<span class="string">&quot;L&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(Num[l2<span class="number">-1</span>]==Num[r1<span class="number">-1</span>]) <span class="built_in">dfs</span>(l1,r1<span class="number">-1</span>,l2<span class="number">-1</span>,r2,res+<span class="string">&quot;R&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(Num[r2+<span class="number">1</span>]==Num[r1<span class="number">-1</span>]) <span class="built_in">dfs</span>(l1,r1<span class="number">-1</span>,l2,r2+<span class="number">1</span>,res+<span class="string">&quot;R&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//     freopen(&quot;palin.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//     freopen(&quot;palin.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(Test);</span><br><span class="line">    <span class="keyword">while</span>(Test--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    ans.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="built_in">sizeof</span>(pos));</span><br><span class="line">    N&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Num[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Num[i]==Num[<span class="number">1</span>]&amp;&amp;i!=<span class="number">1</span>) pos1=i;</span><br><span class="line"><span class="keyword">if</span>(Num[i]==Num[N]&amp;&amp;i!=N) pos2=i;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,N+<span class="number">1</span>,pos1,pos1,<span class="string">&quot;L&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(ans.<span class="built_in">empty</span>()) <span class="built_in">dfs</span>(<span class="number">0</span>,N,pos2,pos2,<span class="string">&quot;R&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(ans.<span class="built_in">empty</span>()) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">4 1 2 4 5 3 1 2 3 5</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3 2 1 2 1 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><details>    <summary>48pt by bfs</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Test,N,Num[MAXN],pos1,pos2;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Que</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l1,r1,l2,r2;</span><br><span class="line">string res;</span><br><span class="line"><span class="built_in">Que</span>(<span class="type">int</span> l1=<span class="number">0</span>,<span class="type">int</span> r1=<span class="number">0</span>,<span class="type">int</span> l2=<span class="number">0</span>,<span class="type">int</span> r2=<span class="number">0</span>,string res=<span class="string">&quot;\0&quot;</span>):</span><br><span class="line"><span class="built_in">l1</span>(l1),<span class="built_in">r1</span>(r1),<span class="built_in">l2</span>(l2),<span class="built_in">r2</span>(r2),<span class="built_in">res</span>(res)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">string ans;</span><br><span class="line"><span class="type">int</span> pos[MAXN],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;Que&gt;Q;</span><br><span class="line">Q.<span class="built_in">push</span>(<span class="built_in">Que</span>(<span class="number">1</span>,N+<span class="number">1</span>,pos1,pos1,<span class="string">&quot;L&quot;</span>));</span><br><span class="line">Q.<span class="built_in">push</span>(<span class="built_in">Que</span>(<span class="number">0</span>,N,pos2,pos2,<span class="string">&quot;R&quot;</span>));</span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">Que u=Q.<span class="built_in">front</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(!ans.<span class="built_in">empty</span>()&amp;&amp;u.res[u.res.<span class="built_in">size</span>()<span class="number">-1</span>]&gt;ans[u.res.<span class="built_in">size</span>()<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(u.res.<span class="built_in">size</span>()==N/<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">string str=u.res;</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> l=u.l1+<span class="number">1</span>,r=u.r1<span class="number">-1</span>,ls=<span class="number">0</span>,rs=N+<span class="number">1</span>,Cnt=N/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Cnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i<span class="number">-1</span>]==<span class="string">&#x27;L&#x27;</span>) pos[++tot]=Num[++ls];</span><br><span class="line"><span class="keyword">else</span> pos[++tot]=Num[--rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Cnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> now=N+<span class="number">1</span>-(i+Cnt);</span><br><span class="line"><span class="keyword">if</span>(Num[l]==pos[now])</span><br><span class="line">&#123;</span><br><span class="line">str+=<span class="string">&quot;L&quot;</span>;</span><br><span class="line">++l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Num[r]==pos[now])</span><br><span class="line">&#123;</span><br><span class="line">str+=<span class="string">&quot;R&quot;</span>;</span><br><span class="line">--r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(str.<span class="built_in">size</span>()!=N) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(ans.<span class="built_in">empty</span>()) ans=str;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i]&gt;str[i])</span><br><span class="line">&#123;</span><br><span class="line">ans=str;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans[i]&lt;str[i]) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u.l1&gt;u.l2||u.r1&lt;u.r2) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(Num[u.l2<span class="number">-1</span>]==Num[u.l1+<span class="number">1</span>]) Q.<span class="built_in">push</span>(<span class="built_in">Que</span>(u.l1+<span class="number">1</span>,u.r1,u.l2<span class="number">-1</span>,u.r2,u.res+<span class="string">&quot;L&quot;</span>));</span><br><span class="line"><span class="keyword">if</span>(Num[u.r2+<span class="number">1</span>]==Num[u.l1+<span class="number">1</span>]) Q.<span class="built_in">push</span>(<span class="built_in">Que</span>(u.l1+<span class="number">1</span>,u.r1,u.l2,u.r2+<span class="number">1</span>,u.res+<span class="string">&quot;L&quot;</span>));</span><br><span class="line"><span class="keyword">if</span>(Num[u.l2<span class="number">-1</span>]==Num[u.r1<span class="number">-1</span>]) Q.<span class="built_in">push</span>(<span class="built_in">Que</span>(u.l1,u.r1<span class="number">-1</span>,u.l2<span class="number">-1</span>,u.r2,u.res+<span class="string">&quot;R&quot;</span>));</span><br><span class="line"><span class="keyword">if</span>(Num[u.r2+<span class="number">1</span>]==Num[u.r1<span class="number">-1</span>]) Q.<span class="built_in">push</span>(<span class="built_in">Que</span>(u.l1,u.r1<span class="number">-1</span>,u.l2,u.r2+<span class="number">1</span>,u.res+<span class="string">&quot;R&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//     freopen(&quot;palin.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//     freopen(&quot;palin.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(Test);</span><br><span class="line">    <span class="keyword">while</span>(Test--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    ans.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="built_in">sizeof</span>(pos));</span><br><span class="line">    N&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Num[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Num[i]==Num[<span class="number">1</span>]&amp;&amp;i!=<span class="number">1</span>) pos1=i;</span><br><span class="line"><span class="keyword">if</span>(Num[i]==Num[N]&amp;&amp;i!=N) pos2=i;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">if</span>(ans.<span class="built_in">empty</span>()) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">4 1 2 4 5 3 1 2 3 5</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3 2 1 2 1 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><p>还是得明知，我们所求的方案必是字典序最小的。而且每当我们取一个数，就会有另一个数被定下。且有 $b_1=\{a_1,a_{2n}\}$ ，那么对于这两个数的数目的另一个数，记作 $a_x$ ，则必有 $b_{2n}=a_x$ ，这样想的话其实应该会很容易，读者可以自行模拟。</p><p>那么，这道题的正解，就是<strong>四指针</strong>法。</p><p>用作两个指针 $l_1,r_1$ 表示 $b$ 数组的头指针指在的是 $a$ 数组的左端和右端。也就表示区间 $[l_1,r_1]$ 还没有被取到过。而另外两个指针 $l_2,r_2$ 则是 $b$ 数组同理的尾指针，表示区间 $[l_2,r_2]$ 之内的数正好是已经被取到过的数的末尾，可以认为是类似于双向 bfs 那样运作的。那么，整个过程满足 $l_1\leq l_2\leq r_2\leq r_1$，当 $l_1=l_2,r_1=r_2$ 时，表示所有数都被取完，则统计答案。</p><p>那如何字典序最小呢，因为一次会记录两个位置，所以有 $LL&lt;LR&lt;RL&lt;RR$ 。对应的情况可以自行思考。当然，前提是转移的两个位置记为 $nxt_1,nxt_2$ 必定满足 $a_{nxt_1}=a_{nxt_2},nxt_1\neq nxt_2$ ，才能够转移，否则不存在答案。我们可以用一个数组 $back[i]$ 表示位置 $i$ 的数 $a_i$ 值的另一个位置在 $back[i]$ 那么，当 $back[nxt_1]=nxt_2$ 或者 $back[nxt_2]=nxt_1$ 时，即可转移。当然，上述两个条件必然是同时满足的，易证。</p><p>这道题的复杂度应该是 $\mathcal{O}(kn)$ ，其中，$k$ 是不超过 $10$ 的常数。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Test,N,Num[MAXN];</span><br><span class="line"><span class="type">int</span> pos[MAXN],back[MAXN];</span><br><span class="line"><span class="type">char</span> ans[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">work</span><span class="params">(<span class="type">int</span> l1,<span class="type">int</span> r1,<span class="type">int</span> l2,<span class="type">int</span> r2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N/<span class="number">2</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l1&lt;l2&amp;&amp;back[l1]==l2)</span><br><span class="line">&#123;</span><br><span class="line">ans[i]=ans[N-i+<span class="number">1</span>]=<span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">++l1,--l2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l1&lt;r2&amp;&amp;back[l1]==r2)</span><br><span class="line">&#123;</span><br><span class="line">ans[i]=<span class="string">&#x27;L&#x27;</span>,ans[N-i+<span class="number">1</span>]=<span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">++l1,++r2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r1&gt;l2&amp;&amp;back[r1]==l2)</span><br><span class="line">&#123;</span><br><span class="line">ans[i]=<span class="string">&#x27;R&#x27;</span>,ans[N-i+<span class="number">1</span>]=<span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">--r1,--l2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r1&gt;r2&amp;&amp;back[r1]==r2)</span><br><span class="line">&#123;</span><br><span class="line">ans[i]=ans[N-i+<span class="number">1</span>]=<span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">--r1,++r2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*printf(&quot;%d %d %d %d\n&quot;,l1,r1,l2,r2);</span></span><br><span class="line"><span class="comment">for(int i=1;i&lt;=N;++i) printf(&quot;%c&quot;,ans[i]);</span></span><br><span class="line"><span class="comment">puts(&quot;&quot;);*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x) <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ans[i]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> posL,posR;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Num[i]==Num[<span class="number">1</span>]&amp;&amp;i!=<span class="number">1</span>) posL=i;</span><br><span class="line"><span class="keyword">if</span>(Num[i]==Num[N]&amp;&amp;i!=N) posR=i;</span><br><span class="line"><span class="keyword">if</span>(!pos[Num[i]]) pos[Num[i]]=i;</span><br><span class="line"><span class="keyword">else</span> back[i]=pos[Num[i]],back[pos[Num[i]]]=i;</span><br><span class="line">&#125;</span><br><span class="line">ans[<span class="number">1</span>]=ans[N]=<span class="string">&#x27;L&#x27;</span>;</span><br><span class="line"><span class="type">bool</span> flag=<span class="built_in">work</span>(<span class="number">2</span>,N,posL<span class="number">-1</span>,posL+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">ans[<span class="number">1</span>]=<span class="string">&#x27;R&#x27;</span>,ans[N]=<span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">flag=<span class="built_in">work</span>(<span class="number">1</span>,N<span class="number">-1</span>,posR<span class="number">-1</span>,posR+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">print</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">print</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//     freopen(&quot;palin.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//     freopen(&quot;palin.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(Test);</span><br><span class="line">    <span class="keyword">while</span>(Test--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    N&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Num[i]);</span><br><span class="line"><span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="built_in">sizeof</span>(pos));</span><br><span class="line"><span class="built_in">memset</span>(back,<span class="number">0</span>,<span class="built_in">sizeof</span>(back));</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">4 1 2 4 5 3 1 2 3 5</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3 2 1 2 1 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 双端队列 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典树</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/trie/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/trie/</url>
      
        <content type="html"><![CDATA[<p>“当树的轮廓开始浮现，应有的字样也随之而来。”</p><span id="more"></span><p>学习笔记补完计划</p><hr><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><p>中文名<strong>字典树</strong>，也称<strong>前缀树</strong>，是<strong>AC 自动机</strong>的组成部分之二。（另一个是 <a href="https://violeteternal.github.io/Eternity/学习笔记/OI/kmp/">KMP</a> ），用于匹配字符串前缀。大概样子如下图所示：</p><p><img src="https://oi-wiki.org/string/images/trie1.png" alt=""></p><p>对于很多个模式串 $s_i$ ，如果其前缀有相同的部分，则我们就不需要重新创立一些新的节点，而是从两个不同字符串开始不同的地方延申出另一个节点即可。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);<span class="comment">//根节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Tre[u][s[i]]) Tre[u][s[i]]=++Cnt;<span class="comment">//建立新节点</span></span><br><span class="line">        u=Tre[u][s[i]];<span class="comment">//往后跳</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>该代码主要查询到是当前字符串是否在模式串中做过前缀子串。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Tre[u][s[i]]) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//不存在</span></span><br><span class="line">        u=Tre[u][s[i]];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="弱化版"><a href="#弱化版" class="headerlink" title="弱化版"></a><a href="https://www.luogu.com.cn/problem/P2580">弱化版</a></h3><p>如上，多了一个 <code>REPEAT</code> 操作。将每一个名字的最后一个字母的位置记为 $End[u]=id$ ，然后每次到达时判断 $vis[End[u]]$ 是否到达过，而判断是 <code>REPEAT</code> 还是 <code>RIGHT</code> 。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> Root,Tot;</span><br><span class="line"><span class="type">bool</span> End[<span class="number">500001</span>*<span class="number">27</span>];</span><br><span class="line"><span class="type">int</span> Son[<span class="number">500001</span>][<span class="number">27</span>];</span><br><span class="line"><span class="type">char</span> str[<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInsert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> U=Root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;str[i];++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Son[U][str[i]-<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            Son[U][str[i]-<span class="string">&#x27;a&#x27;</span>]=++Tot;</span><br><span class="line">        &#125;</span><br><span class="line">        U=Son[U][str[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underCheck</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> U=Root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;str[i];++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Son[U][str[i]-<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;WRONG\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!str[i+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(End[Son[U][str[i]-<span class="string">&#x27;a&#x27;</span>]])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;REPEAT\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                End[Son[U][str[i]-<span class="string">&#x27;a&#x27;</span>]]=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;OK\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        U=Son[U][str[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,M;</span><br><span class="line">    Root=Tot=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;str+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">underInsert</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;str+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">underCheck</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="加强版"><a href="#加强版" class="headerlink" title="加强版"></a><a href="https://www.luogu.com.cn/problem/P8306">加强版</a></h3><p>多了大写字母和数字。所以在建树时需要多建一点（小心爆栈）。当然，如果不太清楚会有多少种情况也是可以用 <code>map</code> 的。（这道题 <code>map</code> 会炸，亲测），因为多组数据，所以要预处理，这道题甚至卡了 <code>memset</code> ，所以就需要手动赋值。<del>本题不卡常</del>。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS=<span class="number">3e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Test,N,Q,Cnt,End[MAXS];</span><br><span class="line"><span class="type">int</span> Tre[MAXS][<span class="number">71</span>],Total;</span><br><span class="line">std::map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;Idx;</span><br><span class="line"><span class="type">char</span> Str[MAXS];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Tre[u][Idx[s[i]]]) Tre[u][Idx[s[i]]]=++Cnt;</span><br><span class="line">        u=Tre[u][Idx[s[i]]];</span><br><span class="line">        ++End[u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Tre[u][Idx[s[i]]]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        u=Tre[u][Idx[s[i]]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> End[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;trie.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;trie.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(Test);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c=<span class="string">&#x27;A&#x27;</span>;c&lt;=<span class="string">&#x27;Z&#x27;</span>;++c) Idx[c]=++Total;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;c&lt;=<span class="string">&#x27;z&#x27;</span>;++c) Idx[c]=++Total;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c=<span class="string">&#x27;0&#x27;</span>;c&lt;=<span class="string">&#x27;9&#x27;</span>;++c) Idx[c]=++Total; </span><br><span class="line">    <span class="keyword">while</span>(Test--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(N,Q);Cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,Str+<span class="number">1</span>),<span class="built_in">insert</span>(Str);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Q;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,Str+<span class="number">1</span>),<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(Str));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=Cnt;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            End[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">70</span>;++j)</span><br><span class="line">                Tre[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">fusufusu</span></span><br><span class="line"><span class="comment">fusu</span></span><br><span class="line"><span class="comment">anguei</span></span><br><span class="line"><span class="comment">fusu</span></span><br><span class="line"><span class="comment">anguei</span></span><br><span class="line"><span class="comment">kkksc</span></span><br><span class="line"><span class="comment">5 2</span></span><br><span class="line"><span class="comment">fusu</span></span><br><span class="line"><span class="comment">Fusu</span></span><br><span class="line"><span class="comment">AFakeFusu</span></span><br><span class="line"><span class="comment">afakefusu</span></span><br><span class="line"><span class="comment">fusuisnotfake</span></span><br><span class="line"><span class="comment">Fusu</span></span><br><span class="line"><span class="comment">fusu</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">998244353</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="CF1312G"><a href="#CF1312G" class="headerlink" title="CF1312G"></a><a href="https://www.luogu.com.cn/problem/CF1312G">CF1312G</a></h3><p>按题意建 trie 树，并进行 dp 。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Tre[MAXN&lt;&lt;<span class="number">1</span>][<span class="number">27</span>],N,K;</span><br><span class="line"><span class="type">char</span> str[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> Delta,query[MAXN],dp[MAXN];</span><br><span class="line"><span class="type">bool</span> End[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sk</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val,id;</span><br><span class="line">    <span class="built_in">Sk</span>(<span class="type">int</span> v=<span class="number">0</span>,<span class="type">int</span> i=<span class="number">0</span>):<span class="built_in">val</span>(v),<span class="built_in">id</span>(i)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">stack&lt;Sk&gt;S;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Search</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(S.<span class="built_in">empty</span>()||dp[u]-Delta&lt;S.<span class="built_in">top</span>().val) S.<span class="built_in">push</span>(<span class="built_in">Sk</span>(dp[u]-Delta,u));</span><br><span class="line">    Delta+=End[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">25</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Tre[u][i]) <span class="keyword">continue</span>;</span><br><span class="line">        dp[Tre[u][i]]=dp[u]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!S.<span class="built_in">empty</span>()&amp;&amp;End[Tre[u][i]])</span><br><span class="line">            dp[Tre[u][i]]=<span class="built_in">min</span>(dp[Tre[u][i]],S.<span class="built_in">top</span>().val+Delta+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Search</span>(Tre[u][i]); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!S.<span class="built_in">empty</span>()&amp;&amp;S.<span class="built_in">top</span>().id==u) S.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;trie.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;trie.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);</span><br><span class="line">        Tre[x][str[<span class="number">1</span>]-<span class="string">&#x27;a&#x27;</span>]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(K);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=K;++i) <span class="built_in">read</span>(query[i]),End[query[i]]=<span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Search</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=K;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dp[query[i]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">0 i</span></span><br><span class="line"><span class="comment">1 q</span></span><br><span class="line"><span class="comment">2 g</span></span><br><span class="line"><span class="comment">0 k</span></span><br><span class="line"><span class="comment">1 e</span></span><br><span class="line"><span class="comment">5 r</span></span><br><span class="line"><span class="comment">4 m</span></span><br><span class="line"><span class="comment">5 h</span></span><br><span class="line"><span class="comment">3 p</span></span><br><span class="line"><span class="comment">3 e</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">8 9 1 10 6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="01-Trie"><a href="#01-Trie" class="headerlink" title="01-Trie"></a>01-Trie</h2><p>顾名思义，每一个结点至多有 $2$ 个儿子，一个表示 $1$ ，一个表示 $0$ 。可以用来处理很多与位运算有关的题。</p><h3 id="最长异或路径"><a href="#最长异或路径" class="headerlink" title="最长异或路径"></a><a href="https://www.luogu.com.cn/problem/P4551">最长异或路径</a></h3><p>首先应该知道一些关于位运算的公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x^0=x,x^x=0</span><br></pre></td></tr></table></figure><p>那么，异或运算满足差分性，对于 $d(l,r)$ ，我们可以化成 $d(1,l)\ xor\ d(1,r)$ 来进行预处理以达到 $\mathcal O(1)$ 的复杂度来查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1^1=0,1^0=1,0^1=1,0^0=0</span><br></pre></td></tr></table></figure><p>根据异或的性质，我们需要在所有结果中找到位数不相同最多且尽量在高位的两个，但是逐二比较的时间复杂度过高，必须更换形式：</p><p>01-trie 树可以解决这个问题。</p><p>我们将每一个异或值变成一个仅含 $01$ 的字符串并添加到 trie 树里（从高位往低位以满足答案偏大）。对于这些答案，如果有相异的值，则统计入答案，否则继续查找，这样把每一个值都查找一遍其对应值，最后取最大即可。</p><p>时间复杂度是线性的，但带有常数，约为 $\mathcal O(30n)$ 。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Tree</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Tree</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Tree</span>(Head[v],u,w);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Xor[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dpTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        Xor[v]=Xor[x]^Edge[e].val;</span><br><span class="line">        <span class="built_in">dpTree</span>(v,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Tre[MAXN][<span class="number">2</span>],Idx,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);i;i&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> v=x&amp;i;</span><br><span class="line">        <span class="keyword">if</span>(!Tre[u][v]) Tre[u][v]=++Idx;</span><br><span class="line">        u=Tre[u][v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>,u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);i;i&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> v=x&amp;i;</span><br><span class="line">        <span class="keyword">if</span>(Tre[u][!v]) res+=i,u=Tre[u][!v];</span><br><span class="line">        <span class="keyword">else</span> u=Tre[u][v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;01-trie.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;01-trie.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,u,v,w;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dpTree</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">Insert</span>(Xor[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(Xor[i]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">2 3 4</span></span><br><span class="line"><span class="comment">2 4 6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="可持久化-Trie"><a href="#可持久化-Trie" class="headerlink" title="可持久化 Trie"></a>可持久化 Trie</h2><p>其思想和主席树是有类似的，对于原有的部分直接牵引，而无需新建结点来浪费空间。</p><p>建树步骤（插入字符串 $s$ ）：</p><ol><li>设当前树的根节点为 $rt$ ，令 $p=rt,i=0$ ；</li><li>建立新的节点 $q$ ，并执行 $rt’=q$ ；</li><li>若 $p\ne 0$ ，则有 $Trie[q][c]=Trie[p][c]$ ；</li><li>建立新的节点 $q’$ ，令 $Trie[q][s_i]=q’$ 。即除了 $s_i$ 的指针不同，$p$ 和 $q$ 保持一致；</li><li>令 $p=Trie[p][s_i],q=Trie[q][s_i],i=i+1$ ；</li><li>重复步骤 $3\sim 5$ 直到字符串遍历完成。</li></ol><p>构建可持久化 $\text{Trie}$ 树所需的空间和时间复杂度都是字符串总长度的线性函数。</p><h3 id="最大异或和"><a href="#最大异或和" class="headerlink" title="最大异或和"></a><a href="https://www.luogu.com.cn/problem/P4735">最大异或和</a></h3><p>对于查询，很明显有 $a[p]\ xor\ a[p+1]\ xor…\ xor\ a[N]\ xor\ x=s[p-1]\ xor\ s[N]\ xor\ x$ 的性质。</p><p>然后使用类似于 $\text{01-Trie}$ 的方法将所有的 $s$ 都插入到树中，查询其最大值，但是要满足于 $l\le p\le r$ 的条件，所以考虑可持久化。</p><p><del>余下的我也没学懂，贺过去的，想学的自己看题解吧。qwq</del></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">6e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M;</span><br><span class="line"><span class="type">int</span> Trie[MAXN*<span class="number">24</span>][<span class="number">2</span>],End[MAXN*<span class="number">24</span>];</span><br><span class="line"><span class="type">int</span> S[MAXN],Rt[MAXN],Idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> k,<span class="type">int</span> p,<span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        End[q]=i;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> c=S[i]&gt;&gt;k&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p) Trie[q][c^<span class="number">1</span>]=Trie[p][c^<span class="number">1</span>];</span><br><span class="line">    Trie[q][c]=++Idx;</span><br><span class="line">    <span class="built_in">Insert</span>(i,k<span class="number">-1</span>,Trie[p][c],Trie[q][c]);</span><br><span class="line">    End[q]=<span class="built_in">max</span>(End[Trie[q][<span class="number">0</span>]],End[Trie[q][<span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> val,<span class="type">int</span> k,<span class="type">int</span> inf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;<span class="number">0</span>) <span class="keyword">return</span> S[End[now]]^val;</span><br><span class="line">    <span class="type">int</span> c=val&gt;&gt;k&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(End[Trie[now][c^<span class="number">1</span>]]&gt;=inf)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(Trie[now][c^<span class="number">1</span>],val,k<span class="number">-1</span>,inf);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(Trie[now][c],val,k<span class="number">-1</span>,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> opt[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;trie.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;trie.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M);</span><br><span class="line">    End[<span class="number">0</span>]=<span class="number">-1</span>;Rt[<span class="number">0</span>]=++Idx;</span><br><span class="line">    <span class="built_in">Insert</span>(<span class="number">0</span>,<span class="number">23</span>,<span class="number">0</span>,Rt[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x);</span><br><span class="line">        S[i]=S[i<span class="number">-1</span>]^x;</span><br><span class="line">        Rt[i]=++Idx;</span><br><span class="line">        <span class="built_in">Insert</span>(i,<span class="number">23</span>,Rt[i<span class="number">-1</span>],Rt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> Qx;<span class="built_in">read</span>(Qx);</span><br><span class="line">            Rt[++N]=++Idx;</span><br><span class="line">            S[N]=S[N<span class="number">-1</span>]^Qx;</span><br><span class="line">            <span class="built_in">Insert</span>(N,<span class="number">23</span>,Rt[N<span class="number">-1</span>],Rt[N]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> Ql,Qr,Qx;<span class="built_in">read</span>(Ql,Qr,Qx);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(Rt[Qr<span class="number">-1</span>],Qx^S[N],<span class="number">23</span>,Ql<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">2 6 4 3 6</span></span><br><span class="line"><span class="comment">A 1 </span></span><br><span class="line"><span class="comment">Q 3 5 4 </span></span><br><span class="line"><span class="comment">A 4</span></span><br><span class="line"><span class="comment">Q 5 7 0 </span></span><br><span class="line"><span class="comment">Q 3 6 6 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> 构造 </tag>
            
            <tag> Trie树 </tag>
            
            <tag> 字典树 </tag>
            
            <tag> 字典图 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
            <tag> 字符串匹配 </tag>
            
            <tag> 01-Trie </tag>
            
            <tag> 可持久化Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动机&amp;最小表示法</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/automaton/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/automaton/</url>
      
        <content type="html"><![CDATA[<p>“能不能 $ \text{AC} $ 我不知道，自动倒是挺自动的。”</p><span id="more"></span><h2 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h2><h3 id="同构字符串"><a href="#同构字符串" class="headerlink" title="同构字符串"></a>同构字符串</h3><p>对于一个字符串 $S$ ，如果存在另一个字符串满足 $S_1\neq S$ ，但是将 $S$ 与 $S_1$ 无限循环之后的母串相同，则称 $S$ 与 $S_1$ 为同构字符串。如下：</p><p>$abca,bcaa,caab,aabc$ 则为该串的 $4$ 个循环同构字符串。</p><h3 id="字符串的最小表示"><a href="#字符串的最小表示" class="headerlink" title="字符串的最小表示"></a>字符串的最小表示</h3><p>对于一个字符串 $S[1\sim n]$ 与其所有的循环同构字符串中字典序最小的一个，称之为 $S$ 的最小表示。则对于上述循环同构字符串而言，其最小表示则为 $aabc$ 。</p><p>那么，怎么求最小表示呢？</p><hr><p>很显然的一种思路是将这 $N$ 个字符串构造出来，然后逐一比较，这是最朴素的办法。时间复杂度会退化到 $\mathcal O(n^2)$ ，是极度不明智的做法。</p><p>我们可以使用<strong>指针扫描法</strong>，两两进行比对，当我们比较 $s[i]$ 和 $s[j]$ 时 ，直接向后扫描，依次取出 $k=0,1,2…,n$ 直到 $s[i+k]\neq s[j+k]$ ，然后进行比较。</p><p>那么，当 $s[i+k]\neq s[j+k]$ 时，如果 $s[i+k]&gt;s[j+k]$ ，我们就可以知道 $s[i]$ 不会成为最小表示，因为 $s[j]&gt;s[i]$ 是必然的。同理，我们也可以推出 $\forall 1\leq p\leq k,s[i+p]$ 都不会成为最小表示，因为这些字符串都包含了 $s[i+k]$ 并且满足 $s[i+k]&gt;s[j+k]$ ，所以可以直接排除这些字符串的比较，也就可以直接执行 <code>i=i+k+1;</code> 一步。同样的，当 $s[i+k]&lt;s[j+k]$ 时，执行 <code>j=j+k+1;</code> 即可。而 $ans=\min(i,j)$ 中的 $ans$ 即使最小表示字符串的头指针。</p><p>对于其复杂度，因为运行的限制条件在于 $i\leq n,j\leq n$ ，而 $i,j$ 必有其一在每一次运行中前进至少一步，则有 $i,j$ 总共移动次数不会超过 $2n$ ，那同理，时间复杂度就不会超过 $\mathcal O(n)$ ，我们就可以在线性时间内解决掉这个问题。</p><p>当然，为了不漏掉所有的字符串，我们需要在开始对字符串进行扩倍处理。</p><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(val[i]),val[i+N]=val[i];</span><br><span class="line"><span class="keyword">while</span>(i&lt;=N&amp;&amp;j&lt;=N)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;N&amp;&amp;val[i+k]==val[j+k];++k);</span><br><span class="line">    <span class="keyword">if</span>(k==N) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(val[i+k]&gt;val[j+k])</span><br><span class="line">    &#123;</span><br><span class="line">        i=i+k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==j) ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        j=j+k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==j) ++j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="built_in">min</span>(i,j);</span><br></pre></td></tr></table></figure><p>对于 <code>if(k==N) break;</code> 的解释，是指当前字符串存在循环节，且 $i,j$ 恰好处于两个不同循环节的同一位置，导致之后的匹配全部成功。显然的，因为我们进行了扩倍，所以，当前字符串必定存在循环节且循环长度为 $n$ ，如果还尚不是很明白，读者可以自行纸上模拟，我想，最小表示法的纸上模拟应该还是比较简单的。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="Luogu-P1368"><a href="#Luogu-P1368" class="headerlink" title="Luogu P1368"></a><a href="https://www.luogu.com.cn/problem/P1368">Luogu P1368</a></h4><p>将字符串转化为数组，其余不变。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">3e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,val[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;string.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;string.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(val[i]),val[i+N]=val[i];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">2</span>,k;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=N&amp;&amp;j&lt;=N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;N&amp;&amp;val[i+k]==val[j+k];++k);</span><br><span class="line">        <span class="keyword">if</span>(k==N) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(val[i+k]&gt;val[j+k])</span><br><span class="line">        &#123;</span><br><span class="line">            i=i+k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==j) ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j=j+k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==j) ++j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="built_in">min</span>(i,j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=ans;l&lt;ans+N;++l) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,val[l]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="自动机"><a href="#自动机" class="headerlink" title="自动机"></a>自动机</h2><p>前汁芝士：图论。</p><p>自动机，一般指“确定有限状态自动机”（称之为 <strong>DFA</strong> ）。<a href="https://oi-wiki.org/string/automaton/">OI Wiki</a>上的解释大概是：</p><blockquote><p>首先理解一下自动机是用来干什么的：自动机是一个对信号序列进行判定的数学模型。</p><p>这句话涉及到的名词比较多，逐一解释一下。“信号序列”是指一连串有顺序的信号，例如字符串从前到后的每一个字符、数组从 1 到 n 的每一个数、数从高到低的每一位等。“判定”是指针对某一个命题给出或真或假的回答。有时我们需要对一个信号序列进行判定。一个简单的例子就是判定一个二进制数是奇数还是偶数，较复杂的例子例如判定一个字符串是否回文，判定一个字符串是不是某个特定字符串的子序列等等。</p><p>自动机的工作原理和地图很类似。假设你在你家，然后你从你家到学校，按顺序经过了很多路口。每个路口都有岔路，而你在所有这些路口的选择就构成了一个序列。</p><p>例如，你的选择序列是“家门 -&gt; 右拐 -&gt; 萍水西街 -&gt; 尚园街 -&gt; 古墩路 -&gt; 地铁站 -&gt; 下宁桥”，那你按顺序经过的路口可能是“家 -&gt; 家门口 -&gt; 萍水西街竞舟北路口 -&gt; 萍水西街尚圆街路口 -&gt; 尚园街古墩路口 -&gt; 古墩路中 -&gt; 三坝地铁站 -&gt; 下宁桥地铁站”。可以发现，上学的选择序列不止这一个。同样要去地铁站，你还可以从竞舟北路绕道，或者横穿文鼎苑抄近路。</p><p>而我们如果找到一个选择序列，就可以在地图上比划出这个选择序列能不能去学校。比如，如果一个选择序列是“家门 -&gt; 右拐 -&gt; 萍水西街 -&gt; 尚园街 -&gt; 古墩路 -&gt; 地铁站 -&gt; 钱江路 -&gt; 四号线站台 -&gt; 联庄”，那么它就不会带你去同一个学校，但是仍旧可能是一个可被接受的序列，因为目标地点可能不止一个。</p><p>也就是说，我们通过这个地图和一组目的地，将信号序列分成了三类，一类是无法识别的信号序列（例如“家门 -&gt; ???”），一类是能去学校的信号序列，另一类是不能的信号序列。我们将所有合法的信号序列分成了两类，完成了一个判定问题。</p><p>既然自动机是一个数学模型，那么显然不可能是一张地图。对地图进行抽象之后，可以简化为一个有向图。因此，自动机的结构就是一张有向图。</p><p>而自动机的工作方式和流程图类似，不同的是：自动机的每一个结点都是一个判定结点；自动机的结点只是一个单纯的状态而非任务；自动机的边可以接受多种字符（不局限于 T 或 F）。</p><p>从起始结点开始，从高到低接受这个数的二进制序列，然后看最终停在哪里。如果最终停在红圈结点，则是偶数，否则不是。</p><p>如果需要判定一个有限的信号序列和另外一个信号序列的关系（例如另一个信号序列是不是某个信号序列的子序列），那么常用的方法是针对那个有限的信号序列构建一个自动机。这个在学习 KMP 的时候会讲到。</p><p>需要注意的是，自动机只是一个 <strong>数学模型</strong>，而 <strong>不是算法</strong>，也 <strong>不是数据结构</strong>。实现同一个自动机的方法有很多种，可能会有不一样的时空复杂度。</p><p>接下来你可以选择继续看自动机的形式化定义，也可以去学习 <a href="https://oi-wiki.org/string/kmp/">KMP</a>、<a href="https://oi-wiki.org/string/ac-automaton/">AC 自动机</a> 或 <a href="https://oi-wiki.org/string/sam/">SAM</a>。</p></blockquote><h3 id="形式化定义"><a href="#形式化定义" class="headerlink" title="形式化定义"></a>形式化定义</h3><ol><li>字符集 $\sum$ ，指该自动机能且仅能输入这些字符。</li><li>状态集合 $Q$ ，如果把 DFA 看做是一个有向图，那么 $Q$ 则是图上点的集合。</li><li>起始状态 $start$ ，满足 $start\in Q$ ，字面意思。</li><li>接受状态集合 $F$ ，满足 $F\subseteq Q$ ，似乎是一种特殊状态。</li><li>转移函数 $\delta$ ，可以看做是有向图的边，而边权是一个字母 $c$ ，走过这条边，则会在字符串后加上一个字符 $c$ 。</li></ol><p>总而言之，自动机的学习并不在于自动机本身，而是以自动机为后缀名的一系列数据结构的学习。</p><hr><h2 id="AC自动机-AC-automaton"><a href="#AC自动机-AC-automaton" class="headerlink" title="AC自动机(AC-automaton)"></a>AC自动机(AC-automaton)</h2><p><del>说实话，我一直以为这是一个可以帮我自动 AC 的机器。</del>天底下哪有比这还强的算法？？？</p><p>言归正传， <strong>AC 自动机</strong>是一种多模式串匹配算法。可以自行去了解一下<a href="https://oi-wiki.org/string/automaton/">自动机</a>，反正我是没看太懂。用机房冬神的话来说，<strong>AC 自动机就是在 Trie 树上实现 KMP </strong>。那么，前汁芝士当然就是 Trie 树和 <a href="https://violeteternal.github.io/Eternity/学习笔记/OI/kmp/">KMP</a> 啦。</p><p>那么步骤也就如出一辙了。</p><ol><li>建树：将要读入的所有预处理字符串构造出一棵字典树(Trie-Tree)出来。</li><li>适配&amp;失配：对字典树的所有节点构造其失配指针。</li><li>匹配：读入模式串，进行匹配。</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h4><p>方法同字典树建树一样，将 n 个匹配串插入字典树即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addString</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);<span class="comment">//约定0为空根节点，字符串从1开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,c;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!ch[u][(c=s[i]-<span class="string">&#x27;a&#x27;</span>)]) ch[u][c]=++cnt;</span><br><span class="line">        u=ch[u][c];</span><br><span class="line">&#125;</span><br><span class="line">    ++End[u];<span class="comment">//记录尾结点为u的字串的个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="失配"><a href="#失配" class="headerlink" title="失配"></a>失配</h4><p>类似于 KMP 的配对方式，但又因为 Trie 树的模式串并不止一个，所以单独的匹配是不行的，而对于一个节点 $u$ ，其失配指针 $Fail[u]$ 可以满足的是其深度绝对比 $u$ 小。所以我们应该按照深度优先的顺序来进行失配，那也就自然而然地联想到 bfs 的使用了。使用 bfs 可以保证当我们配对 $u$ 的时候，其 $Fail[u]$ 点一定已经被配过了。</p><p>设 $u$ 到 $u$  的儿子转移边上的字母是 $C$ ，则一直跳到节点 $v$ ，满足存在一条转移边是 $C$ ，那么就把 $u$ 的这个转移边的所指结点的失配指针指向 $v$ 的这条转移边所指的节点。如果直到根都没找到，则有 $Fail[u]=Root$ 即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">compare</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i) <span class="keyword">if</span>(ch[<span class="number">0</span>][i]) Q.<span class="built_in">push</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="comment">//放入根节点</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)<span class="comment">//遍历u的儿子</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[u][i]) ch[u][i]=ch[Fail[u]][i];</span><br><span class="line">            <span class="comment">//没有该边，直接相连</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Q.<span class="built_in">push</span>(ch[u][i]);</span><br><span class="line">                Fail[ch[u][i]]=ch[Fail[u]][i];</span><br><span class="line">                <span class="comment">//失配</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>依照 kmp 的方法查找母串中模式串的个数就行了。</p><p>这里是查询存在次数的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        u=ch[u][c];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=u;j&amp;&amp;End[j]!=<span class="number">-1</span>;j=Fail[j])</span><br><span class="line">            ans+=End[j],End[j]=<span class="number">-1</span>;<span class="comment">//避免重复</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><h4 id="Luogu-P3808"><a href="#Luogu-P3808" class="headerlink" title="Luogu P3808"></a><a href="https://www.luogu.com.cn/problem/P3808">Luogu P3808</a></h4><p>如上所言。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,ch[MAXN][<span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> ans,cnt,Fail[MAXN],son[MAXN];</span><br><span class="line"><span class="type">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addString</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ch[u][c]) ch[u][c]=++cnt;</span><br><span class="line">        u=ch[u][c];</span><br><span class="line">    &#125;</span><br><span class="line">    ++son[u];</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">compare</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i) <span class="keyword">if</span>(ch[<span class="number">0</span>][i]) Q.<span class="built_in">push</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[u][i]) ch[u][i]=ch[Fail[u]][i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Q.<span class="built_in">push</span>(ch[u][i]);</span><br><span class="line">                Fail[ch[u][i]]=ch[Fail[u]][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        u=ch[u][c];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=u;j&amp;&amp;son[j]!=<span class="number">-1</span>;j=Fail[j]) ans+=son[j],son[j]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;AC-automaton.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;AC-automaton.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">addString</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">compare</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">calc</span>(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">ab</span></span><br><span class="line"><span class="comment">ac</span></span><br><span class="line"><span class="comment">abc</span></span><br><span class="line"><span class="comment">abcd</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h4 id="Luogu-P3796-加强版"><a href="#Luogu-P3796-加强版" class="headerlink" title="Luogu P3796 加强版"></a><a href="https://www.luogu.com.cn/problem/P3796">Luogu P3796 加强版</a></h4><p>从统计所有，到分开统计，我们可以多使用一个数组 $Idx[x]$ 表示以节点 $x$ 结束的模式串的编号是多少。然后在查询的时候，然后在 $T[i]$ 中统计每一个编号所匹配的所有子串的个数，最后当该点的 $Idx[u]$ 有确值，统计进 $Cnt[Idx[u]]$ 即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">151</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS=<span class="number">71</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXT=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,Test;</span><br><span class="line"><span class="type">char</span> str[MAXN][MAXS],Tr[MAXT];</span><br><span class="line"><span class="type">int</span> Tre[MAXT][<span class="number">27</span>],Cnt,Idx[MAXT],Sum[MAXN],Tot[MAXT];</span><br><span class="line"><span class="type">int</span> Fail[MAXT],ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Idx,<span class="number">0</span>,<span class="built_in">sizeof</span>(Idx));</span><br><span class="line">    <span class="built_in">memset</span>(Sum,<span class="number">0</span>,<span class="built_in">sizeof</span>(Sum));</span><br><span class="line">    <span class="built_in">memset</span>(Tre,<span class="number">0</span>,<span class="built_in">sizeof</span>(Tre));</span><br><span class="line">    <span class="built_in">memset</span>(Tot,<span class="number">0</span>,<span class="built_in">sizeof</span>(Tot));</span><br><span class="line">    <span class="built_in">memset</span>(Fail,<span class="number">0</span>,<span class="built_in">sizeof</span>(Fail));</span><br><span class="line">    Cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addString</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Tre[u][s[i]-<span class="string">&#x27;a&#x27;</span>]) Tre[u][s[i]-<span class="string">&#x27;a&#x27;</span>]=++Cnt;</span><br><span class="line">        u=Tre[u][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    Idx[u]=id;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pareString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i) <span class="keyword">if</span>(Tre[<span class="number">0</span>][i]) Q.<span class="built_in">push</span>(Tre[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!Tre[u][i]) Tre[u][i]=Tre[Fail[u]][i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Q.<span class="built_in">push</span>(Tre[u][i]);</span><br><span class="line">                Fail[Tre[u][i]]=Tre[Fail[u]][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>),res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        u=Tre[u][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=u;j;j=Fail[j]) ++Tot[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=Cnt;++i)</span><br><span class="line">        <span class="keyword">if</span>(Idx[i]) <span class="built_in">checkMax</span>(res,Tot[i]),Sum[Idx[i]]=Tot[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;AC-automaton.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;AC-automaton.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">while</span>(N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str[i]+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">addString</span>(str[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pareString</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,Tr+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans=<span class="built_in">query</span>(Tr));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">            <span class="keyword">if</span>(Sum[i]==ans) <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str[i]+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">read</span>(N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">aba</span></span><br><span class="line"><span class="comment">bab</span></span><br><span class="line"><span class="comment">ababababac</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">beta</span></span><br><span class="line"><span class="comment">alpha</span></span><br><span class="line"><span class="comment">haha</span></span><br><span class="line"><span class="comment">delta</span></span><br><span class="line"><span class="comment">dede</span></span><br><span class="line"><span class="comment">tata</span></span><br><span class="line"><span class="comment">dedeltalphahahahototatalpha</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="后缀自动机SAM-Suffix-Automaton"><a href="#后缀自动机SAM-Suffix-Automaton" class="headerlink" title="后缀自动机SAM(Suffix Automaton)"></a>后缀自动机SAM(Suffix Automaton)</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>对于一个字符串 $s$ 的 SAM 而言，是一个接受 $s$ 的所有后缀子串（包括 $s$ 本身）的最小 DFA 。首先给出个例子：</p><p><img src="https://cdn.luogu.com.cn/upload/pic/48640.png" alt="SAM"></p><p>对于该字符串 $s=’aabab’$ 而言，其后缀子串包括 $’aabab’,’abab’,’bab’,’ab’,’b’$ 即可。这就是一个最朴素的后缀自动机的字典树，但是，我们会发现会存在非常多相等的子树存在，会浪费非常多不必要的空间，最多会达到 $\mathcal O(n^2)$ ，这是不允许的。</p><p>那么，有没有办法将空间优化到 $\mathcal O(n)$ ，线性？很困难？所以才会有仙人创造出后缀自动机。</p><h3 id="线性时间下的后缀自动机"><a href="#线性时间下的后缀自动机" class="headerlink" title="线性时间下的后缀自动机"></a>线性时间下的后缀自动机</h3><p>后缀自动机的性质：</p><ol><li>SAM 是一个 DAG （有向无环图）。结点被称作<strong>状态</strong>，边被称作状态间的<strong>转移</strong>。</li><li>图存在源点 $t_0$ ，被称作<strong>初始状态</strong>，其余所有结点都可从 $t_0$ 出发到达。</li><li>存在一个或多个<strong>终止状态</strong>。从 $t_0$ 出发，最终转移到一个终止状态，路径所连接的一个字符串必定为 $s$ 的后缀；反之， $s$ 的任意后缀均可用一条从 $t_0$ 到某个终止状态的路径表示。</li><li>SAM 是满足上述条件的所有自动机中，结点数最少的。</li></ol><h4 id="Endpos"><a href="#Endpos" class="headerlink" title="Endpos"></a>Endpos</h4><p>记一个数组的每一个元素都是集合，记作 $Endpos[i]$ ，以 $s=’aabab’$ 为例，则有 $Endpos[‘ab’]=\{3,5\}$ 。那么显然，有以下性质：</p><ol><li>设字符串 $s$ 中的两个非空子串 $u$ 和 $v$ ，假定 $|u|\leq |v|$ ，且满足 $Endpos(u)=Endpos(v)$ ，那么 $u$ 的每一次出现，都是以 $w$ 的后缀的形式出现的。</li><li>同样，满足：$\begin{split} \left \{ \begin{array}{ll} Endpos(u)\subseteq Endpos(v)          &amp; \text{if}\ u\ \text{is a suffix of }w\\  Endpos(u)\cap Endpos(v)=\varnothing                 &amp; otherwise \end{array} \right. \end{split}$</li><li>对于一个 $Endpos$ 的<strong>等价类</strong>，将类中的所有子串按长度非递增的顺序排序。每个子串都不会比它前一个子串长，与此同时每个子串也是它前一个子串的后缀。换句话说，对于同一等价类的任一两子串，较短者为较长者的后缀，且该等价类中的子串长度恰好覆盖整个区间 $[x,y]$ 。</li><li>等价类没有相同长度的字符串。</li></ol><h4 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h4><p>对于一个非 $t_0$ 的状态 $v$ ，必然对应于具有相同 $Endpos$ 的等价类。定义 $w$ 是这些字符串中最长的一个，则其他字符串必定是 $w$ 的后缀。</p><p>而对于 $w$ 的最长的几个后缀全部包含于这个等价类，且所有其他后缀（包括空后缀），在其他等价类中。记 $t$ 为满足上述要求最长的后缀，将 $v$ 的后缀链接 $Link[v]$ 与 $t$ 连接。那么，</p><p>一个<strong>后缀链接</strong> $Link[v]$ 连接到对应于 $w$ 的最长后缀的另一个 $Endpos$ 等价类的状态。</p><p>则有</p><ol><li>所有后缀链接构成了一棵以 $t_0$ 为根节点的树。</li><li>通过 $Endpos$ 集合构造的树（子节点集合包含于父节点集合，类似于线段树）与通过后缀链接 $Link$ 构造的树相同。</li></ol><h4 id="Parent-Tree"><a href="#Parent-Tree" class="headerlink" title="Parent Tree"></a>Parent Tree</h4><p>以父子关系构建的树<del>（类似于高中男寝的现状）</del>。有这么一张图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/dtbqv5ba.png" alt="PT"></p><p>是对应 $s=’aababa’$ 的 Parent Tree 。显而易见地，可以看见很多性质，类似于：</p><ul><li>子节点是父节点的子集，且其表示的后缀串大小依次递增且父节点表示的字符串都是子节点的后缀子串。</li></ul><p>而后缀自动机的构造所需要的状态，正是父母树中的所有状态（可以认为同一个字符串的 SAM 和 Parent Tree 共用同样的节点），但边有所不同。但 Parent Tree 的根就是 PAM 中的 $t_0$ ，即源点。而终止节点就是包含了原串的节点，如上图的 $6$ 号节点。那么，我们的任务，就是在此原点中，构建出一个有向无环图，使其路径，有且仅有原字符串 $s$ 的所有后缀子串。</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>首先，后缀自动机的构造算法是一个<strong>在线</strong>算法， 我们逐一读入字符串中的每一个字符，并对应维护后缀自动机。为了保证线性的空间复杂度，每一个状态仅有两个元素表示为 $len$ 和 $link$ 。</p><p>首先，初始化整个后缀自动机，创立空根节点满足 $len[t_0]=0,link[t_0]=-1,last=0,cnt=0$ ，$-1$ 表示虚空根，初始长度为 $0$ ，$cnt$ 是当前节点编号与总结点数。$last$ 表示在添加字符 $c$ 时，整个自动机对应的状态。</p><p>接着，</p><p>读入字符 $c$ ，为字符 $c$ 创建一个新的状态记为 $cur$ ，并使 $len[cur]=len[last]+1$ 。</p><p>从状态 $last$ 开始，遍历后缀链接数组 $link[]$ ，寻找是否存在某个点已经有了到 $c$ 的转移，并将该点记为 $p$ 。</p><p>如果不存在，则 $p=-1$ ，且 $c$ 字符是第一次在该字符串中出现。则运行 $link[cur]=0$ 并退出。</p><p>如果存在状态 $p\neq -1$ 则令 $p$ 通过 $c$ 转移到的状态为 $q$ 。如果有 $len[p]+1=len[q]$ 的话，则有 $link[cur]=q$ ；否则，</p><p>对于状态 $cur$ 与当前节点 $p’$ 所指的 $q$ 而言，他们必定有一段公共后缀（至少包含一个字符 $c$ ）。然后，我们创建一个新状态记为 $clone$ ，并满足 $len[clone]=len[p]+1$ ，并让 $q$ 和 $cur$ 都指向 $clone$ ，即让 $clone$ 成为 $q$ 和 $cur$ 的父节点。让 $clone$ 代替 $q$ 的存在，使所有曾转移至 $q$ 的边全部定向指向 $clone$ 即可。</p><p>最后，将 $last$ 更新为 $cur$ 即可。我们从 $last$ 开始，遍历后缀链接直到 $t_0$ ，将所有经过的状态记为终止节点，那么，从 $t_0$ 到任意终止节点的路径所构成的字符串，包含且仅包含所有 $s $ 的后缀子串。这些被标记的状态，也全部都是终止状态。 </p><p>对于上述所有的证明与拓展讲解，详见<a href="https://oi-wiki.org/string/sam/#_6">OI Wiki</a></p><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><h4 id="Luogu-P3804"><a href="#Luogu-P3804" class="headerlink" title="Luogu P3804"></a><a href="https://www.luogu.com.cn/problem/P3804">Luogu P3804</a></h4><p>构造不用多说，运用在于查找一个子串出现的个数。最后的统计可以使用<strong>拓扑排序</strong>或者<strong>深度优先搜索</strong>。我的拓扑似乎炸了，换了 dfs 才过的。计算出现次数，只需要将 $EndposSize[Link[u]]+=EndposSize[u]$ 即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> Str[MAXN];</span><br><span class="line"><span class="keyword">namespace</span> SAM</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">State</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len,link,next[<span class="number">27</span>];</span><br><span class="line">    &#125;Tre[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Path</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> next,to;</span><br><span class="line">    &#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> Total,Head[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Edge[++Total]=(Path)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> Last,Size=<span class="number">0</span>,Endpos[MAXN],T[MAXN],A[MAXN];</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Tre[<span class="number">1</span>].len=<span class="number">0</span>,Tre[<span class="number">1</span>].link=<span class="number">0</span>;</span><br><span class="line">        Last=<span class="number">1</span>,Size=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(Endpos,<span class="number">0</span>,<span class="built_in">sizeof</span>(Endpos));</span><br><span class="line">        <span class="built_in">memset</span>(T,<span class="number">0</span>,<span class="built_in">sizeof</span>(T));</span><br><span class="line">        <span class="built_in">memset</span>(A,<span class="number">0</span>,<span class="built_in">sizeof</span>(A));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Extend</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur=++Size;</span><br><span class="line">        Tre[cur].len=Tre[Last].len+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> p=Last;</span><br><span class="line">        Endpos[cur]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p&amp;&amp;!Tre[p].next[c-<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            Tre[p].next[c-<span class="string">&#x27;a&#x27;</span>]=cur;</span><br><span class="line">            p=Tre[p].link;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!p) Tre[cur].link=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> q=Tre[p].next[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(Tre[p].len+<span class="number">1</span>==Tre[q].len) Tre[cur].link=q;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> clone=++Size;</span><br><span class="line">                Tre[clone]=Tre[q];</span><br><span class="line">                Tre[clone].len=Tre[p].len+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(p&amp;&amp;Tre[p].next[c-<span class="string">&#x27;a&#x27;</span>]==q)</span><br><span class="line">                &#123;</span><br><span class="line">                    Tre[p].next[c-<span class="string">&#x27;a&#x27;</span>]=clone;</span><br><span class="line">                    p=Tre[p].link;</span><br><span class="line">                &#125;</span><br><span class="line">                Tre[q].link=Tre[cur].link=clone;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Last=cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[x];e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(Edge[e].to);</span><br><span class="line">            Endpos[x]+=Endpos[Edge[e].to];</span><br><span class="line">        &#125;</span><br><span class="line">        ll res=Endpos[x]*Tre[x].len;</span><br><span class="line">        <span class="keyword">if</span>(Endpos[x]!=<span class="number">1</span>) <span class="built_in">checkMax</span>(ans,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=Size;++i) <span class="built_in">addEdge</span>(Tre[i].link,i);</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> SAM;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;suffix-automaton.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;suffix-automaton.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,Str+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> Len=<span class="built_in">strlen</span>(Str+<span class="number">1</span>);</span><br><span class="line">    SAM::<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Len;++i) SAM::<span class="built_in">Extend</span>(Str[i]);</span><br><span class="line">    SAM::<span class="built_in">calc</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">abab</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>可以证明，最终 Parent Tree 和 SAM 所依赖的那个图 $G(V,E)$ ，满足 $V\leq n,E\leq n$ ，即这张图的边数和点数都是 $\mathcal O(n)$ 的。证明较复杂，读者可以自行搜索阅读。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> String </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 图论 </tag>
            
            <tag> bfs </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> 构造 </tag>
            
            <tag> 自动机 </tag>
            
            <tag> 后缀自动机 </tag>
            
            <tag> 后缀数组 </tag>
            
            <tag> 后缀树 </tag>
            
            <tag> Trie树 </tag>
            
            <tag> Kmp </tag>
            
            <tag> 搜索树 </tag>
            
            <tag> AC自动机 </tag>
            
            <tag> 字典树 </tag>
            
            <tag> 字典图 </tag>
            
            <tag> 后缀函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>O.I</title>
      <link href="/Eternity/Until-The-End/my-OIer-life/"/>
      <url>/Eternity/Until-The-End/my-OIer-life/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="85fc6a9e8bacfc0bc0d03b04f1cb5c93e042b8dffe01557cc41ef6389f9e80ec">8a9f14dab31ea0fa4a1e98a3a95c850c116f1e7972a3803d3f384901d05d5b90074957ea9909112ad7f5f8c486494c02adc0213d106d43f1cfc12e148798503b99182722ce4551aa3c93db8e9d22a35bbbfb76e6c6ed9517a707589a6c942a35c94420c13260606593923579284cd94f316e7316e0987f5d06db0e8bff9ba91059a3b22a213a7896111055f2307a4155e6b95d80e1083c79afa19276862836352c298467af6aa016b23e5589b30c57b751f3a519e4c2e22176ed8165237598f32364c0ffa6f6f464f413deb3772ac9502f79efb5817c743f01d1d04c0d477665d59334ee8a03d3b887e45adbcc7ff99d74a935522892fb1a264dc9683f9d9ebcec57867d11a2eb905f08e2c162552090046c651e7a14cd84ceb0fa902a8a904140fda6fb20d037cd4035f85b8ff62aaa124346a4b064cb457875e8078bdc845aa6944e6fafdb225535d83695fc97706ad27e8c7d8b2f49d026a1b29c3c2da4a9d14e3bcaf1514f9c9b9a72b75fc6dbb8efc1024b7e7f1c67e498e95c6cc64a2a07961f1fccdd68c1e81a56da66d074d7da6bbef2c68e53a919539afe441215355e9498a8a51c1cfb18903ddf24eb00a9ee305a37bf4cafd3c5f1dedf7df93f701012855862a2b7fc77802412ac2e93f360201be39140e9d383e30774a3b8dc1e97fdad1bfc869acb63186dae5cd1bea5322f33ef8176b871825f3e9dd3e255386b3355fc6c86918614ef258548ac812cce940a6f2e2e121011817a5ee21eb37bdf2db7c6c706c4eb1fd9f263aeb1c8c4490732c1bc8b57cf6e62a40483b762ee7e2ec7998641abb46c6d34579e1fdfeb05588a7abfc60143e67031f1055761c594b25423300e69fa0cbac20fbf346dd6aa7d6a0b9d1d9e62f205c4f280a8a75d45110cd2037a96d2c994df7ecaf012c60a1326798c378a76425fc500a684c6c62b111154aaefa7c1472ec35438a6950b534dbc2ed904a27beec4fc689759e293ad4c101d5f5c4d4685e3a0aea351f6a60ac78fa00b7bef5fd8c637df077918f9df1f3b66b78951fccd9481b8d641c0cbec0d82dbe7a534224e13ac0a71b75f0b35f00148ee977d935bd1639e0a2cc335d411680dae9fe1b440943cb8c289b91877d0cd5a0c2a4417079437538846c05c53e3d78179eae4cd2f916eaa309e74fe54c1ced3a2ded5e1c08a26eca638414ddca76c7e098808ed237342c8140b24fb57faf9d0d6c4f224b4dc8c48ead89050555b16b2f3ee0b9f01532675009e3d80eb4ec30eae5fd1a1d8a7be254f1f5bde449026bf841a6e66a93691a38ec7b6f58dd5858676986e70772d0ac097f6353657ab7b148c096ad00127c2af0e523cf7e3279a6b382012b1d18af3f6865777160ee864e7844a12af84ef4d7adff88954ad27c7cf593113a3399c4d9d94cd965ad24209cd4137982cffafa32ae47c91179c10f5bc7fe880c78e2694f6aa81e75bda39a9c7e28ddf9d7efd1daf6fcd2a08eaac8358977fc5b7bf8474c9d6af4c51b115fd2d9b93ec5ebd459b4136cee751255d4cf73829936ed44a93599903e60f9f33ecf5e9fe1f16a3da594337456d95060c38ab4a91f89a5a49828b93a07004d9222b5ac26dbabd4805aa2f57f85f7dafd2b3fac46af5ae6a3e89ea2d1be4795d56cdb2975e2c034dfd06230a54e6e661c34aad70667520413b4ceacd55d180f5e3ae8a7ed2febdd12b4ec4c3008b17573af03ddaab5ebcce64a0922523563eb4f75b88bee03a4391beec92cfc4ac85d4c46a6d9d09e107be2a9d5b44d77b65bb2d54bb6666555c4020793b2b0336c3995b248631a8e94f55c39990a6f0cf6843373853205c51239734907249c60aaa48e62ab443be32995e80092485ae4778899cad5f46c43243f55c11f32a882915c17d206beec93b85aeaf47c6a213c4eddc3655918b5dc2df9d0ca48bd02e9a98ec719e61320ee0e363fee86817eabc5954d74d647587057a0aed5c57ca65733eb85fa8915238360b61d3c2e856d588f55603c41a91d9166c5e3540a7363c4305029e5fa80a657e7ee17b22b812c94e4856e2ae36d22bfc7807110859d09e5f9b76f9e91495e324c74f8b930a5440084d76761bd62fe3c99c8693c98e4bbbdec22a421c902f6316578f8cdee85fb8cd913c9300f478c24f2c1e1db45546c990bf91b8a0a581b72f8007b0a86cbfbb610aacbcd34a214529daee5201e0af81111a2056186878fe443e3998e99cd915660efdf8bf9dd4265e208da2346aac990745617166d2e68f58c79b5830446dfbc838a56a91e8c2b93ca5d504f0741024e4069435b2ac681e2c8ce077580ef984a0c56567822afdf369e2ee472ea1ac256234c967b489ecd9ffefe1de663df74b05bddf36ca8d479fd99cfb69170f2e429bb812932d3639dca41db388bc16bac850dd070d46a6d01aae61668bb31a95214bebb0540026e1dcdf62582762d71f99c10acaf663ab6d0a2b1df2d3509653fc394c2f7149c01499f297efb459394e504f19b287c4ce8f2c728bc2c3972090d5c3b798dd40b349cd3872b741787eb801df9c4e6c3f015849c440774d9f76a4d743a9fbb65df59b8594de0e0f18e6e8de2203b31a87c4ae8b04d6843ff4b685df624e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">提问：I Ak ???</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/Eternity/lib/hbe.js"></script><link href="/Eternity/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Until The End </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>点分治</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/divided-conquer/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/divided-conquer/</url>
      
        <content type="html"><![CDATA[<p>燃其主核，破其王座。</p><span id="more"></span><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p><strong>点分治</strong>用于对一些具有限定条件的路径进行静态统计的算法。</p><p>一般步骤在于：</p><ol><li>任选一个根节点 $p$ （<del>一般</del> $p$ <strong>必须</strong>是<strong>树的重心</strong>）</li><li>从 $p$ 出发进行一次 $Dfs$ ，求得两个数组 $dist$ 与 $belong$</li><li>执行 $calc(p)$</li><li>删除根节点 $p$ ，对 $p$ 的每一个子树重复 $1 \sim 4$ 的操作。</li></ol><p>对于不同的题目，其 $calc(p)$ 函数大同小异。但其他都差不多。</p><p>$dist[x]$ 表示节点 $x$ 到根节点 $p$ 的距离。</p><p>$belong[x]$ 表示节点 $x$ 所属于的是根节点 $p$ 的哪一棵子树。</p><p>规定： $dist[p]=0,belong[p]=p$</p><p>我们设 $T$ 为递归操作所到达的最大深度。那么复杂度则为 $\mathcal O(TN\log N)$</p><p>总而言之，复杂度的波动范围则是 $\mathcal O(N\log N)\sim\mathcal O(N^2\log N)$ 。</p><p>显然，这个波动极大，对于两个极值而言，一个，是链，一个，是重心。所以，这也是为什么 $p$ 必须要取树的重心。但查找重心需要一定的时间，大概是 $\mathcal O(\log N)$</p><p>所以，点分治的时间就是 $\mathcal O(N\log^2 N)$ 了。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="Luogu-P3806"><a href="#Luogu-P3806" class="headerlink" title="Luogu.P3806"></a><a href="https://www.luogu.com.cn/problem/P3806">Luogu.P3806</a></h3><p>其他部分不多赘述。重点说 $calc(p)$ 部分。</p><p>有两种做法。</p><h4 id="树上直接统计"><a href="#树上直接统计" class="headerlink" title="树上直接统计"></a>树上直接统计</h4><p>设 $p$ 的子树为 $s_1,s_2…s_m$</p><p>对于 $s_i$ 中的每一个节点 $x$ ，将满足 $dist[x]+dist[y]=K$ 的节点 $y$ 统计出即可。</p><p>可以使用<strong>树状数组</strong>。 </p><ol><li>对于 $s_i$ 中的每一个节点 $x$ ，查询其前缀和 $ask(K-dist[x])$ ，即 $y$ 的个数。</li><li>对于 $s_i$ 中的每一个节点 $x$ ，进行 $add(dist[x],1)$ ，表示与 $p$ 距离为 $dist[x]$ 的节点增加了 $1$ 个。</li></ol><p>按子树一棵棵统计保证了 $belong[x]\neq belong[y]$ ，查询前缀和保证了 $dist[x]+dist[y]=K$ 。</p><p>进行优化的话，可以使用平衡树代替树状数组，或者离散化。</p><h4 id="指针扫描数组"><a href="#指针扫描数组" class="headerlink" title="指针扫描数组"></a>指针扫描数组</h4><p>将树的节点转化为一个一维数组记为 $num[i]$ ，并按照其 $dist$ 值进行由小到大排序。然后创建头指针和尾指针 $l,r$ 或者 $head,tail$ 。从前后扫描 $num$ 数组。</p><p>那么，当 <code>++l</code> 和 <code>--r</code> 在执行时， $dist[num[l]]+dist[num[r]]$ 应该是单调递减的。</p><p>用 $cnt[s]$ 表示 $l+1\sim r$ 之间满足 $belong[num[i]]=s$ 的位置 $i$ 的个数。当路径一端 $x$ 等于 $num[l]$ 时，统计答案 $y=r-l-cnt[belong[num[l]]]$</p><p>这道题用的就是这个思路。 </p><hr><h4 id="杂话"><a href="#杂话" class="headerlink" title="杂话"></a>杂话</h4><p>对于这道题，转离线统计，用点分治的传统方法，找重心，计算，删点即可。</p><p>时间复杂度 $\mathcal O(nm\log n)$ </p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e7</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Road</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">    <span class="built_in">Road</span>(<span class="type">int</span> next=<span class="number">0</span>,<span class="type">int</span> to=<span class="number">0</span>,<span class="type">int</span> val=<span class="number">0</span>):</span><br><span class="line">        <span class="built_in">next</span>(next),<span class="built_in">to</span>(to),<span class="built_in">val</span>(val)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="type">int</span> Pos,ans_Pos,Size[MAXN];</span><br><span class="line"><span class="type">bool</span> vis_Pos[MAXN],vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Road</span>(Head[u],v,w);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Road</span>(Head[v],u,w);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_Pos</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Size[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> Max_Part=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==fa||vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs_Pos</span>(v,x,size);</span><br><span class="line">        Size[x]+=Size[v];</span><br><span class="line">        Max_Part=<span class="built_in">max</span>(Max_Part,Size[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    Max_Part=<span class="built_in">max</span>(Max_Part,size-Max_Part);</span><br><span class="line">    <span class="keyword">if</span>(!Pos||Max_Part&lt;ans_Pos)</span><br><span class="line">    &#123;</span><br><span class="line">        ans_Pos=Max_Part;</span><br><span class="line">        Pos=x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> blg[MAXN],dis[MAXN],query[MAXM];</span><br><span class="line"><span class="type">int</span> num[MAXN],Tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dis[x]&lt;dis[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_Dist</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> val,<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num[++Tot]=x;</span><br><span class="line">    dis[x]=val,blg[x]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==fa||vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs_Dist</span>(v,x,val+Edge[e].val,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> ans[MAXM];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_Calc</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tot=<span class="number">0</span>;</span><br><span class="line">    num[++Tot]=x;</span><br><span class="line">    dis[x]=<span class="number">0</span>,blg[x]=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[(v=Edge[e].to)]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs_Dist</span>(v,x,Edge[e].val,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(num+<span class="number">1</span>,num+<span class="number">1</span>+Tot,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">1</span>,r=Tot;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[num[l]]+dis[num[r]]&gt;query[i]) --r;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dis[num[l]]+dis[num[r]]&lt;query[i]) ++l;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(blg[num[l]]==blg[num[r]])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[num[r]]==dis[num[r<span class="number">-1</span>]]) --r;</span><br><span class="line">                <span class="keyword">else</span> ++l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans[i]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs_Calc</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[(v=Edge[e].to)]) <span class="keyword">continue</span>;</span><br><span class="line">        Pos=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs_Pos</span>(v,<span class="number">0</span>,Size[v]);</span><br><span class="line">        <span class="built_in">solve</span>(Pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs_Pos</span>(<span class="number">1</span>,<span class="number">-1</span>,N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) <span class="built_in">read</span>(query[i]);</span><br><span class="line">    <span class="built_in">solve</span>(Pos);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]||!query[i]) <span class="built_in">printf</span>(<span class="string">&quot;AYE\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NAY\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">1 2 2</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>似乎这玩意儿 NOIP 是不考的，省选之后的内容了，最近几年也只有 WC 和 IOI 考过。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> 指针 </tag>
            
            <tag> 点分治 </tag>
            
            <tag> 分治 </tag>
            
            <tag> 二次扫描与换根法 </tag>
            
            <tag> 树的重心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四季之歌</title>
      <link href="/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E5%9B%9B%E5%AD%A3%E4%B9%8B%E6%AD%8C/season-a-song/"/>
      <url>/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E5%9B%9B%E5%AD%A3%E4%B9%8B%E6%AD%8C/season-a-song/</url>
      
        <content type="html"><![CDATA[<p>三百六十五个日子，三百六十五种不同的思念。</p><span id="more"></span><hr><p>你可曾听说过四季的歌谣……</p><p>唯有凛春不可窥探，而未遇的星霜终会到来； </p><p>唯有盛夏不可触及，而忽而之岁月值得等待； </p><p>唯有荏秋不可遇见，而相逢的枫花梦殇灵白； </p><p>唯有深冬不可僭越，而将至之高空长氤云海。 </p><p>霜花同蝉鸣共绘的四时之诗，是你我往昔的恋依；</p><p>黄昏与白昼共奏的四季之歌，是你我余烬之追忆。 </p>]]></content>
      
      
      <categories>
          
          <category> 短篇小说 </category>
          
          <category> 四季之歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻小说 </tag>
            
            <tag> 东辰 </tag>
            
            <tag> 总概 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未遇之春</title>
      <link href="/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E5%9B%9B%E5%AD%A3%E4%B9%8B%E6%AD%8C/season-uncomed-spring/"/>
      <url>/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E5%9B%9B%E5%AD%A3%E4%B9%8B%E6%AD%8C/season-uncomed-spring/</url>
      
        <content type="html"><![CDATA[<p>四季之歌 其一 春之篇</p><p>这是，关于我，关于他，关于她的故事。</p><span id="more"></span><hr><p>“南方的冬天也不会冷成这样吧。”亍余缓缓地吐气，随身前的水蒸气液化而飘散在空中，“开始变冷了呢。”</p><h2 id="时间的交织"><a href="#时间的交织" class="headerlink" title="时间的交织"></a>时间的交织</h2><p>作为班级乃至全校的佼佼者，亍余当之无愧受众人倾慕，虽不能称作为极品，但也算是长相端正了。也正因如此，他能注意到一些难以琢磨的目光，虽说不会太过在意。但他也不禁感到惋惜。</p><p>——如果一心学习也有错的话，那也就天理不容了。</p><p>亍余就是这样一个人，将除了学习之外的东西抛掷脑后的读书人。只不过，他也会在不久之后为这句话而后悔就是了。</p><hr><h3 id="黄昏之章"><a href="#黄昏之章" class="headerlink" title="黄昏之章"></a>黄昏之章</h3><p>在这间教室里，有着一个与亍余截然相反的人。</p><p>谈起石山，亍余似乎对他没有任何印象。石山就像是一个影子一样，不知道他和谁玩的好，不知道他的爱好，没有见过他发言，也不曾听过他谈笑。老师也很少提及过他。虽然成绩也不差。估计也正是因为他忽上忽下的成绩，让老师不好去说他吧。唯有一头自然卷的卷发能让他成为周围人记起的存在。</p><hr><p>我与这间教室格格不入。</p><p>并不意味着我有多么优秀，这间教室里的人都不配与我同屋；也不是说我极差透顶，没有人愿意接触我，我就是一个毒瘤。</p>]]></content>
      
      
      <categories>
          
          <category> 短篇小说 </category>
          
          <category> 四季之歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻小说 </tag>
            
            <tag> 恋爱 </tag>
            
            <tag> 校园 </tag>
            
            <tag> 东辰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忽而今夏</title>
      <link href="/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E5%9B%9B%E5%AD%A3%E4%B9%8B%E6%AD%8C/season-sudden-summer/"/>
      <url>/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E5%9B%9B%E5%AD%A3%E4%B9%8B%E6%AD%8C/season-sudden-summer/</url>
      
        <content type="html"><![CDATA[<p>四季之歌 其二 夏之篇</p><p>雨落殇花秋千荡千秋花殇落雨，歌残梦醉冷风吟风冷醉梦残歌。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 短篇小说 </category>
          
          <category> 四季之歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻小说 </tag>
            
            <tag> 东辰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逢秋之日</title>
      <link href="/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E5%9B%9B%E5%AD%A3%E4%B9%8B%E6%AD%8C/season-met-autumn/"/>
      <url>/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E5%9B%9B%E5%AD%A3%E4%B9%8B%E6%AD%8C/season-met-autumn/</url>
      
        <content type="html"><![CDATA[<p>四季之歌 其三 秋之篇</p><p>时间如同停止一般的楸天，每一秒，却在，蝶翼骤振。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 短篇小说 </category>
          
          <category> 四季之歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻小说 </tag>
            
            <tag> 东辰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凛冬将至</title>
      <link href="/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E5%9B%9B%E5%AD%A3%E4%B9%8B%E6%AD%8C/season-coming-winter/"/>
      <url>/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E5%9B%9B%E5%AD%A3%E4%B9%8B%E6%AD%8C/season-coming-winter/</url>
      
        <content type="html"><![CDATA[<p>四季之歌 其四 冬之篇</p><p>萦绕着北极光的极寒雪山，是否又是旅途的终点？</p><span id="more"></span><hr><p>或许，即使是像流冬这样经验丰富的人，也会为眼前所见而大为震撼。</p><h2 id="末秋与寒天"><a href="#末秋与寒天" class="headerlink" title="末秋与寒天"></a>末秋与寒天</h2><p>人们在之前从来也没有发现它的存在，估计也是情有可原的。去到过北极的人本就不多，何况一般的科学研究都选在了较为暖和的春夏季节，也不会有人傻到大冬天的去北极避寒。而正好的是，在那个时候，这座雪山也隐藏着面貌，同周围融为一体。</p><p>直到入了深秋，极夜笼罩了北极圈，变化才会不经意间发生——不合时宜的北极光萦绕在这座雪山高处，风雪席卷，让整座雪山直至山脚也盲不可视。虽然政府曾派过部队前去调查，而当直升机靠近苍白的风壁时，真相又总是让人大跌眼镜。那并不是所谓的风壁，夹杂在风之间的，墨黑的磐岩一遍又一遍地切割着半空中俱为一体的霜雪，一切随风旋转的物质都在高速运动，阻挡了任何试图窥探，与作弊登顶的外客。就像是在告诉流冬一行人，想要探索雪山的秘密，只剩下徒步攀登一条路可走。</p><p>而事实就是，任何官方与民间组织的探险队，从没有回来过。</p><p>这，便成为了“极北雪山”，一个近在咫尺的民间传说。也成为了，流冬一行人，此行的起点。</p><hr><h3 id="旅者之章"><a href="#旅者之章" class="headerlink" title="旅者之章"></a>旅者之章</h3><p>极北雪山中国研究所 霜降</p><p>即使流冬一行人呆在隔了三层铁板的地下研究室里，温度计的示数永远都指在的是 0℃ 左右。呼出的气体在液化之前就已经变作冰粒直至坠去了。</p><p>流冬想起自己在这里的目的，那是他正在离开青藏高原的途中，手中的手机一有信号，便收到了几条熟悉号码的短信。虽说熟悉，但也好几年没有遇见过了。那是他的初中同学，一个他曾经誓死力争的对手。</p><p>“有空吗？”裕涧说话永远是那么言简意赅。然后他们就在初秋的时候回到了曾经一起呆过的学校，作为大人再次进去，也就不会被校警阻拦了。</p><p>“唔……”流冬已经不知道说什么好了，毕竟他面前站了两个人。裕涧和他们的另一位同学，煜僭。作为从初中开始就玩好的两人，在一起也不为怪吧，流冬只能这样对自己说，可惜自己到现在也是孤独一人在世界各地跑上跑下。<font style="color:white">也从来没有人说过孤独是种错误吧。</font></p><p>“好了，这次又有什么新奇的想法。”流冬并不是很想在呆在这个令人尴尬的环境，只是想着办法能够赶快去往自己的下一个目的地。“嗯……好吧，直入主题。”裕涧将手插在胸前，微微点了点头，“作为闻名世界的冒险家，你应该对‘极北雪山’有所了解吧。”裕涧直勾勾地盯着流冬，等候着没有什么意义的回答。“这个回答是没有意义的吧，难道我还会不知道么？”流冬轻轻地笑了，“再说了，就算不是冒险家，也会有所耳闻吧。”</p><p>——我也不是什么大冒险家啊。<font style="color:white">蠢货，哪里像你，拥有近乎完美的人生</font></p><p>“嗯，确实，”裕涧似乎也意识到自己犯了一个常识性的错误，“那……你有兴趣吗？”</p><p>——诶？</p><p>“我们打算去那里做研究，探究一些非自然现象，这是研究院计划的一部分。”煜僭补充道，递给流冬一些不应该被传播的图片。一些能够被划为机密的文件。</p><p>“那，为什么要叫上我呢，我又不擅长这些。”其实，流冬也是想去一探究竟的。只是，他并不想以自己的性命做赌注。</p><p>“你知道的，那些……嗯……外界的传言，并不是完全没有道理。可能，我们需要一些经验比我们丰富的人，对于常年呆在实验室的人来说，生还的几率不能说没有，也微乎其微。所以，我们需要一个人能够活着将研究结果带出去。”</p><p>——哈？</p><p>“你这么说，抱着必死的决心？”流冬只是觉得很好笑，他没想到裕涧会说出这样恐怖的话，在他眼里，从小到大，裕涧从来就没有完不成的事，只要他想，一切尽在可得。裕涧和煜僭都沉默了，空气仿佛凝固了一般，如果不是那架一楼大厅的钢琴发出的钢琴声从远处传来，有人可能会认为是时间被暂停了吧。</p><p>“对。”</p><p>这下轮到流冬沉默了。</p><p>——可我还没有下好决心呢，万一我也……</p><p>“我相信你，你能够走出去。”</p><p>——但是……</p><p>“拜托了。”流冬能够清晰地看出裕涧并没有在开玩笑，他的眼瞳荡漾着墨一般深邃。像是一个黑洞，使流冬无法逃脱。他低下头，不敢再去直面裕涧的眼神。只是咬紧了牙，微微点了点头。然后，他听见裕涧松了一口气，发出了微小的笑声。虽然是沁人心脾，却让流冬感到一丝毛骨悚然。</p><p>“谢谢。”</p><hr><h3 id="雪花之章"><a href="#雪花之章" class="headerlink" title="雪花之章"></a>雪花之章</h3><p>不知已然在不同舒适的座位与载具上做了多久，窗外的风景也不断地变化着。从南方的枫花，到偏北的落雪，直到冰天之地，厚重的吉普驶过成块儿的浮冰，留下两缕履带的痕迹。此时的雪山静静地躺在那里，没有丝毫不祥的痕迹，也并没有引起流冬的注意。他将视野偏向距离雪山几公里外的巨大楼房，那是中国的研究所，被冻住的红漆依然是他祖国最明显的象征，当然，其他几个国家的也在其边。</p><p>吉普直接驶进了研究所的地下通道，重重的铁门在身后关闭了三次。流冬陪着裕涧下了车，大厅之中，熟悉或是不熟悉的人，站着或者坐着。当然，除了一些从没有在任何地方以任何形式出现过的研究员，其他流冬还是有所耳闻，只是他不能理解，为什么这些人也会参与进这个任务。</p><p>“为什么会有这么多无关人员啊？”流冬悄悄地问裕涧，用手指戳了戳他的后背。</p><p>“嗯……其实，我也没办法，虽说可以请出很多专业的登山人员，但是这并不是最有效的，因为事实证明，并不是专业的登山人员能活着出来，所有，我找了我熟悉的社会各界人士，都能来有所尝试，算是一种冒险吧。”裕涧摊开手，无奈地笑笑。又突然将嘴凑近了流冬耳边，“而且，有一个事实是没有被公布的，曾有人从极北雪山活着出来的，而那个人却是整个队伍中唯一一个非专业人员——一个作家！”</p><p>“那他带出了什么消息吗。”</p><p>“很可惜，没有，他被找到的时候舌头已经被冻断，死在了来研究所的路上。”</p><p>——不合常理。</p><p>对话截止，裕涧带着流冬去会见了大厅里的人。其中有一部分人都是曾经的初中同学。</p><p>作为中国著名作家的阳尘，每一篇文章都深受钟爱；研究化学直至痴迷的贾烷和祥镜，曾也是并肩作战的兄弟；还有极限运动员砚昊，煞佑，宣椿；数学天才雎蒿；成熟但有些极端的泽沛，依然在物理上大有作为的系桐，活泼耐性的日隐，以及各行各业的人……</p><p>还有卢申。</p><p>卢申曾是能与裕涧比肩的人，依靠天生的智慧与后来者的努力，登峰造极，差一点点就让裕涧跌落神坛。但有一句古话——天才与疯子仅有一念之差，而显然的，裕涧才是那个天才。</p><hr><p>于是，老友重逢，大家说着，笑着。逐渐忘记了身旁三米厚的铁门，与门外的风雪。</p><p>直到裕涧在某一个下午，穿上了防寒服，让流冬与他一起出去一趟。两个人本还想聊些天的，可一出铁门，满面的风雪便让人与人之间的话语声被湮没在了雪花的呼啸声中。两人艰难地走到煜僭的吉普旁，迅速地开门攀上，又迅速地关门，以免车子内被雪花占领，热空气急速逃窜。</p><p>“这是要去哪儿？”直到这时，流冬的声音才勉强能够被听见。“见证历史性的一刻。”坐在后座的裕涧笑着，只是盯着前面，或是前方飞舞的雪花，或是正在开车的煜僭。</p><p>忽地，车停了。流冬毫无方向感，因为从始至终，他能看见的只有雪花。“我们到了”煜僭说着，关闭了发动机，“我就不下去了。”于是，仅仅走出不到两米远，流冬已经看不见吉普车了。他感觉到裕涧握着他的手，这有点让他措手不及。从裕涧的嘴型，流冬能够勉强读出。</p><p>“你马上就会看见了。”</p><p>忽然，流冬感觉到身边的雪花开始高速流动，似乎快要将他托起，盛到半空中去，幸有裕涧把他握住，才没有飞起来，流冬能隐约地看见，裕涧的脚下有一个铁钩，紧紧地插入了冰层。雪花飞舞，如六角形的飞刀一般，如果不是因为厚重的防寒服，两个人早已被切成肉片了吧。</p><p>正因为雪花的飞舞，周围的视野逐渐辽阔，流冬也才发现，眼前，正是极北雪山。静静地屹立在那儿，从山脚到山顶都是一片祥和，雪松摇摆着，挡住了一片又一片雪花的足迹。雪花包围着极北雪山，如同被风暴吸住一样，久久徘徊。越积越深。流冬向后看去，远处的雪花依然飞舞，挡住了一切视线。</p><p>“奇迹之一，当极北雪山‘极端化’时，周围与冬天有关的所有东西都会被吸引。就好像曾经在做电与磁实验时，距离磁铁不远的所有铁屑都会被吸引过去一样，而其他的，则会有规则地排列。”</p><p>没有风再吹过流冬的身边，但身后的雪依然呼啸着。北极光随着极夜降临，如同流水般，开始萦绕在极北雪山的山巅。霞绿的光如丝绸一般柔软，伴随着雕刻精致的六角形的琉璃。逐渐使山顶淡出了人们的视野。</p><p>接着，流冬感觉到地面开始震动，躺在极冰上的雪堆也被震散，向低处落去。忽然间，流冬感觉到耳膜的极度振动，一股强大的声波从远处传来，穿云而来——那是与风雪隔绝，在寒极的冬天不会听见的声音。</p><p>闪电在白天并没有什么光彩，就像是有人在大白天打开手电筒闪了闪。但至于声音，依然震耳欲聋。“怎么会？”流冬质问着裕涧，他只是觉得十分不解。“这是奇迹之二，没有任何预兆的暴风雨，就像是以前科幻电影里的神仙降临，必定会带着些自然的超现象一样。”</p><p>只是过了不到半个小时，原本能和周围事物融为一体的雪山，瞬间孤立而出，处处都彰显着与这个自然格格不入的现象。流冬看得入迷，才意识到有人正在拍着他的肩膀。裕涧的护目镜已经被雪给掩盖了，“明天，我们将会出发，去探索你面前的庞然大物。”</p><hr><h3 id="启程之章"><a href="#启程之章" class="headerlink" title="启程之章"></a>启程之章</h3>]]></content>
      
      
      <categories>
          
          <category> 短篇小说 </category>
          
          <category> 四季之歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻小说 </tag>
            
            <tag> 冒险 </tag>
            
            <tag> 东辰 </tag>
            
            <tag> 奇幻 </tag>
            
            <tag> 科幻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《那年夏天……》——致那无法触及的</title>
      <link href="/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E7%B3%BB%E7%BC%92%E4%B8%89%E6%97%A5%E7%9A%84%E7%A7%8B%E5%A4%A9/mermaid-princess/"/>
      <url>/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E7%B3%BB%E7%BC%92%E4%B8%89%E6%97%A5%E7%9A%84%E7%A7%8B%E5%A4%A9/mermaid-princess/</url>
      
        <content type="html"><![CDATA[<p>转自：知乎</p><span id="more"></span><h2 id="人鱼公主的愿望"><a href="#人鱼公主的愿望" class="headerlink" title="人鱼公主的愿望"></a>人鱼公主的愿望</h2><p>如果说，汉斯·克里斯汀·安徒生所写的人鱼公主里的公主愿望是与人类王子相爱走完一生，那我的愿望与她是相同的，但我就像是人鱼公主里的公主一样，在付出时间与努力之后什么也没有得到。</p><p>如果说，人能活到八十岁。那么在意识成形后，它大概还能享受几十年的夏天。我将我所度过的夏天排放在桌子上，全部放平后就能发现有两个夏天很特别，一个非常的明亮，一个非常的暗淡，接下来，我会将明亮的这个夏天尽可能的详细说给你听。</p><p>那是发生在一九九几年的夏天，我与他相遇了。</p><p>我与深町阳介开始当朋友是在国小的时候,不，说是朋友或许不对，因为我并没有与他确认明确的朋友关系，我只是将他单方面当做我的朋友。</p><p>记得那是在我入院几个月后发生的事。有一天，他转入了我在的病房，他睡在我正前方的病床上，他是一个看起来不好搭话，而且面相有些凶恶的男生。其实正前方的病床住进了什么人与我没有关系，但我就是会注意这个男生，这并不是因为他的面相凶恶又或者对人恶言相向才让我注意他，说起我会注意他的原因？也只是很无趣的小事，但对当时的我来说，这一定是一件大事吧。我想，我是在嫉妒他，是一种毫不掩饰，很明显的嫉妒。</p><p>他的母亲基本每天都会来看他，不论是春夏秋冬，又或者阴晴雨雪，他的母亲都会来医院看他。对于他母亲的行动我很是无法理解，因为就我的家庭而言，我的母亲是那种就算来到医院看我也是一副「我也不是喜欢来才这里」表情的人，但当时因为我年纪小，我以为是母亲因为太过劳累的关系才会这样，所以在母亲来到病房时我总是装出一副「没关系」的态度，在母亲待在病房里时我总是跟他谈一些没营养的话题，比方说什么医生的态度和善或者星期几的饭菜好吃等等，尽管我努力将事情说的有趣，但我的母亲只是一脸僵硬地用很简短的话回答我。随着年龄增长，我也逐渐意识到那是一种「认为人很麻烦的态度」，或许你会想说我有被害妄想症，但如果你看过我母亲的那种态度，我想你也一定会明白我再说什么。</p><p>每当他的母亲来到病房时，我总是拉起床边的防护帘，挡住眼前过于幸福的光景。虽然我的想法上明白看了也只会徒增悲伤，但我就是忍不住去看，心想着如果现在被照顾的不是他，而是我那该有多好。每当我的这个想法产生的瞬间，就被我马上打消，就连我自己都对自己的不干脆感到厌恶，明明只要果断接受现状就好了，但我怎么样就是无法放弃「只要我继续等下去，说不定哪一天我的母亲就会像他的母亲一样对待我。」但从结果上看，我的等待并没有用，只要我的脚一天不好，我所遇见的状况就不会有任何的好转，明白这点是在几个月后的那一天。</p><p>我与他的关系自那一阵子后有变的缓和一点。记得那是在美渚汀一年一度的烟火大会的夜晚。那一天，窗外的声响异常的大，在这个一到夜晚就只听得见蝉鸣声的美渚汀来说是很难得的夜晚。我降低身体的感觉，提高耳朵的灵敏度。窗外除了人潮的声音还有一声声巨大的声响。当我意识到这是烟火声时，我已经听不到烟火声了。我放空脑袋躺在床上闭上眼睛，尝试想像烟火是个什么样子，但仔细检索记忆后我才意识到我根本就没亲眼看过烟火这种东西，对烟火的记忆也只停留在五颜六色，飞到空中没过多久就会消失这种概念上的东西。因为平常在美渚汀里很少能看见或听见烟火的声音，再加上这半年多来的住院，已经让我彻底忘记了烟火这种东西到底是个什么样子，不，说不定连忘记烟火这件事本身我都已经忘记了也说不定。</p><p>　　想到这里，我的心中充满了不安，有一种像被墨汁般漆黑的海水给覆盖住的感觉，让我一时之间喘不过气来。让我从这份不安里脱身的契机正是因为他，因为母亲而被我单方面讨厌的他，不，说不定他也很讨厌我，只是我没发现而已。</p><p>当我回过神来，似乎已经过了十几分钟，我起身朝他的病床看去，病床上空无一人，我环视整间病房后才发现他正站在窗边看着外面的烟花。</p><p>我坐在病床上看着他。他有胎记的半边脸被一次次升起的烟花所照亮。在烟花升起的瞬间他似乎说了些什么，但因为烟花跟窗外的人潮声太大，让我听不清他说了什么。</p><p>大概过了有几分钟吧，我意识到我的眼角有着液体状的东西流下。我想，那一定是因为屋顶漏水滴到我脸上导致的。不然，我根本没有理由哭的不是吗？就在我这么想时，我的心中出现了一个不属于我的声音，它对我说道：「你是真的认为是屋顶漏水的吗？你难道不是对窗户边那个可以站着的男人产生嫉妒以及在自己无法站立的事实前产生绝望所流下的眼泪吗？」</p><p>也许正如你所说的吧，我对心中出现的那个声音附和到，但它完全不理会我，好像一开始就不存在一样地消失了。</p><p>我再度躺到床上，看向天花板。也许正如刚刚那个人所说，我的确是对自己无法再次站立这件事产生绝望并且嫉妒着能正常行走的他吧。只是，一旦开始思考起这种不合常理的事，就感觉全世界处处是不合理的地方，虽然我的想法上非常明白，但我就是忍不住想对什么人发脾气，但我发现没有什么人比起我自己更合适对自己发脾气了。</p><p>机会难得，我想尝试看看久违的哭一次。我也不管周围的人是如何想的，我将头埋进枕头里开始哭，眼泪化成一滴滴水滴在枕头上，我就像是要将几年间积累的眼泪全部哭干一样不断地哭。</p><p>我感觉到我的肩膀被人拍了一记，但因为在这个病房里我没有任何熟人所以让我感到惊讶。「不管对方是谁，我都不想正面被人看到我的这副模样」我简单擦拭了脸上的眼泪，看向后方。</p><p>最先印入眼帘的是他脸上大到有小半张脸的胎记。「为什么是他？他来我这里想干什么？难道是因为我的哭声太大影响到他而过来教训我的吗？」一旦开始思考他人的想法，各式各样的猜测都从心底里不断涌现，让我无心思考别的，注意力只专注在「他为什么要来到我的病床前。」</p><p>「我的疑问直到最后都没有得到他的解答。我想，那时的我之所以没有向他询问他为什么要来到我的病床前的答案是因为我还认为『反正我们的时间还很足够。』如果当时的我明白我们之间已经没有剩下多少时间的话，我一定会向他询问他当时为什么会来到我的病床前。</p><p>他坐到我病床旁的凳子上。他似乎是为了让我确定他手上什么也没有一般将两只手摊开放到我的眼前，在我确定后他手上没有任何东西后，他将手掌合起摩擦了两下手掌后，停下动作不动，正当我以为他发生什么情况而靠近查看时，随着一声轻微的声响后，他的手掌出现了一朵白色的花朵，那是一朵不管怎么看都跟真花这个定义无法搭边的人造花。但在他的手上，这朵花显得格外美丽，我想，眼前的这朵花它一定是我从过去到现在所见过花中最美的一朵，因为这朵花它不是为了别人，而是为了我而绽放的。</p><p>　　看完他的表演，过了一会，他似乎感觉自己将事情搞砸了一般低下头，看到他的这副样子我发出了笑声，他似乎对我的反应感到惊奇，用一副傻眼的表情看着我。</p><p>我不回应他，只是静静看着他手上的那朵纯白色的人造花。他看到我没回答，也很礼貌的不追问我，耐心的等待我的回答。我们之间大概经历了几分钟的沉默吧。</p><p>回过神来，我先对他表达了一声感谢。「谢谢。」我对旁边的他说道。</p><p>「不客气。刚刚你为什么要哭呢？」</p><p>「不知道。我知道我这么说你可能不太相信，但我哭的理由连我自己也不是非常清楚。我只是久违的想哭哭看，但没想到一哭起来就一发不可收拾了。」</p><p>「原来如此。你哭的理由我也不是不能理解。」</p><p>我想，就是在这个时候吧。让我首次对什么人产生了好感，不，那个时候这份感情也许还不能称为好感吧，可能更像是一种「眼前的这个人说不定会理解我的」这种心情吧。</p><p>自那天之后，我跟他的关系越来越好。他每天都会将他学习的魔术变给我看，尽管他的技巧不是多么高超，偶尔还会犯些小错误，但这些都没有关系。他的表演，是当时的我每天唯一期待的事情。</p><p>那时的我，由衷的期待这样的日子能更长一些，但我想老天爷就是那种不会聆听人愿望的存在。越是期待的事情越不可能实现，越是期待长久的事情就会越快结束，但要说这种话也得老天爷真的存在才可以，也许这时的我只是想借着老天爷表达些什么也说不定吧。</p><p>这一天，他也像平常一样来到我的病床旁将白天练习好的魔术变给我看。在他表演完后，我也像往常一样鼓掌。这时的我，还不知道他接下来即将要告诉我足以改变我往后人生的一句话。</p><p>如果故事在这里结束就好了，我曾无数次的如此期待，但我就是像是被冲上岸的人鱼一样无力，只有接受的这项选择。</p><p>「我准备离开了。」他很平静地对我说道。</p><p>因为事出突然，让我的反应一下慢了几秒。「准备离开？」我像是为了确定我没听错他说的话般将话重复了一遍。</p><p>「是的，医生前些日子来通知我可以离开的事情了。」</p><p>「……是这样啊，那恭喜你出院。」</p><p>「谢谢。」</p><p>「以后，我会跟你联系的，可以请你将你的联系地址给我吗？」</p><p>「可以，你等一下。」</p><p>他走到一旁的桌子上开始写东西。过了一会，他将写有他联系地址的纸条交给我。</p><p>我跟他的对话到此为止，跟他的关系也到此为止，已一段关系的结尾来说，说好听点也不能说是太好。</p><p>几天后，他的母亲就来到医院将他接走。离开时，他来到我的病床旁对我说了些什么，但当时的我根本没有将他的话听进耳朵只是尽可能的敷衍他赶紧离开。</p><p>我想，那时的我虽然想法上明白他的离开是迟早的事，但就是无法很好的感知他已经离开的这件事，在他离开后的那段日子里，我每天都期待着他能回到这间病房，再次来到我的病床旁将他练习好的魔术表演给我看，但在他离开快一个月后我也终于不得不接受他已经不会在回到这里来的这件事。</p><p>在他离开后的几个月后，我接到了医生的通知，说我可以暂时出院回家休养一段时间。在接到医生的出院通知时，说真的，我并没有感到多高兴，我只是满心想着「啊啊，终于可以离开这里了。」</p><p>隔天，我的母亲就来到病房接我。她走到我的病床旁对我说：「千草，准备一下。我们要走了。」</p><p>母亲的态度非常的冷淡。说真的，如果不是因为我跟母亲长的实在太过相像说我们是母女应该都没有人会相信。想必在母亲眼里，我一定是个令她感到厌烦的存在吧。</p><p>我不回应母亲，自顾自的穿上衣服等待母亲说离开。</p><p>「千草，我们走吧。」</p><p>拿上行李，我跟着母亲走出病房。走出这间曾经拥有着我跟他回忆的房间，这时的我，没有对即将失去这个回忆的场所表现出半点伤心的情感，我想那时的我还深深怀有着「没过多久我大概就要再次回到这里来的想法吧。」</p><p>然而我没有得到这个机会。就是在这天晚上，我第一次遇见了人鱼，不，应该说是自称人鱼的女巫吧。</p><h2 id="夏日的奇迹"><a href="#夏日的奇迹" class="headerlink" title="夏日的奇迹"></a>夏日的奇迹</h2><p>出了医院大门就看到父亲停好车子等在那边，自我开始住院起，我就基本没有见到过父亲，在我的印象里父亲是一个非常和蔼可亲的人，但现在我眼前的这个男人虽然面容与过去相比多了一种岁月的痕迹，但现在的他看起来跟过去那个和蔼可亲的父亲有了明显的不一样。</p><p>他看到我与母亲后叫我们上车坐好。我与母亲坐在父亲的车子后座。在开车回到家的路程中，母亲她们一句话也不说，只是静静地看着窗户外的景色。我原以为只要我的病情有所好转，母亲她们就会变回原本的样子，但事到如今，我才真的明白，只要病这种东西不从根本上解决掉，我所面临的问题就不会有任何的好转。</p><p>回到家中的我，坐上母亲准备好的轮椅，母亲站在我的身后，推着轮椅前进，让我回到自己的房间。</p><p>将我送到房间后，母亲对我说：「你先好好休息，等等吃饭了我会上来叫你。」</p><p>我正准备转头过去示意母亲我知道了，但转头过去她人已经不在那里。</p><p>我推动轮椅到书桌前。书桌上还放着我曾经看到一半的书与摆放着我还能站立时跟母亲她们一起在海边游玩的照片的相框，我拿起相框尝试看清母亲她们的笑容，但它与桌面上的书都积了一小层的灰，使我看不清照片原来的模样。对现在的我来说，母亲她们的笑容根本无法想像，我只能从曾经存在她们笑容中的物品中摄取一点「曾经母亲对我也是很温柔」的美好回忆。就在我如此回忆时，我心里曾经出现的那个声音再次对我说道：「事到如今，你才发现到这种行为只是自己单方面的自舔伤口吗？显然不是。你不是早已对这种状况心知肚明了吗？」</p><p>「你这是什么意思？」我对它询问到。</p><p>「你不懂我的意思吗？」它说道。</p><p>「那我转换一个说法来说好了，你真的是因为看不到她们的笑容才感到悲伤的吗？」</p><p>「……」</p><p>说完这句话，它就消失了。不论我如何在心中呼喊它，它都没有再对我做出回应。</p><p>我放下相框，坐在轮椅上静静思考它说的话，但不论我如何检视自己的脑袋都得不出合适的回答。</p><p>过了十几分钟，母亲上来叫我吃饭。</p><p>到了客厅，父亲正坐在椅子上看电视。母亲为我装好饭后，我们坐在客厅吃饭。吃饭过程中，父亲与母亲话也不说一句，只是各吃着自己的饭，在客厅里不断传来的只有从电视里发出的凄凉笑声。吃完饭后，我跟母亲说我想尽快回到房间休息，让她送我回房间。</p><p>回到房间后，我下了轮椅躺到床铺上，我没有任何想做的事情，躺到床铺上后我只是静静地看着天花板，也不知道是在什么时候，我就这么睡着了。</p><p>再次醒来，已经是深夜两点多。我坐上轮椅下到客厅寻找水喝，在喝了一点水后，我打开玄关的大门决定外出散散心。</p><p>这天深夜，我捏着轮椅轮子独自走在空无一人的街道上。 夏日夜晚吹来的凉风，有些格外的冷。但我不以为然，依然独自走着。 走了大约十分钟后，我来到了一处可以看到大海的沙滩。但走近一看，我才发现这片沙滩已经结束了它做为一片沙滩的使命。随处叠放的破旧电视、已经完全变了样的木制书架、屏幕裂开的电脑显示器，看到这幅景象不知怎么的我感到一种久违的安心感，仔细思考这份安心感之后我得出「大概是这里的环境不会在变的更差所以让我得到一种安心的感觉。」</p><p>随着海面吹来的凉风，让我的身体微微一震，为了避免感冒，我准备离开海滩回到家中。就是在这时，从不远处传来了那个声音，那个在现在这个时代已经基本听不到的那个声音。我朝着声音的方向看去，在那里的是一个与这个堆满破旧物品场所显得格格不入的鲜红色电话亭。我就像是被电话铃声吸引的傀儡一样，等我回过神来，我已经站在电话亭的旁边。在只有轻微海浪声的的海边，电话亭的电话铃声显得异常大声，正当我犹豫要不要走进电话亭接起这通「可能是打给固定某个人」的电话时，电话铃声中断了。听不见电话铃声后我不由自主的松了一口气，看来我比自己想像中更重视这通电话。但没过多久，电话铃声再次响起，它就像是知道我在电话旁边一样，电话的铃声不断的回响在夜晚的海边。我用力拉开电话亭的门，力气大到令我产生一种说不定会将整个门都扯下来的错觉。进入电话亭后，我还是犹豫着要不要接起这通可能是打给每天固定在这个时间会来到这里的某个人的电话又或者是无聊随便找了一个电话打，可能性这种东西一旦开始思考就会无止境的开始想像，但我的这个疑问，在接起电话后的几分钟就得到了电话那头的那个人的解答。就在我思考其他可能性时，电话也在一旁响个不停，仿佛是催促我赶紧接起电话。</p><p>「在做好被电话另外一头的人说一顿的准备后我接起了电话。」但之后的发展，完全超乎我的预估。</p><p>「你曾有一段放不下的过往对吗？荻上千草小姐。」</p><p>听筒那方说话的是一个女人，先不论她说的是什么，她确实准确无误的说出了我的名字，但她根本不给我多于的思考时间，只是自顾自的继续说着。我停止一切多余的想法，将注意力全部放在她接下来说的话。</p><p>「在不久前，你曾对深町阳介这个人产生了好感，但他突然地离开令你对他产生了一点不好的情感，同时你的心里也产生了一种如果不是我的腿脚不方便的话，我也许也能追上他的想法。」</p><p>那么，现在我来让你脚恢复成没有损伤前的状态，但与此同时，你也必须答应我一个条件。</p><p>听完她的发言，我花了大约近一分钟的时间才全部理清。理清思绪后我对她说道：「假设你说的是真的好了，但你知道你现在说的东西有多么疯狂吗？」</p><p>「我知道。但对现在的你来说这是一场不坏的交易吧？」</p><p>「你说的条件是指什么？」我问道。</p><p>「如果你不答应我玩这一场游戏，那么你知道这件事也没有什么用。」</p><p>我将听筒从嘴边拿开，陷入短暂的沉思。「正如电话那头的女人说所，如果先不看条件是什么，这对我来说的确是一场不坏的交易。」但这种说治就能治好的事情怎么可能存在，电话那头正在说话的女人一定是疯了。我准备就这样将电话挂断，但当我想这么做时，我的想法中出现了一种恶魔般的期待，「也许那个女人真的是拥有什么我无法想象的本事，确实能治疗好我的腿脚也说不定。」没过多久，我的脑袋就被「可能与不可能」这两种想法装满，根本无心想那个女人所说的条件到底是什么。</p><p>最后，我果然还是输给了自己的期待，我决定答应那个女人的游戏。但话说回来，我并不是真的打算相信那个女人所说的一切，我所采取的方法是「先答应她的游戏，看情况在决定日后的走向，毕竟这种说给你治好就能治好的人根本不可能存在。」</p><p>不论对方是想耍我还是别的什么，我都决定先答应她的游戏。</p><p>我拿起听筒对她说：「我决定参加你说的游戏，现在，可以请你告诉我条件是什么了吧？」</p><p>「可以。因为你已经接受了我的游戏。我的条件就是『你往后的人生中有一段时间是由我来掌握的，时间的长断也由我来决定。』」</p><p>「时间的长断也由你来决定？那你不就相当于把我的人生变成你的了吗？」</p><p>「话是如此。但你的人生值不值得我将它变成我的东西呢？」</p><p>这个女人的问题提的非常讽刺。她应该是故意这么说的，因为她毫无保留的用我能听懂的话说出我最讨厌的话。</p><p>我不回答她的问题。问她：「你什么时候能治好我的腿脚？」</p><p>「嘟嘟嘟嘟……」</p><p>那个女人将电话挂断。留下我一个人独自待在原地。伴随着电话挂断声，我的心情渐渐恢复平静。</p><p>离开电话亭，我坐在轮椅上思考那个女人到底是怎么知道我会在今天晚上外出。如果说我曾经会深夜外出那可能是我身边的某个人为了耍我而做的恶作剧，但今天我会出来纯属是巧合，就连我自己都无法预测到，当然如果说那个女人只是刚好撞上这个巧合打电话给我那只能说是巧合撞上巧合，但她准确的喊出了我的名字，如果事已至此在说这是巧合，就有点自欺欺人的感觉。我放松身体，靠在椅背上。不论我怎么思考，我都无法想出那个女人是如何做到的。</p><p>「不是有一个假说可以证明吗？」我的心中传来那个声音。</p><p>「你说的假说是什么？」</p><p>「你自己不是应该最清楚吗？其实你有解释这一切的答案，只是你自己不愿意接受那个答案罢了。」</p><p>不要说了。我没有完全相信那个女人说的一切，就算到了现在我的理性也由为清楚的告诉我「刚刚发生的一切其实是一场整人节目。」因为如果不是这样，那个女人所说的一切只能证明她疯了，事实上也可能确实是这样。</p><p>「如果说那个女人说的一切都是虚假的，那么曾一度尝试相信她发言的你岂不是更疯狂吗？」</p><p>我不回应它，任由它口沫横飞的说，也不知道是什么时候，它就不在说话就这么消失了。</p><p>在海滩上待了一段时间后，我准备起身回家，我捏着轮椅的轮子向着家的方向出发。海风像是要护送我回家一般，在我转身准备离开时吹起一阵清爽的凉风。我转身看向远方，浅黑色的天空正逐渐泛白。为了避免被父母发现我偷跑出来的事情，我加快速度回家。</p><p>到达家门前后，我避免发出声音小心翼翼的打开家门。家里跟我离开前没有什么变化，看起来，母亲她们应该还没有醒来。松了一口气后，我尽量避免发出声音回到自己的房间。</p><p>回到房间后，我躺到床上开始思考起今天晚上那个女人说的话。「那个女人所说的东西，虽然荒唐令人无法相信，但她确实说出了我的期待。如果说，她说的一切是真的，那对我来说说不定会是一件好事吧。」在思考这件事的过程中，我不知不觉间睡着了。</p><p>当然，隔天起床后我的期待没有实现，想来也是理所当然的，说治就能治好这件事怎么可能存在。虽然我自认自己没有在期待这件事的发生，但从结果上看，我比起自己认为的还要在意这件事。</p><p>我起身坐到床边看向窗外。窗外的天空像被石灰涂抹过一般灰蒙蒙的，使人无法看清天空原有的颜色。每到夏天，美渚汀都会异常的炎热，所以能在夏天里看到这样天气的日子实在是非常稀少。</p><p>明明是白天，但周围却安静的出奇，俨然就像是身处在一座空无一人的城市，但我并不讨厌这种感觉。</p><p>就在这时，从楼下传来一阵像是铃铛的声响，我不去搭理这个声音，但它就像是催促我赶紧过来一般不断的发出声响。我回到床上，将被子盖过头底决定不去理会就这么等它自己消失。过了一会，发出这个声响的人似乎是累了停止发出那一阵阵的声响，就在我以为不会发出声响准备在睡一觉时，门口传来敲门声。</p><p>我提高警觉，将注意力都放在门口上。这时，门外传来母亲的声音。</p><p>「千草，你睡醒了吗？」</p><p>在听到母亲的声音后，我的心情稍微得到了放松。我不回应她，等她自己离开。</p><p>但母亲像是看出我不想理她一般自顾自的说道：「千草，刚刚有送货员给你送来了东西，你有时间了出来拿一下。」</p><p>我不顾母亲说的东西，只是独自待在房间里看着一片洁白的天花板，家里洁白的天花板与我在医院里看到的非常相似，记得那时是我刚住进医院没多久的一天。</p><p>那天在接到医生的报告后我躺在病床上想医生先前说过的话。但话说回来，我不记得医生说了些什么，我的意识从医生说出「以后你再也无法行走」这句话后就中断了，我想医生在那之后说的话我都无法准确的体会吧。</p><p>「尽管到了现在，我也无法准确相信自己已经无法走路，但我就像是路边的小石子一样，既便被人踢动也无法做出任何反抗。」</p><p>这时，我想起母亲对我说起过的放在门口的东西。</p><p>我打开房门，一个纸箱正放在那里。在确定了收件人荻上千草后我才将纸箱拿进房间。</p><p>我拆开纸箱，里面放着用看起来很高级的牛皮纸封起来的信封，信封的上面写着我的名字。拆开信件，里面放着一张来自参叶国中的录取通知书，除了通知书以外还有一套一起寄来的水手服，看来这套衣服就是参叶国中的校服。</p><p>如果说，这封录取通知书能在早一点寄来我应该会发自心底里的高兴吧，但现在的我即便收到这封录取通知书也丝毫想笑的感觉都没有，我只是满心想着「啊啊，原来还有这件事啊。」不过，现在才寄到也没有什么用了吧？以我现在这副样子，是绝对无法正常上下学的。</p><p>我坐在轮椅上不动，「为什么这种事情偏偏要发生在我的身上？」我对着空无一人的房间问道。当然，我并没有得到回答，我只是独自思考着这件事。越想只觉得这个世界上的一切是那么的不合理想尽情破坏。</p><p>我搜索周围有没有即便破坏了也没有关系的东西，最后，我的视线放到了跟随录取通知书一起寄过来的水手服。「反正我也没办法去上学了这衣服就算怎么样了也没有关系吧？」我在桌子上找能破坏衣服的工具，这时，我看到了沾了一点灰尘的笔筒里插着用来剪纸的小剪刀，到了这时我才发现，这个剪刀原来除了剪纸还能用来剪破衣服。</p><p>我将衣服拿起放在眼前，将拿着的剪刀对准衣服靠近，准备就这么剪下去。</p><p>「咚咚咚……」门外突如其来的一阵声音使我的脑袋一下冷静了下来，我停下手中的动作任由剪刀与校服从我手中滑落。缓过神来时门外的那个声音已经停止了。</p><p>我将校服与滑落的剪刀捡起收拾好放在桌面上后躺到床上。</p><p>我将毛毯盖过头顶什么也不想只是这么躲到漆黑一片的世界里，因为我觉得如果不这么做，我一定又会做出什么比刚刚更出格的事情，也不知道过了多久，我就这么睡着了。</p><p>我独自一人坐在轮椅上看着大海，海水随着一阵阵波浪拍打着岸边溅起形状不一的浪花，眼前的景色很美，我发自心底里的这么认为。正当我准备继续享受这段安静的时间时，我的意识中断了。</p><p>在眼睛只能睁开到一部分的状态下我最先看到的是类似我房间的天花板图像，我努力让眼睛对焦将眼前的图像合成一幅清晰的画面，但意识的不清晰使我没能成功。刚从睡梦中清醒的身体本能的向我的脑袋发出需求水的要求，喉咙就像是被火烤一般传来一种异常难受的感觉，我下了床铺走到桌前拿起水杯里的水喝，但杯子里只有不到一点的水根本不够喝。</p><p>我打开房门准备走下楼梯，意识还不清晰的我为了避免踩空扶着楼梯间的栏杆一步步慢慢走向厨房。到到厨房后我就像是饥饿到了极点的野狼一样冲到冰箱前从里面取出清水喝下，缓解了口渴后我打开厨房的后门走到外面。</p><p>夏天是非常炎热的一个季节，我想这应该很多人知道，但是晚上的夏天却非常凉爽，我想这应该很少人知道，至少在这美渚汀里夏天的夜晚基本不会有人在外面。</p><p>迎面吹来的凉风非常的清爽，这阵风中既有炎热夏天的味道也有夜晚的夏天的感觉。「夏天真的是一个很不可思议的季节呢」我如此想道。</p><p>在吹了一会凉风后，模糊的意识也逐渐清晰，我关上后门准备就这么回到房里继续睡觉。</p><p>走出厨房的几秒钟我突然意识到一件事，一件在很久以前我还会天天做的事，但那件事由于几个月前发生的事故而剥夺走了我做这件事的权力。这辈子恐怕在也无法走路了，医院里的医生对我如此说道。几经尝试没有用后我也终于决定接受自己无法在走路这个无力改变的状况时，几天前的那个深夜，那个女人所说的东西却颠覆了我原本的认为。当时的我以为这只是一场无聊的整人节目，但现在眼前发生的状况却告诉我那个女人所说的一切都是真的。</p><p>「我的大腿正比直的站立着……」</p><p>因为事情发生的太过突然，我甚至怀疑自己是不是根本没有睡醒还在梦境中又或者是天天想着大腿能复原而最终想疯了导致脑袋出现问题认为自己的大腿终于好了。</p><p>但事实上我的脑袋非常清楚，因为脑袋有问题的人是不可能觉察到自己的脑袋有问题的。</p><p>正当我为眼前的状况找不着头绪时，那个声音再次在黑暗的空间里响起了，那个可能可以解决我一切问题的声音。</p><p>走廊的另外一头，座机正发出一声声声响。我就像是害怕失去刚刚得到零用钱的小孩子一样跑到座机前接起电话。</p><p>我原以为我会对着电话那头提出一大堆问题，但事实上我却什么也说不出只是静静等待着电话那一边的人说话。</p><p>「晚上好，荻上小姐。」</p><p>「……」我不回应她，等待她继续向下说。 也许你现在正在想为什么我会知道你家里的电话，为什么会知道你现在会站在座机的旁边又或者为什么我会选择现在打电话给你吧？</p><p>「……你，你到底是什么人？」</p><p>电话那头的女人用很得意的声音回答我道：「我是人鱼王国的人鱼。」</p><p>「人鱼王国的人鱼？」我就像是为了避免听错一样，而重复了一遍她刚刚说的话。</p><p>「是的。」</p><p>如果说，将这个女人现在所说的话放在曾经我一定不会去给予理睬，但现在我却开始相信这个女人说的东西是真的，我想我根本就是疯了。</p><p>你打电话来做什么？</p><p>「来做什么？做为治疗好你大腿的条件你忘记了吗？」</p><p>当她说到条件时我才想起这件已经被我忘到脑袋角落的重要事情。</p><p>「所以说，你现在是来履行你的条件的吗？」</p><p>「不是。我今天打电话来是为了恭喜你的。」</p><p>「那还真是谢谢你。」</p><p>「嘟嘟嘟嘟……」</p><p>那个女人不等我说完就将电话挂断，她就像是夜晚里的星星一样在白天即将来临时什么痕迹也不留的就这么消失了。</p><p>这天夜里，我基本没有睡着，只是静静地看着天花板与大腿度过夜晚漫长的时间。我想我应该是在害怕吧，害怕一旦闭上眼睛，大腿就会恢复成无法行走的模样，害怕一旦睡着再次醒来时就会发现大腿复原只是我做的一个美梦。</p><p>但隔天醒来后，我周围发生的情况都在告诉我「这不是在做一场美梦，我的大腿确实复原了。」</p><p>我能准确体会到我的大腿已经复原这件事全靠母亲与父亲脸上惊讶的表情。简单来说，当他们看见我的大腿可以笔直站立时，他们的嘴巴张大到了可以当做下巴的位置，他们甚至以为两个人产生了相同的幻觉看见了一个跟自己女儿长的非常像的人而不停的询问有关过去的事情来确认我是他们的女儿「荻上千草」这个人。不过，他们反应也是很正常的，毕竟在几个月前自己的女儿已经被医生打上了「这一辈子都不可能在行走的标签」会感觉到惊讶也是理所当然的吧。</p><p>父亲与母亲他们将我的大腿复原归究于奇迹这类的说法，虽然他们嘴上对我这么说，但我很清楚他们根本没有了解事情经过的打算，他们只是将眼前看得见却无法理解的东西给归为奇迹这类的说法罢了。</p><p>自那一天起，我的生活有了很大的改变，父亲与母亲对我的态度越来越和善，来到新学校后同学们对我非常好，我的朋友也逐渐多了起来，在这之后，我的父亲因为工作上的成功顺利买下了一套比我们之前住的要好的多的房子。自那一天起，我身边所有的事情都变的越来越好，我就像是要将先前不幸时期没有使用过的运气放到现在全部使用完一样不断过着幸福的生活。如果一定要形容这段生活的话，就像是一种周围一切都变的太合理的这种感觉。我就像是《灰姑娘》故事中的灰姑娘一样，在得到了女巫的帮助后就此过上与之前截然不同的幸福人生，但自从那一天起这个自称人鱼的女人就像是《灰姑娘》故事中的女巫一样在帮助了我之后就这么消失没在我的身边出现过。</p><p>她消失的这段时间里已经让我将她曾经说的约定忘到了记忆的深处。</p><p>「这时的我因为过于注重眼前的幸福，而忽视了今后的日子。但是我想不只是我，这个世界上应该也有人拥有着这种『只要现在好，以后的事情以后再说吧』的处事论吧。」</p><p>在大腿复原后的那段日子里每当父母对我露出他们那种久违的笑容时我都深刻感觉到「如果我的大腿不复原那一切应该就不会是这样了吧」的想法，其实会有这段想法也不是什么奇怪的事情，如果你也曾经看过我住院时期母亲他们对我露出的态度就会完全理解我说的东西了。</p><p>「也许任何人在拥有成功一面的背后也都潜藏着一败涂地的可能性，只可惜到了如今依然有很多人不顾眼前难以翻身的局面只是相信着所谓的曾经或者以后可能会变好的以后。如果说，人所面临的问题不能得到根本的解决，周围的情况是很难拥有好的转变的，我再次深刻感受到这点。也许人生就是这种只要出现蝴蝶振翅般的变化就会走上与曾经截然不同的路。」</p><p>今日，我向往常一样外出上完学回到家中在自己的房间里看书。看书这个习惯是从我小时候就拥有的习惯，除了住院那段时间停止后我对看书这件事依然保持着很高的热情，如果说我的房间里有什么跟我这个年纪很不相配的东西那就是我的房间里摆放着一个放满书的大型书架。母亲看到我天天在家中看书也难免担心我会不会因为看书这件事而变得无法跟周围的人正常沟通只是天天看书，她也曾耐心劝导我要出去跟朋友玩，但被我以「我想将我住院时期没看完的书看完」为由给拒绝了。不过话说回来，这些书不论我看书怎么慢也完全可以在一年内看完，到了我升上国中三年级马上就要毕业升上高中的现在，母亲也没有再来劝导我出去想必是因为她已经发现了，她的女儿我不想出去这件事吧。</p><p>说起我国中度过的日子，虽然可以说是有趣但绝对谈不上是会让我印象深刻的校园生活。尽管我上的是美渚汀里最好的国中，尽管我在学校里有很多的朋友，尽管我在里面有很多快乐的回忆但我就是会记不住这些，比起这三年来的快乐记忆我在国小时期的悲惨生活还让我更印象深刻一点，但如果要说在这三年里有什么事情是让能我印象深刻的话，确实是有一件事。</p><p>记得那是在刚上国中的第一天，在临近上课前的几分钟我坐到座位上拿出教科书预习等等课上要教的内容，但在隔了三个位置的右手边有一个位置上发出异常吵杂的声音，那声音并不是由一个人发出，而是至少有四，五个人在说话，它们说出的话杂乱在一起使人根本无法听清它们到底说了些什么。起先我以为那些人正在霸凌什么人，但从他们的装束上看去并不像是那种小混混的打扮。在他们中的一个人离开后我看见了那个女孩子，在看见那个女孩子后我也终于理解为什么那群人会挤在那个位置的附近，因为那个位置上坐着初鹿野 唯。</p><p>其实什么位置坐上了什么人对我来说都没有太大的影响，但是这个女孩子与我不同，她却有着坐上了什么位置都能带来影响的魅力。</p><p>自那之后我总是不自主的去注意这个女孩子，一旦开始注意她后，我就很明显的发现这个班上的大部分人也都基本将注意力放在初鹿野 唯这个女生身上，不过想来也是很正常的，如果说我是个男孩子我也一定会对她产生好感，她就是有这样的魅力。</p><p>从她的表现上来看，她很清楚自己的魅力但从来不过度使用，她与任何人都保持着一定的距离，既不会让人感觉到遥不可及也不会让人感到太好亲近但她对周围人群的笑容让我感到一种痛心疾首，她的笑容有种勉强的感觉在其中，如果不是我也曾经经历过这种笑容想必是不可能发现的吧。但当时的我根本无心探究她为什么会这么笑，如果说初鹿野 唯这个女孩子除去这点真的可以说是完美，她的魅力不只是从她的样貌中散发出来的，她的举手投足或者行动方面都做的非常出色，那时的我对她的表现感到一种发自心底里的佩服。</p><p>初鹿野 唯这个女孩子的笑容给我一种勉强自己的想法这种感觉也只到国中二年级时。还记得那是正值夏日的某一天，初鹿野 唯也像往常一样来上学。最早注意到初鹿野身上异常的是经常会跑到她身边找她聊天的一个名叫「美纪」的女孩子。她看着初鹿野的脸说道：「唯，你的脸上那个黑点是怎么回事？」听到她这么说，周围的人马上跑到了初鹿野的身旁开始问她脸上的黑点是怎么回事？但初鹿野并没有回答她们，只是摸着脸上的黑点像是在抚摸什么来之不易的宝物一样。原本大家都以为那是年纪到了会自然长在脸上的东西所以没有在提起这个黑点的事情。</p><p>但自从那天过后的半个月，初鹿野脸上的黑点越来越大，现在已经长到有小半块脸的程度。对于这个类似污秽的痕迹，同学们之间存在着很多的说法，有的人说初鹿野是活该，有的人同情初鹿野的遭遇，有的人说初鹿野可怜，有的人对于初鹿野的遭遇感到开心，真的可谓是五花八门。但初鹿野本人似乎根本不在意这些，反倒因为脸上长了这个污秽的痕迹而感到开心，周围同情初鹿野遭遇的同学们也积极鼓励她不要自我放弃，她也像是将这份鼓励深深记在心里一样积极回应周围鼓励她的同学们。那个时期的初鹿野如果要说与曾经有什么明显的不一样的话我想就是出现在她脸上的污秽与她笑容中出现的改变。她的笑容与过去有着明显的不同。如果说她曾经的笑容给我的感觉是一种「什么美好东西被破坏殆尽所剩下的残骸」的话，那么她现在的笑容给我的感觉「就像是得到了什么无可替代的美好东西一样。」但对于我来说，她的改变不只是这些。</p><p>初鹿野脸上的那个痕迹跟我曾经看过的他脸上的痕迹很像，跟那个曾经被我单方面讨厌又被我单方面当做朋友的他。</p><p>「这时我还没能理解到，初鹿野脸上的那个痕迹会对我们三个人的人生产生多大的改变。我只是静静地享受着当下的幸福人生，如果说我能早些觉察到初鹿野脸上的痕迹是怎么回事，也许一切就会不同了，但我值到最后也没能得到这个机会，也许这就是对我的报应吧，对一心耽溺于幸福人生的我的报应。」</p><p>曾经身为初鹿野同班同学的我们一直都无法理解一件事，那件事是发生在升上国中三年级的时候。某一天初鹿野没有来上学，在这天之后的明天，后天，大后天她也都没有来上课。虽然老师说是初鹿野同学家中发生了一些事情，但看老师回应的态度她也应该不是很清楚发生了什么事。就这样，她一个星期都没有来上学，再次看见初鹿野时，我想谁都无法相信眼前这位态度冰冷的少女会是曾经那个积极回应大家鼓励的少女。虽然同学们都有问她发生了什么事，但初鹿野本人一点都不愿意谈，即便是导师问她她也只是以「没什么」应付她。</p><p>自那时起，初鹿野就很少来到学校，就算偶尔来到学校里也只是什么都不说一个人坐在座位上，久而久之曾经跟初鹿野熟识的人也开始觉得初鹿野不想跟她们做朋友了而逐渐蔬远她。虽然同学们私底下会讨论初鹿野的身上发生了什么，但却不在她的面前问这件事了，不在她面前讨论这件事，在不知不觉间同学们形成了这种默契。</p><p>距离上一次见到她，已经是三个星期以前的事情。这时同学们都忙着学习或者开始考虑上什么高中而烦恼着，而我则已经通过自考进入了「美渚第一高中」就在前几天我的录取通知书也已经收到了，虽然母亲跟我说不去学校上学也没有什么关系了，但我还是坚持想将国中时期的日子全部过完。我想对我来说这段国中生的日子算是代表了我幸福的一段日子。</p><p>「然而幸福这种东西，一旦到了某个瞬间就会完全抛弃你。」明白这件事是在国中毕业典礼的当天。</p><p>这天，我起晚了，一睡醒换上校服就赶到学校参加毕业典礼。到达学校时，校门口已经被数不清的父母们围住，我花了不少气力才成功进入学校。到达校内后我赶到班上，同学们正兴趣高涨的讨论着今后的去向以及放假了要去哪里游玩等等，我则坐在座位上等候老师过来通知毕业典礼的开始时间。大约过了二十分钟，老师来到班上通知我们下去集合开毕业典礼，到达体育馆后老师开始点名，在点到初鹿野名字时班上没有人应答也没有任何人说出她去了哪里，老师也不管她如何只是持续着点名，在确定了只有初鹿野一个人没来后老师告诉我们不要吵闹便离开了座位。</p><p>过了几分钟，校长走到了讲台上开始致毕业典礼词。讲了大约二十来分钟后，校长以「在这里，祝各位同学顺利毕业」为最后一句话结束了这场毕业典礼。毕业典礼结束后，老师走到我们的面前通知我们拿上放在班级里的东西就可以回家了。</p><p>回到班上，同学们先是各自道别在来就是决定放假后组织一起去哪里玩。当然，我没能参加去哪里游玩的讨论，这样说可能有点问题，准确来说是我自己不想去参加那边的讨论。我跟几个关系要好的同学们道别后就离开了教室踏上了回家的路。</p><p>这时，如果我已经知道我没有多少时间的话我想我至少应该跟她们每个人认真道别一下才对，但我没有得到这个机会。</p><p>进入家中后，我被家中突然响起的一阵声音给吓了一跳。我朝声音的来源靠近发现是家中的座机正在响，我想也没多想就接起了电话。</p><p>「首先，恭喜你国中毕业。荻上千草小姐。」</p><p>电话那头传来我熟悉的声音。</p><p>「……你打电话过来不可能是单纯为了恭喜我的吧？」</p><p>「是的。我这一次打电话过来还有一件事但恭喜你国中毕业也是真的。」</p><p>「那还真是谢谢你。那么，你说的另外一件事是什么？」</p><p>「你果然忘记我们的约定了啊。」</p><p>当她说出约定后，我开始回溯记忆中的约定，到了这时我才明白她这次打电话来是为了什么。</p><p>「你现在是来实现跟我的约定的是吧？」</p><p>「看起来，你想起来是什么事情了。是的，这次我打电话过来就是为了实现这个约定的。」</p><p>「……如果我违约的话，你会怎么样？」</p><p>「违约吗？我想你自己应该非常清楚违约的话会有怎么样的后果吧。」</p><p>「……」</p><p>「在你拿走这个身体前，我有一件事想问你。」</p><p>「荻上千草小姐，我想你现在没有理由可以问我什么事吧？」</p><p>「话虽如此，但你会选择在这个时间段拿走我的身体一定有你的理由吧？」</p><p>「我想就凭这点，我有理由可以问你事情。」</p><p>那个女人发出一声类似嘲笑般的笑声后对我说：「虽然我没有义务回答你的问题，但做为你最后的一个问题我就回答你好了。」</p><p>「请说吧。荻上千草小姐。」</p><p>「深町阳介现在过的好吗？」</p><p>「……没想到。」</p><p>「我原以为你会问我一些你什么时候将身体还给我或者我可以活多久这类的问题，没想到你竟然会问我关于别人的事情。」</p><p>我不说话，等待她解答我的疑问。</p><p>「他过的不算好。」</p><p>「不算好是怎么回事？」我反问她。</p><p>你的一个问题我已经回答完了，荻上千草小姐。</p><p>「对你来说，他的事情你只要了解到这里就好了。」</p><p>「了解到这里是怎么回事？他现在到底过……的」我的意识到这里中断了。</p><p>再次恢复意识醒来时，我正躺在医院的病床上。意识恢复大半后，我坐起身来，在我起身后一个蓝白相间的记事本滑落到病床的边缘线附近，我拿起记事本翻开。上面写着的是距今一年前值到前几天发生的事，但我回溯记忆我根本没有写过这种东西，而且记事本上面写着的事情我根本都没有印象。这时，我想到了那个女人，那个自称是人鱼的女人，如果说这个记事本上面写的一切都是真的话，那么写这个记事本的人一定就是她。</p><p>我不懂她这么做的用意，但她放在这里一定是希望让我看，虽然我没有肯定的根据，但我就是这么认为的。</p><p>我坐在床上将记事本翻到第一页开始看起，那是从我失去意识后的隔天开始的故事，那是发生在一九九几年的夏天里的故事。</p>]]></content>
      
      
      <categories>
          
          <category> 短篇小说 </category>
          
          <category> 系缒三日的秋天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻小说 </tag>
            
            <tag> 恋爱 </tag>
            
            <tag> 校园 </tag>
            
            <tag> 三秋缒 </tag>
            
            <tag> 奇幻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《重启人生》 ——致，我一落千丈的人生</title>
      <link href="/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E7%B3%BB%E7%BC%92%E4%B8%89%E6%97%A5%E7%9A%84%E7%A7%8B%E5%A4%A9/starting-over-again/"/>
      <url>/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E7%B3%BB%E7%BC%92%E4%B8%89%E6%97%A5%E7%9A%84%E7%A7%8B%E5%A4%A9/starting-over-again/</url>
      
        <content type="html"><![CDATA[<p>转自：知乎</p><span id="more"></span><p>我接下来要说的故事跟你曾经听过的故事可能有所不同。</p><p>如果说人生可以重新开始，很多的人应该都会利用第一人生中的后悔与反省来期待更加美好的第二人生。</p><p>每个人应该多少都有那么些后悔。有的人后悔没有在年轻时代好好爱过一个人，有的人后悔在年轻时代谈了恋爱，有的人后悔没有好好跟父母说过一次话，有的人后悔告诉父母什么事，有的人后悔跟什么人扯上关系，有的人后悔没跟什么人早点变熟。嗯，总之我想表达的就是「人生就是伴随着后悔」关于这点，你也应该大致会认同。</p><p>但是，说起我做的事，几乎跟上述完全相反呢。不，其实我也曾做过蠢事哦。</p><p>当我得知我的人生倒转了十年我是这么想的。「为什么要对我做这么多于的事情？」</p><p>成为一个对自己人生毫无后悔的人应该非常稀有吧，什么重新开始人生的机会应该要给那些天天祈祷人生能够重新来过的人吧？但是呢，机会这种东西往往是给那些不祈求机会的人，从这点来看老天爷还真是爱唱反调呢，当然，要说这种话也得老天爷真的存在才行呢。我应该是想通过老天爷来表达些什么吧。</p><p>说起曾经我是如何忍受那么悲惨的高中生活？说起来也是非常无聊的理由。</p><p>在教室里面有一个男生，那个看起来与我一样被人孤立起来的人。他跟我一样没有朋友可以聊天，至少在我可以看见的时间里我从来看见他与什么人交谈过。眼睛里总是表露出一种「我根本不属于这里的眼神」，他就是这样的一个男生。</p><p>真要说的话，他的个子还算高，长着清秀的五官。他的视线总是朝下，偶尔必须与人四目相对时就像是在瞪别人一样，就算与人沟通也从来都是一副高高在上，完全不在意别人的态度。虽然他的态度如此，但从旁看来他完全不具备拥有这种态度的资格就是了。</p><p>他与我念的是同一所国中，我们在国中时代绝不是找不到任何朋友，只要我们愿意主动开口搭话，分散在教室角落的那些人自然会将我们当做朋友。但很糟糕的是，当时的我心中还怀有着很强的坚持，打个比方来说就是「我认为我还是曾经那个人人称赞的女生。」我从以前就认为朋友这种东西就是应该由其他人来主动靠近我的。当然，就算我在怎么迟钝，也不可能对不主动就交不到朋友这点没有任何的察觉，准确来说是我察觉了却完全没有想行动的想法。</p><p>我曾以为，时间过去我所面临的问题就会有所好转，但实际情况却不是如此，我所面临的问题的确没有变的更坏，但也没有任何好转的现象。谁也不能保证等了就会有好的结果，就像是雨等了也不一定会变小，离开的人等了也不一定就会回来，我的等待只是再一次的重现了过去无数人所证明的不可能。</p><p>不知不觉就说到了朋友这个方面上，我本来是要说怎么度过这段悲惨生活的吧？</p><p>那是升上国中三年级的时候，比起先前，我在班上受到孤立时的自卑感变的异常大。每当到了这种时候我总是看向那个男生，看向那个与我一样没有任何朋友的男生。说起来，我的做法真的是很不要脸「也就是说我将那个男生的悲惨经历当做一种理所应当的镇静剂，虽然我很清楚这种做法有多么不要脸，但当时的我如果没有这么做，就一定无法保持正常的理性。」话说回来，我感觉他也是将我的处境当做一种镇静剂来保持他的理智。你可能会想说我有被害妄想症，但如果你看过一次他的眼神你就会完全理解我在说什么了，那是一种彻底地瞧不起人的眼神，也就是说我们两个人虽然想的不同，但骨子里却是同一类人吧。</p><p>说起被孤立时的状态？真的是糟糕透了，但当时的我因为有他的存在而感到庆幸，光是看着他不幸的模样就让我深深的感到救赎哦。我曾不只一次凭借着「我虽然被女生们孤立，但跟他比起来我还是有一些方面比他强来看不起他。而他则是凭着我虽然被男生们孤立，但比起男生被孤立还是女生被孤立比较可怜吧来看不起我。」嗯，当时的我们就是借着这种想法来伤害彼此与互相安慰的。</p><p>一年级的时候，我还不太习惯这种孤单一人的生活，而跑去图书馆看书打发时间。而他也是这样，所以我们经常在图书馆碰到。虽然我们认识彼此，但却不会出口打招呼，只是就这么擦肩而过，不打扰对方。</p><p>在每个月都会来访的意志消沉期，我总是选择去医务室来躲避这段时间。然而每三次就会有一次跟他碰到，看来他跟我想逃的课都是一样的啊。</p><p>虽然这种做法不是很好，但是效果却很显著。如今回忆起来，如果不是有他的存在，我或许早就离开了那间学校，一个人躲在房间里很闷酒也说不定，但正他的出现，我才没有变成这样，我由衷的感谢他出现的这件事。</p><p>在那之后，我与他的关系变的更亲密了，明明我们两个人根本不像是那种可以与人变的亲密的样子，但也许正是因为当时的我们怀着这种相同的想法才导致我们多多少少变亲密了一点吧。</p><p>还记得那是因为班导多于的想法，让我们可以自由选择座位，但自由选择座位的人不能选择最后一排，由此一来坐最后一排的人就成了完全不介意座位的人。当时的我每五次换座位就会有一次跟他坐一起，自此之后大家好像也都将我跟他坐一起视为一种合情合理。每当大家投来那种好像我们是一对的眼神时，我总是在想「有没有搞错，为什么会把我跟这种人想成一对？我的男朋友可比他优秀太多了，把我跟他想成一对我也很困扰的好不好？」每到了这种需要忍受同学眼神时我总是看向他以求得心灵上的慰藉。</p><p>我跟他不仅是孤立的原因相同，就连孤立的本质也很相同。我们都有着一副「我们根本不属于这种地方」的眼神。其实就我而言我非常清楚第二人生的自己有多么不像样，根本就没有任何资格去小看他人，但是每当我想起第一人生的种种时我总是想着「你们这些人跟我第一人生所交的朋友根本就是两个极端，看不起你们也是理所应当的吧」。当然，在她们看来我可能是比他们更不怎么样的人就是了。</p><p>我总是因为想着第一人生的幸福，才导致迟迟无法接受第二人生的现状。就算到了现在，我也不断的在想「为什么我的第二人生会变成这样？我明明是按照第一人生一样的选择来做的，为什么会出现如此大的偏差？也许正是因为经历了完美幸福的第一人生，才导致了我无法接受现在的第二人生也说不定。」</p><p>这天，离开学校回到家的我，将书包扔在地上后就躺到床上。我闭上眼睛，回忆起第一人生的幸福与常叶在一起的日子。回忆第一人生的幸福，这是来到第二人生的我每天必做的事情，无论春夏秋冬，阴晴雨雪我都不曾中断这件事。每当回忆起第一人生的幸福，我就越感第二人生的糟糕，真的是糟糕的人生呢。我想这就是对我的报复吧，不是对任何人，而是对我的报复，对天天耽溺于幸福的我的报复。话说回来，我也曾想过会不会就是因为老是想着第一人生的幸福，才导致第二人生的我迟迟无法融入这个环境。</p><p>我祈祷着一觉醒来，第三人生能重新开始，我怀抱着这份期待睡着了。</p><p>醒来之后，映入眼帘的是房间的天花板。意识清醒后，我朝自己的手看去，并没有变小。我的祈祷失败，第三人生变没有开始，我还是待在第二人生里，也许是我睡糊涂了「认为只要我希望，第三人生就会重新开始，实际上发生在我身上的事情本来就是『不可能发生的事情』」，而这种现象只能称它为奇迹了，而我却想有意识的去引发奇迹，看来我真的是睡糊涂了。我曾在一本医学书上看到，身患绝症的人有可能在自己不知道的情况下痊愈，而这种现象只能说是奇迹，但这种奇迹不可能连续两次降临在同一个人身上。现在，我对这点已经很明确地体会到了。</p><p>我自以为自己没有期待第三人生，但醒来之后发现人生没有改变的我比我自己原本想的还要失落，看来我远比我自己想的还要更期待第三人生。</p><p>我本以为我的这种愚蠢会因为时间而渐渐被消磨殆尽，但经过了这样的一段时间后我才明白真正被消磨殆尽的并不是这份愚蠢，而是我自身。</p><p>就在日复一日的这种状态中，我迎来了高中的毕业典礼，紧接着是原本应该让我感到开心的大学生活。</p><p>原本看起来美丽的一切，现在看起来是那么的刺眼让我打从心底里感到厌恶。</p><p>「今天，就放弃去学校好了。」决定好后，我打电话给班导已身体不舒服为由请假。</p><p>请好假后，我回到床铺里面继续补觉，自从来到第二人生后，我的睡眠时间就比第一人生增加了几倍，曾经我认为睡觉是人生的浪费，但现在我觉得睡觉才是人生的一件大事。要我来说，之所以会认为睡觉是人生的浪费那是因为活着的人有太多要做的事与幸福所以才会认为睡觉这种要花费几个小时的事情是一种浪费，这句话既然是由曾经过的非常幸福的我来说就一定没错。假设一个人活着不会发生任何好事那对这个人来说它还会继续醒着延长这份痛苦吗，我想不会，所以睡觉这种可以减少几个小时痛苦的事就成了对我们这种人的恩惠。醒来之后，我独自一人躲在公寓里面喝闷酒，我原本以为酒这种东西跟我这种人是最没有缘分，但从结果来看，我错了，酒跟我们这种人的契合度是最高的。</p><p>不过这件事只有当人生过的不幸之后才能理解实在是太讽刺了。</p><p>说到底，只是我将一切想的都的太简单了。</p><p>我以为只要一切按照过去的模样重新下棋，我的人生就能变成我期待的模样，可单我下完后，坐在我对面的命运却一步步将我推落地狱的深渊。</p><p>如果说，我早一点觉察到这不对劲。</p><p>如果说，我早一点明白选择的相同，不代表带来的结果也是相同这件事的话，我想一切也许就不会是现在这样了。</p><p>可一旦究其根源，都是因为我与其他人做了不一样的选择。</p><p>可这又有什么错，比起那些贪婪的人企图改变悲惨人生的人，我只是遵守了规则，选择了重现我原本的人生，我只是按照了原本的历史，应该没有任何的问题才对啊。</p><p>但到了现在回过来想截至目前的一切，我也才明白，我不打算改变人生这点就是我最大的错误。</p><p>因为我做了与其它人截然不同的选择。</p><p>因为我选择了不改变人生，与其它人不同，我知道未来的一切，因为我的选择让原本不可定的未来变成了确定，我为了自己的幸福而忽视了原本未来可能改变的一切。</p><p>手上的啤酒罐发出刺耳的声音。</p><p>我将已经变了形的啤酒罐用力甩在地上。</p><p>「可是这一切跟我有什么关系啊。」</p><p>「我只是遵从了原本的人生，没有为此做过任何错误的事，我只是期待一切能像原来一样啊。」</p><p>那是原本就属于我的人生、我的过去、我的未来、我的现在，我的一切，这原本都该是属于我的东西却都因为那个「分身」而一切都变了样。</p><p>我无时不无刻都希望那个「分身」赶快消失。</p><p>只要一旦她消失了，常叶一定就会看向除了她以外最符合第一人生女友的我了。</p><p>可是根本没有任何确切的根据指明「分身」消失后一定是这样，在与原本人生的对照下，我根本就无法再肯定的说出一定会是这样这种话了。</p><p>虽然心里很明白这件事，可我只能无力的选择相信，不然我想我一定会受不了接连而至的现实。</p><p>为了平复自己的内心，在这之后我采取了连我自己都难以想象的做法。</p><p>当我回过神来时，我已经成了新闻上很经常听到的跟踪犯。</p><p>至于我为什么会采取这样的行动在这之后我也无法说出个大概。</p><p>如果一定要给这个行动找个理由那我认为最符合的说法就是「慰藉。」</p><p>可我很清楚，这根本就不可能从根本上解救我，相反会让我心中的裂缝更加的增大。</p><p>我只能从跟踪常叶与第一人生中的回忆中摄取幸福的养分，但越是这样只能越发的感到空虚。</p><p>但我很清楚，这根本不是长久的。</p><p>总有一天，我会将幸福的花蜜吸食殆尽从而导致花朵的枯萎。</p><p>旧的回忆总会被新的记忆取代，而能根本解决这个问题的方法其实在一开始离我很近，只是因为我表现的太有把握了，所以一切才变的不断超出我的预计。</p><p>如果在那一刻，我能不那么有把握而是遵从第一人生中的不安与担心或许结果就会导向与第一人生完全相同的结果。</p><p>现在就算想起来那时的记忆，也尽是让人感到不快。</p><p>那是在国中三年级与第一人生中相同的樱花盛开的季节中的某一天傍晚。</p><p>与第一人生相同，当无关紧要的人都离开后教室后只剩下常叶与我独自留在教室中。</p><p>「与第一人生中完全相同。」我在心中想到。</p><p>在符合的时间点出现了该出现的人。</p><p>「只要完成这最后一步，这样至少算是完成了一个阶段。」</p><p>可是常叶却自始至终不对我开口，好像只是在单方面的享受着两个人独处一室却互不发言的这种氛围。</p><p>就在我想着该如何让常叶开口时，常叶他却先开口了。</p><p>「柊同学，这样会不会很尴尬？」</p><p>「终于来了，想好该怎么跟我告白了吗？」</p><p>当然，我只是将这想法埋藏在心里并没有说出来，我表现的不以为然的回答道。</p><p>「不会，倒是常叶同学你不回去吗？」</p><p>「对不起，让你感觉困扰了吗？」</p><p>「我不是这个意思，只是好奇这个放学时间为什么你还不准备回去。」</p><p>「我也不太明白，总感觉有什么事情还没做所以还不能走。」</p><p>「是这样啊。」</p><p>「你还没向我告白呢，我已经做好了答应的准备，你可以来告白了。」</p><p>「……那个，柊同学。」</p><p>「来了，终于要来了。」</p><p>「叮叮叮叮叮叮……」</p><p>伴随着刺耳的清校铃声，完全的掩盖了常叶的声音。</p><p>「对不起，常叶同学你刚刚说什么？我没听清楚。」</p><p>「也没什么特别的，只是到了清校时间，女孩子一个人回家也不安全吧，想问一下你要跟我一起走吗？」</p><p>「说的也是，那就麻烦你了。」</p><p>「真是倒霉，偏偏在这个时候响起铃声。」</p><p>我在心里埋怨了一句。</p><p>如果不是因为这个铃声，常叶应该就会顺势对我表白了。</p><p>但是现在换到公园去，我想结果也是一样的就没有多在意。</p><p>但我这时根本就忘记了，我从这一刻开始就已经偏离了第一人生。</p><p>这个细微的改动带动了接下来的一切连锁反应。</p><p>被夕阳染红的街道我与常叶的身影融入其中。</p><p>被夕阳照耀着常叶的侧脸看起来有点不同于同龄人的成熟。</p><p>「会这样也是理所应当的。」</p><p>毕竟他可是我第一人生中的男朋友。</p><p>就算是到了第二人生有这么优秀也是理所应当的吧。</p><p>沉默在我们之间弥漫开来。</p><p>时间仿佛定格在了一刻间，常叶不在说一句话，我们只是抱持着适当的距离肩并肩走着。</p><p>「不好意思，让你感觉尴尬了吧。柊同学。」</p><p>常叶开口打破了我们之间的沉默。</p><p>「不会，我想你一定是在想什么事情吧。」</p><p>「很明显吗？」</p><p>「嗯，很明显，就像是已经写在脸上等待别人来说一样。」</p><p>常叶干笑了几声回答我。</p><p>「不好意思，影响你心情了吧。」</p><p>「不会，看你这个样子一定是什么很重要的事情吧。」</p><p>「嗯，是对我来说很重要的一件事。」</p><p>「关于以后升学的事吗？」</p><p>「……不是。」</p><p>不知道是不是因为夕阳照射的角度不同了，常叶的脸看起来有些许微红。</p><p>「……老实说，我也不知道该怎么说这种事情。」</p><p>看这个模样「一定是指对我告白这件事了。」我在心里想到。</p><p>「如果你不介意，可以跟我说说。」</p><p>「这不太合适吧。」常叶想了一会说道。</p><p>「……」</p><p>「这有什么不好意思的，我明明都已经给你一个绝好的告白机会了。」</p><p>当然我并没有将这句话说出口。</p><p>就在我刚刚短暂的犹豫之中，我想起第一人生中他对我告白时的场景，他紧张的神情、颤抖的声音，我想常叶现在所体会的应该就是第一人生中他的那种苦恼。第一人生中的他在鼓起勇气向我告白前也一定是在这样的犹豫后才做了决定。</p><p>或许真的是我太着急了，我其实根本没有必要去刻意制作方便常叶来告白的场景，当他想好一切自然就会遵守第一人生中的一切来找我告白，我只需要适当的引导常叶做这个选择就好了。</p><p>「既然你都这么说了，那我就不问了。但是我觉得你既然有想做的事情那就去做吧。」</p><p>「不管结果是怎么样，至少不要让自己留下遗憾。」</p><p>「说的也是，谢谢你。柊同学。」</p><p>这样就好了。我只需要进行引导接下来只要等待常叶的告白就可以了。</p><p>「不客气，以后如果有什么问题也可以跟我说。」</p><p>然后我们就这样你一句我一句不断的闲聊着。</p><p>这之后我与常叶的关系一天比一天亲密但自始至终常叶都不来向我告白。</p><p>虽然从那天后我知道等待是一个磨人的过程，我也明白我不能着急为了最好的还原历史，我所能做的就是等待。</p><p>但耐心伴随着一天、两天、一个星期、两个星期、甚至快过了一个月我都还没有得到常叶的告白，就在我终于快忍耐不住时常叶终于来找我了他说有件事想告诉我。</p><p>「等待终于得到了回报。」</p><p>还好我一直等待，接下来一切就会按照原本的历史进行下去。</p><p>我是这么想的。</p><p>「我准备向喜欢的女孩子告白了。」</p><p>「终于来了。」</p><p>「说起来常叶你还记得我们第一次一起回家时也跟我说过有在烦恼的事情吧。」</p><p>「难道就是这件事吗？」</p><p>其实这个问题根本毫无意义，经历过第一人生的我很清楚这个问题的答案，只是在即将迎面而来的幸福前不经意的想去抓弄一下。</p><p>「嗯，因为那时我还没有决定，因为对方是个很好的人我觉得自己配不上她所以不敢尝试告白。」</p><p>「常叶的这番话让我不禁想起第一人生中他跟我告白时的模样，原来他当时表现的那种紧张是因为担心这个。」</p><p>「不过，我想你应该不用担心，只要将你真实的心情传达给对方，我想对方一定会感觉到。」</p><p>「那你准备好告白了吗？常叶。」</p><p>「嗯，我想明天就告白。」</p><p>「……或许，现在也可以哦。」</p><p>「谢谢你，但是我还是打算按照自己本来想的那样去告白。」</p><p>「是这样啊。」</p><p>「他们果然就像是游戏中出现的固定角色一样，只会遵照原本的计划来不会根据眼前的情况做出改变。」</p><p>我在心里叹了一口气。</p><p>不过仔细想想他们也只是遵守原本人生，对我来说也节省了我去刻意引导人生走向同样结果的辛苦。</p><p>与常叶道别回到自己家后，我倒在床铺上想着常叶明天会怎么跟我告白。</p><p>会是跟第一人生一样的告白吗？还是说有一点不同呢。</p><p>应该是会有一点不一样吧，毕竟常叶给我与第一人生中的他，该怎么说？感觉还是有一点不同，不过我想这也是正常的吧。就像是电脑主机关闭重新启动的过程中会额外生成一些其它东西，常叶恐怕也只是经历了相同的过程。</p><p>这天晚上我倒在床铺上翻来覆去也睡不着，一心只想着即将迎面而来的幸福。根本无心思考其它的事情。</p><p>一个晚上转眼即逝，我打开房间的窗户，窗户外的天空染上了一层乌云。</p><p>说起来，昨天的天气预报中好像是有提到今天可能会下雨。</p><p>「老天爷也真是不做美。」我在心里想到。</p><p>坐在教室里的时候我等待着时间尽快度过。</p><p>终于等到放学时间，班级上的人一个个离开教室只剩下我跟常叶后我想终于可以跟第一人生一样了。</p><p>可是常叶却始终不朝我走来。</p><p>就在我奇怪是怎么回事时，教室的门被拉开。</p><p>是一个女孩子。</p><p>她看了一眼坐在教室中的我跟常叶。</p><p>「不好意思，我进错教室了。」说完她将教室的门再度拉上。</p><p>可是就算门关上后常叶也是一言不发的坐在那边。</p><p>我们就这么坐着事情不会有一点前进。</p><p>我站起身拿起书包朝教室外走去。</p><p>这样一来常叶不会还是什么动作都没有吧。</p><p>可当我用眼角的余光扫到常叶他还是仍然坐在那边。</p><p>「喂，你在做什么？常叶。你的告白对象的我可是要离开了你怎么还在那边不动？」</p><p>「你到底在做什么啊。」</p><p>「就算是在紧张看到我这样了你都还是没有任何举动吗？」</p><p>「我就不相信我真的离开了你还能这样坐在那里。」</p><p>我走出教室将门拉上。</p><p>在没有人的走廊一步又一步踩到地板上的声音显异常大声。</p><p>一步、两步、十几步，走到走廊尽头下楼的楼梯就在那，我回头看向教室的位置，常叶仍然没有走出来。</p><p>我走下楼，每到一层就停下来等一会常叶追上来。</p><p>慢慢的我已经走到第一层常叶却还是没有追上来。</p><p>我就这样独自一人站在教学楼的门口等待常叶出来。</p><p>可不管我等了多久常叶就是没有出来。</p><p>「就算是紧张我也不至于到这种程度吧。」</p><p>觉得事情有点不对劲的我走上楼到我们的教室。</p><p>快到教室门口时我听到了常叶的声音。</p><p>「我喜欢你，请你跟我交往吧。」</p><p>常叶说完后没有任何回应。</p><p>「原来是这样，常叶是在做对我告白的预演。」</p><p>「如果这个时候看到我来，他一定会很惊讶吧，预演被要告白的对象听到，不知道他的脸会红到什么样。」</p><p>正当我走到教室外一点准备拉开教室门时，教室门的玻璃上透出的景象却与我想的完全不是一个模样。</p><p>常叶的面前站着一个女孩子。</p><p>是刚刚打开门进来教室的女孩子。</p><p>她刚刚不是已经走了吗？为什么会在这里？常叶为什么要对她告白？</p><p>这些问题一下冲上脑袋，一时之间我根本来不及处理这么多问题，而在下一秒。</p><p>从教室中传出了女孩子的声音。</p><p>「……好的。」</p><p>我没有多想马上逃离了现场，我也不知道是怎么回事，心里只想着尽快离开这里，不管是哪里都好，只要尽快离开这里。</p><p>这天的隔天我直接以身体不适为理由请假在家。</p><p>在隔天被父母以「现在是升学的重要时期不要浪费时间」而被催促去学校。</p><p>可是到了学校我也根本无心去学习，我的心自始至终都停留在常叶对那个女孩子告白的那一刻。</p><p>在我恍惚中已经到了放学时间。</p><p>将我拉回现实的是常叶。</p><p>「柊同学，你没事吧。」</p><p>意识从恍惚中清醒。</p><p>「啊，我没事。」</p><p>「我看你今天脸色不太正常，而且昨天也请假，你病还没好吗？要不要去保健室请老师看看。」</p><p>「不用了，我们走吧。」</p><p>回家路上，常叶的脸上毫不掩饰开心。</p><p>「谢谢你，柊同学。」</p><p>「欸？为什么要向我道谢？」</p><p>「因为你的鼓励我已经向喜欢的女孩子告白成功了，她已经答应做我的女朋友了。」</p><p>其实我本来昨天就想告诉你这件事并跟你道谢的，结果你没有来但是今天说也不晚吧。</p><p>「真的非常谢谢你，柊同学。」</p><p>常叶的眼中没有一丝虚假，他是真的感谢我。</p><p>「……不……不要，拜托你不要用这种眼神看我。」</p><p>我推了一下常叶从他身边跑开，我想在常叶的眼中我的眼神一定像是看到了什么可怕的东西。</p><p>这天之后我总是刻意的回避着常叶，在上课时我也根本没有了任何的心思，当然在这样的状态持续了一段时间后，毫无疑问我的成绩自然避免不了逐渐变坏的局面。</p><p>最后在面临升学考试时我的成绩与第一人生时相比更是一落千丈。</p><p>在这之后我进了一所比第一人生差的多的高中。</p><p>入学后的分班，虽然周围看起来都是一群笨蛋但是到了这种学校的我毫无疑问也已经成为它们的其中一员。不过至少在这里我不用担心会遇见常叶。</p><p>至少在这这个学校里我可以享受之前我没能享受的心灵上的安静。</p><p>不管怎么回忆都尽是让人不快的记忆。</p><p>我停止回忆从回忆中抽身，我想我明天还是会像今天一样吧。</p><p>成为一个跟踪狂，借此给予自己心灵上的慰藉。</p><p>我讨厌这样的自己。</p>]]></content>
      
      
      <categories>
          
          <category> 短篇小说 </category>
          
          <category> 系缒三日的秋天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻小说 </tag>
            
            <tag> 恋爱 </tag>
            
            <tag> 三秋缒 </tag>
            
            <tag> 奇幻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>温大神</title>
      <link href="/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E6%97%AD%E6%97%A5%E4%B8%9C%E5%8D%87%E7%9A%84%E4%BC%A0%E8%AF%B4/i-may-ak-ipho/"/>
      <url>/Eternity/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/%E6%97%AD%E6%97%A5%E4%B8%9C%E5%8D%87%E7%9A%84%E4%BC%A0%E8%AF%B4/i-may-ak-ipho/</url>
      
        <content type="html"><![CDATA[<p>东辰高中竞赛教室的格局，是和别处不同的。</p><span id="more"></span><p>东辰高中竞赛教室的格局，是和别处不同的：都是前面一个长方形的大展台，台上预备着答题卡，可以随时考试。停课搞竞赛的人，早上七点四十，每每散步到教室去，吃魏主任买的包子，——这是退役前的事，现在六点二十起床，——几个人分一袋，热热的吃了刷题；倘肯多花七块，便可以买一瓶<a href="https://www.zhihu.com/search?q=雀巢咖啡&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra={:,:1540871187}">雀巢咖啡</a>，做饮料了。食堂是有早饭的，但这些搞竞赛的，多是懒狗，大抵起不了那么早。只有学常规的，才踱进学校食堂里，要大红枣汁酸奶，慢慢地坐喝。</p><p>我从高一起，便在东辰高中学物竞，教练说，样子太傻，怕进不了省队，就混个省一罢。外面的竞赛主任，虽然容易说话，但唠唠叨叨缠夹不清的时候也很不少。他往往要亲眼看着试卷被发下来，看过有没有人考试时睡觉，又亲看试卷被收上去，然后放心：在这严重监督下，划水也很为难。所以过了几天，教练又说我得不了省一靠前。幸亏我的脸皮厚，劝退不得，便改为专混省一垫底的一种无聊职务了。</p><p>我从此便整天的坐在座位上里，专刷我的<a href="https://www.zhihu.com/search?q=程书&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra={:,:1540871187}">程书</a>。虽然没有什么失职，但总觉得有些单调，有些无聊。教练是一副凶脸孔，班主任也没有好声气，教人活泼不得；只有<a href="https://www.zhihu.com/search?q=温志强&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra={:,:1540871187}">温志强</a>上课，才可以笑几声，所以至今还记得。</p><p>温志强是没读过什么正经大学而教竞赛的唯一的人。他身材很高大；青白脸色，言语间时常夹些他妈的；一部乱蓬蓬的头发。穿的虽然是耐克，可是又脏又破，似乎十多年没有补，也没有洗。他对人说话，总是满口<a href="https://www.zhihu.com/search?q=四大力学&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra={:,:1540871187}">四大力学</a>，叫人半懂不懂的。因为他姓温，别人便从描红纸上的“国际金牌教练温志强”这半懂不懂的话里，替他取下一个绰号，叫作温大神。温志强一到班，所有刷题或者划水的人便都看着他笑，有的叫道，“温老师，你出的题又在其他机构出现了！”他不回答，对学生说，“那几道题做完了没有”便排出九页答案。他们又故意的高声嚷道，“你一定又抄了国际竞赛题了！”温志强睁大眼睛说，“你怎么这样凭空污人清白……”“什么清白？我前天亲眼见你偷了那道黑洞的题，吊着打。”温志强便涨红了脸，额上的青筋条条绽出，争辩道，“借鉴不能算偷……借鉴！……金牌竞赛教练的事，能算偷么？”接连便是难懂的话，什么“场论弦论”，什么“格林互易定理”之类，引得众人都哄笑起来：教室内外充满了快活的空气。</p><p>听人家背地里谈论，温志强原来也去嘉祥应聘过，但终于没有应聘上，又不会教常规，于是愈过愈穷，弄到将要到东辰来教书了。幸而装的一手好逼，便骗骗校领导，有了百万年薪。可惜他又有一样坏脾气，便是好耍懒做。教不到几十分钟，便连人和手机游戏，一齐失踪。如是几次，觉得他很吊的人也不多了。温志强没有法，便免不了经常做些装逼的事。但他在我们学校里，品行却比别人都好，就是从不拖堂；虽然间或没有题目的答案，暂时记在笔记本上，但到了一月的第 $32$ 天，定然给学生答案，从笔记本上拭去了温志强的名字。</p><p>温志强上了十分钟课，涨红的脸色渐渐复了原，旁人便又问道，“温老师，你当真教过国际金牌么？”温志强看着问他的人，显出不屑置辩的神气。他们便接着说道，“你怎的在网上半个名字都搜索不到呢？”温志强立刻显出颓唐不安模样，脸上笼上了一层灰色，嘴里说些话；这回可全是<a href="https://www.zhihu.com/search?q=杨天华&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra={:,:1540871187}">杨天华</a>，熊召西，以前深圳中学的校长看他不爽，不准他宣传之类，一些不懂了。在这时候，众人也都哄笑起来：教室内外充满了快活的空气。</p><p>有几回，他批改的题有问题，同学们围住了温志强。他便给他们解释。同学们听了解释，仍然不服，眼睛都望着iPad。温志强着了慌，伸开五指将iPad罩住，弯腰下去说道，“不多了，我会的题已经不多了。”直起身又看一看解析，自己摇头说，“不多不多！多乎哉？不多也。”于是这一群学生都在笑声里回座位了。</p><p>温志强是这样的使人快活，可是没有他，别人也便这么过。</p><p>有一天，大约是复赛前的两三天，某物竞的一方通行正在慢慢的刷模拟卷，取下课堂用本，忽然说，“温志强长久没有来了。还欠十九个答案解析呢！”我才也觉得他的确长久没有来了。一个刷试题选的人说道，“他怎么会来？……他会出的题出完了。”某物竞的一方通行说，“哦！”“他总仍旧是装逼。这一回，是自己发昏，竟装到祝大爷家里去了。他面前，装得的吗？”“后来怎么样？”“怎么样？先说他给东辰要教出几个国际金牌，后来是集训队，装了大半夜，再说这一届可以出几个省队。”“后来呢？”“后来请他去绵阳最贵的餐厅吃饭了。”“吃了饭怎样呢？”“怎样？……谁晓得？许是去小学部从小培养竞赛了。”一方通行也不再问，仍然慢慢的刷他的卷子。</p><p>竞赛出名单过后，秋风是一天凉比一天，看看将近一诊；我整天的补常规，也须穿上校服外套了。一天的下半天，竞赛教室没有一个人，我正合了眼坐着。忽然间听得一个声音，“我烟呢。”这声音虽然极低，却很耳熟。看时又全没有人。站起来向外一望，那温志强便在花坛下对了台阶坐着。他脸上黑而且瘦，已经不成样子；穿一件破卫衣，盘着两腿，下面垫一个挎包，用草绳在肩上挂住；见了我，又说道，“这么简单的题，考得太烂了。”某咸鱼也伸出头去，一面说，“温志强么？你还考前还压了三十个题呢！”温志强很颓唐的仰面答道，“这……这回没中罢。这一回是卢竟，把我的题用来湖南内部考试了。”我仍然同平常一样，笑着对他说，“温志强，你又装了逼了！”但他这回却不十分分辩，单说了一句“不要取笑！”“取笑？要是不装逼，怎么会考前骗我们？”温志强低声说道，“决赛题我经常压中，还有金秋营……”他的眼色，很像恳求我，不要再提。此时已经聚集了几个学弟，便和他们都笑了。我把他说价值数十万的几十套卷子，端出去，放在垃圾桶里。他告诉我他的题是多么多么好，一定不能泄露，见他满手是泥，原来他便用这手打篮球的。不一会，他打完他的部落冲突，便又在旁人的说笑声中，慢慢走去了。</p><p>自此以后，又长久没有看见温志强。到了年关，我取下课堂用本说，“温志强还欠十九个解析呢！”到第二年的二诊，又说“温志强还欠十九个解析呢！”到三诊可是没有说，再到高考也没有看见他。</p><p>我到现在终于没有见——大约温志强的确只懂怎么教物理竞赛国际金牌。</p>]]></content>
      
      
      <categories>
          
          <category> 短篇小说 </category>
          
          <category> 旭日东升的传说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 东辰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《那年夏天……》——经过彻底思量后犯下的错误，仍有着媲美正确答案的价值</title>
      <link href="/Eternity/%E8%AE%B0%E9%9A%8F%E5%BD%B1%E8%90%BD/summer-complex/"/>
      <url>/Eternity/%E8%AE%B0%E9%9A%8F%E5%BD%B1%E8%90%BD/summer-complex/</url>
      
        <content type="html"><![CDATA[<p>作者：（日本）三秋缒</p><p>作品名：《那年夏天，你打来的电话》《那年夏天，我拨去的电话》</p><span id="more"></span><p>如果说《重启人生》给了我感同身受的失败感，则《那年夏天……》给了我非同凡响的治愈。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>分为上下册的较长小说，也能算是一部佳作了。（光是唯的封面已经把我的 $xp$ 戳爆了）</p><h3 id="那年夏天，你打来的电话"><a href="#那年夏天，你打来的电话" class="headerlink" title="那年夏天，你打来的电话"></a>那年夏天，你打来的电话</h3><blockquote><p>拿起听筒的那个瞬间，不可思议的夏天就此拉开序幕。</p><p>“要不要来打个赌？”</p><p>电话那边传来了一个女声，“十岁那年的夏天，你对初鹿野同学心生好感。但对当时的你而言，初鹿野同学实在太遥远。你心想‘我没有资格喜欢她’，用这种想法压抑自己对她的感情。同时你却有另一种想法——‘要不是这个胎记，也许我们的关系会不太一样’。那么，就让我去掉你的胎记看看吧。如果你能因此得到初鹿野同学的心，这场赌局就算你赢。”</p></blockquote><h3 id="那年夏天，我拨去的电话"><a href="#那年夏天，我拨去的电话" class="headerlink" title="那年夏天，我拨去的电话"></a>那年夏天，我拨去的电话</h3><blockquote><p>我一直认为，只要没有这块丑陋的胎记，就能赢得初鹿野的心。于是我答应了神秘女子的赌局，获得了理想的容貌。但讽刺的是，当我和初鹿野重逢时，却在她的脸上看到了似曾相识的丑陋胎记。面对性格大变的初鹿野，我束手无策。同时还被告知，如果不能在规定时间内获得初鹿野的心，等待我的是和童话《人鱼公主》相同的结局。</p><p>夏日的末尾，这场拼尽一切的豪赌即将迎来结果的揭晓。</p></blockquote><h2 id="一些感想"><a href="#一些感想" class="headerlink" title="一些感想"></a>一些感想</h2><p>在托管的晚上 $11:00$ 结束了两本书的阅读。说句实话，对于我这种读书不带脑子的人， $90\%$ 的结局都猜不到，所以才会觉得所有我读过的书的结局都很新颖吧。这，算幸运还是不幸呢。</p><hr><p><strong>警告，以下内容涉嫌剧透，如果没有读过原著，请酌情阅读！！！</strong></p><hr><h3 id="对书中人物的看法"><a href="#对书中人物的看法" class="headerlink" title="对书中人物的看法"></a>对书中人物的看法</h3><h4 id="深町阳介"><a href="#深町阳介" class="headerlink" title="深町阳介"></a>深町阳介</h4><p>作为“我”，已经做到了。这就是为什么三秋缒能写出如此完美的第一人称式小说，就只有他，能够讲述这个夏天的故事。无论从语文角度而讲的人物描写，还是单从轻小说角度而言的一切。这一个人物的塑造都是完美的。</p><h4 id="荻上千草"><a href="#荻上千草" class="headerlink" title="荻上千草"></a>荻上千草</h4><p>无论是人类，亦或是人鱼，两者其实都是一样的，作为一个 $16$ 岁的高中生，洋溢了青春，对健康有所展望，在“我”犯下错误之后去提醒和帮助，并非无情，但也将赌者之心展现的淋漓尽致。这便是小说中悬念能够打动我的原因。也许有人猜到了结局，很可惜，我没有。我上文也说过，即使是这样，我也是满足的，这样才会有惊喜与惊吓。就如同……<font style="color:white">如果人生一样都望到头了，哪还有什么意义可言呢。</font></p><h4 id="初鹿野唯"><a href="#初鹿野唯" class="headerlink" title="初鹿野唯"></a>初鹿野唯</h4><p>太戳 xp 了，无论是失忆前或者失忆后，无论有胎记还是没有胎记。我挺喜欢这类女生的，不因高高捧起而自高自大，发自内心的善良能够改变他人，也不因挫败而垂头丧气，在忘掉一切之后坦然接受，保持一颗开朗的心去面对生活，也许以前我遇见过一个，可惜，可惜已经没有可惜了吧。</p><p>阿姜告诉我，他不太喜欢唯的原因是因为胎记，但在我看来，即使有胎记，我也是喜欢的。就像做过的英语阅读一样，不因外貌而取人，不因富贵而取人，如果真心喜欢一个人，便不需要理由。</p><h2 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄"></a>摘抄</h2><blockquote><p>真要说起来，人多多少少都是一边忘记一些事情一边活下去。真的什么都记得住的人，只有那么一小撮而已。可是，谁也不会抱怨这一点。你知道为什么吗？我想这是因为，大家都知道，到头来所谓的回忆只不过就像奖杯或纪念品，当下这一瞬间才是最重要的。</p><p>你听我说。你也许不知道，但我很喜欢跟你说话。喜欢单方面听你说话、喜欢单方面说话给你听，也喜欢跟你什么都不说，就只是待在一起。要是你不在了，我会非常寂寞。所以，请你不要擅自消失……我可是很担心的喔。</p><p>中岛敦说过，要是什么都不做，人生未免太长；但真要做什么，却又未免太短。八十次夏天，对于无法享受夏天的人来说太多，对于能够享受的人则太少。相信就是这么回事。</p><p>当然说到底，“喜欢”的理由全都是事后安上去的。喜欢星星的人生下来就是会喜欢上星星，就这么简单。</p><p>小时候每个人都是公主、每个人都是王子，做梦也不会想到自己竟然不是灰姑娘，而是她的姊姊。但随着年纪增长，会渐渐感觉到自我认知与他人评价之间有着落差，让人们不得不慢慢修正认知中的自己：我不是公主，我不是王子。</p><p>「那么，我换个问法吧，你希望幽灵是什么样的东西？」<br>她喝了一口饮料，抬头看着天空。湿润的嘴唇被阳光照得发出闪闪白光。 「我想想……以我来说，我希望幽灵是种受了很多苦，怨恨活人、为自己的际遇悲叹的东西。」<br>「为什么？」<br>「如果是这样，不就会觉得活着还稍微好上那么一点吗？」她说话时仍然仰望着天空。「如果幽灵全都是露出一脸安详的表情照看着活人，我应该会很羡慕他们，而想加入他们吧。」</p><p>看在旁人眼里，可能会觉得我只是个被困在孩缇时代记忆当中的傻瓜。但是不管别人怎么说我都不在乎。我想到我死为止，都会是这段记忆的幸福奴隶。</p><p>是夏天的尾声会先到，还是我会先死去？如果可以，我希望我能在夏天结束之前离开这个世界。在积雨云消失之前，在蝉全部消失之前，在向日葵枯萎之前。因为不管什么时候，最寂寞的都是最后一个离开的人。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 记随影落 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻小说 </tag>
            
            <tag> 恋爱 </tag>
            
            <tag> 三秋缒 </tag>
            
            <tag> 奇幻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斜率优化dp/凸包优化dp</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-convex-hull-optimization/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-convex-hull-optimization/</url>
      
        <content type="html"><![CDATA[<p>“不可名状。”</p><span id="more"></span><p>对于一个转移方程，能够表示为：</p><p>$f[i]=Kc[i]+B$ </p><p>的一次函数形式，它则可以使用斜率优化，用于解决单调队列解决不了的问题。</p><p>单调队列可以解决形如 $f[i]=f[j]+x[i]$ 形式的问题，</p><p>而斜率优化用于解决形如 $f[i]=f[j]+x[i]\times x[j]$ 之类拥有 $x[i]\times x[j]$ 形式的转移方程。</p><p>这种题可以使用：</p><ol><li>决策单调性优化dp</li><li>斜率优化dp</li><li>高级数据结构优化dp（如李超线段树）</li></ol><p>来解决。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="P2365-任务安排"><a href="#P2365-任务安排" class="headerlink" title="P2365 任务安排"></a><a href="https://www.luogu.com.cn/problem/P2365">P2365 任务安排</a></h3><h4 id="朴素思想"><a href="#朴素思想" class="headerlink" title="朴素思想"></a>朴素思想</h4><p>首先应该知道，不分批并不一定是最优的，因为<strong>每个任务的完成时间规定为其所在批次的最后一个任务的完成时间</strong>。</p><p>用 $dp[i][j]$ 来表示当前第 $i$ 个工程，已经分了 $j$ 组的最小代价，用 $pret[]$ 和 $prec[]$ 数组表示两个代价的前缀和。</p><p>则有：</p><p>$dp[i,j]=\min\limits_{0\leq k&lt;i}\{dp[k,j-1]+(s\times j+pret[i])\times (prec[i]-prec[k])\}$</p><p>时间复杂度 $O(n^3)$ ，空间复杂度 $O(n^2)$ ，不够。</p><h4 id="费用提前计算优化"><a href="#费用提前计算优化" class="headerlink" title="费用提前计算优化"></a>费用提前计算优化</h4><p>根据以往的做题经验，我们尝试把二维化成一维，即让 $dp[i]$表示前 $i$ 个任务分批执行的最小费用。</p><p>但是这样我们就不知道机器启动过几次了！</p><p>别慌，冷静分析一下你会发现，如果我们要从 $dp[j]$ 转移到 $dp[i]$ 的话，由于第 $j+1\sim i$ 都是在同一批内完成的，我们只需要把 $s$ 对 $j+1$ 后的影响补充到费用中就可以了！</p><p>$dp[i]=\min\limits_{0\leq j&lt;i}\{dp[j]+pret[i]\times(prec[i]-prec[j])+s\times (prec[n]-prec[j])\}$</p><p>时间复杂度 $\mathcal O(n^2)$ ，这就是<strong>费用提前计算</strong>的思想。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,S;</span><br><span class="line">ll dp[MAXN],Tme[MAXN],Cst[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-slopeopt.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-slopeopt.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,S);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Tme[i],Cst[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N;++i) Tme[i]+=Tme[i<span class="number">-1</span>],Cst[i]+=Cst[i<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">            dp[i]=<span class="built_in">min</span>(dp[i],dp[j]+Tme[i]*(Cst[i]-Cst[j])+S*(Cst[N]-Cst[j]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,dp[N]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h4 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h4><p>对于上述的转移方程而言，一共有三个会影响答案的变量：</p><p>$j,dp[j],dp[i]$</p><p>把最小值去掉，然后化简：</p><p>$dp[j]=(s+pret[i])\times prec[j]+dp[i]-pret[i]\times prec[i]-s\times prec[n]$</p><p>那么，这是一个 $dp[j]$ 关于 $prec[j]$ 的一次函数。</p><p>斜率为 $s+pret[i]$ ，截距为 $dp[i]-pret[i]\times prec[i]-s\times prec[n]$</p><p>目标是 $dp[i]$ 最小，即<strong>截距</strong>最小。</p><hr><p>接下来，我会以我所理解的斜率优化阐述，可能不对，慎重阅读！！！</p><hr><p>首先，做出 $x=prec[j],y=dp[j]$ 的图像。并做出相应的散点 $(prec[j],dp[j])$ 。（我们这里首先只说横坐标单调递增的情况）</p><p>对于每一次计算 $i$ 时，我们将一条斜率为 $s+pret[i]$ 的直线从 $-\inf$ 开始向上移动，对于第一个碰到的点，该点对应的截距就是 $\min\{dp[i]\}$ 。</p><p>而对于用 $\mathcal{O}(1)$ 的时间找出最小的点，我们用类似于单调队列优化里的思想维护散点组成的凸包的上下凸边即可。</p><p>对于一个点是否在凸包上，满足：</p><ul><li>该点与上一个凸包点组成直线的斜率小于当前斜率；</li><li>该点与下一个凸包点组成直线的斜率大于当前斜率。</li></ul><p>即对于 $j_1&lt;j_2&lt;j_3$ ，使 $j_2$ 成为凸包点的条件：</p><ul><li>如果上凸，则 $j_2$ 不可能为最优。</li><li>如果下凸，且 $\frac{dp[j_2]-dp[j_1]}{prec[j_2]-prec[j_1]}&lt;\frac{dp[j_3]-dp[j_2]}{prec[j_3]-prec[j_2]}$ 。</li></ul><p>简单来说，对于这三个点，只要 $l_{j_1-j_2}$ 的斜率小于 $l_{j_2-j_3}$ 的斜率即可。</p><p>然后就是类似于单调队列的维护了：</p><ul><li>检查队头元素 $q[l]$ 和 $q[l+1]$ 所构成的直线斜率是否满足：$\frac{dp[q[l+1]]-dp[q[l]]}{prec[q[l+1]]-prec[q[l]]}\leq s+pret[i]$ ，如果满足，则执行 <code>++head</code> ，重复该步骤。</li><li>取出当前队头，更新答案。</li><li>检查队尾元素 $j_1=q[r-1]$ 和 $j_2=q[r]$ ，和当前点 $j_{3}=i$ ，是否满足斜率单调递增，如果不是，则执行 <code>--tail</code> ，重复该步骤。</li><li><code>q[++tail]=i</code></li></ul><p>完成。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">3e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,S;</span><br><span class="line">ll dp[MAXN],Tme[MAXN],Cst[MAXN];</span><br><span class="line"><span class="type">int</span> Q[MAXN],head,tail;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-slopeopt.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-slopeopt.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,S);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Tme[i],Cst[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N;++i) Tme[i]+=Tme[i<span class="number">-1</span>],Cst[i]+=Cst[i<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=N;++i)</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;i;++j)</span></span><br><span class="line"><span class="comment">            dp[i]=min(dp[i],dp[j]+Tme[i]*(Cst[i]-Cst[j])+S*(Cst[N]-Cst[j]));*/</span></span><br><span class="line">    <span class="comment">//O(n^2)</span></span><br><span class="line">    Q[<span class="number">1</span>]=<span class="number">0</span>,head=tail=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;(dp[Q[head+<span class="number">1</span>]]-dp[Q[head]])&lt;=(Tme[i]+S)*(Cst[Q[head+<span class="number">1</span>]]-Cst[Q[head]])) ++head;</span><br><span class="line">        <span class="type">int</span> j=Q[head];</span><br><span class="line">        dp[i]=dp[j]-(Tme[i]+S)*(Cst[j])+Tme[i]*Cst[i]+S*Cst[N];</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;(dp[Q[tail]]-dp[Q[tail<span class="number">-1</span>]])*(Cst[i]-Cst[Q[tail]])&gt;=(dp[i]-dp[Q[tail]])*(Cst[Q[tail]]-Cst[Q[tail<span class="number">-1</span>]])) --tail;</span><br><span class="line">        Q[++tail]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,dp[N]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">4 3</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="P3195-HNOI2008-玩具装箱"><a href="#P3195-HNOI2008-玩具装箱" class="headerlink" title="P3195 [HNOI2008]玩具装箱"></a><a href="https://www.luogu.com.cn/problem/P3195">P3195 [HNOI2008]玩具装箱</a></h3><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>这道题看似是紫题，其实也是一道斜率优化的模板题。</p><p>令 $a[i]=sum[i]+i,b[i]=a[i]+L+1$ ，方便表示 。</p><p>推出转移方程为：</p><p>$dp[i]=dp[j]+(a[i]-b[j])^2$</p><p>然后变成点斜式：</p><p>$dp[i]-a[i]^2=2a[i]\times b[j]+dp[j]+b[j]^2$</p><p>用一次函数的方式表示：</p><p>$x=b[j]$</p><p>$y=dp[j]+b[j]^2$</p><p>$k=2a[i]$</p><p>$b=dp[i]-a[i]^2$</p><p>完成。</p><p>然后用经典的斜率优化单调推进解出即可。</p><p><strong>注：在斜率优化里，一般为了避免除法导致的运行时错误，所以将除法提出变成乘法，但在这一次里，我还是写的除法，算是斜率优化的另一种写法。</strong></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,head=<span class="number">1</span>,tail=<span class="number">1</span>,q[MAXN];</span><br><span class="line">ll L;</span><br><span class="line">db len[MAXN],dp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">calcA</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> len[x]+x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">calcB</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">calcA</span>(x)+L+<span class="number">1</span>;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">calcX</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">calcB</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">calcY</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dp[x]+<span class="built_in">calcB</span>(x)*<span class="built_in">calcB</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">slope</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">calcY</span>(a)-<span class="built_in">calcY</span>(b))/(<span class="built_in">calcX</span>(a)-<span class="built_in">calcX</span>(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-convex-hull-opt.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-convex-hull-opt.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,L);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;len[i]),len[i]+=len[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;<span class="built_in">slope</span>(q[head],q[head+<span class="number">1</span>])&lt;<span class="number">2</span>*<span class="built_in">calcA</span>(i)) ++head;</span><br><span class="line">        <span class="type">int</span> j=q[head];</span><br><span class="line">        dp[i]=dp[j]+(<span class="built_in">calcA</span>(i)-<span class="built_in">calcB</span>(j))*(<span class="built_in">calcA</span>(i)-<span class="built_in">calcB</span>(j));</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;<span class="built_in">slope</span>(i,q[tail<span class="number">-1</span>])&lt;<span class="built_in">slope</span>(q[tail<span class="number">-1</span>],q[tail])) --tail;</span><br><span class="line">        q[++tail]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(ll)dp[N]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">xj=lenj+j</span></span><br><span class="line"><span class="comment">yj=dpj+(lenj+j)^2</span></span><br><span class="line"><span class="comment">ki=-2(L+1-(lenj+j))</span></span><br><span class="line"><span class="comment">bi=dpi-(leni+i-(L+1))^2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="CF311B-Cats-Transport"><a href="#CF311B-Cats-Transport" class="headerlink" title="CF311B Cats Transport"></a><a href="https://www.luogu.com.cn/problem/CF311B">CF311B Cats Transport</a></h3><p>多维斜率优化，推出式子。</p><p>用 $s[i]$ 表示 $\sum\limits^{i}_{k=1}t[k]$ ，则有：</p><p>$\sum_{k = j + 1}^{i}{t_{i} - t_{k}}= \sum_{k = j + 1}^{i}{t_{i}} - \sum_{k = j + 1}^{i}{t_{k}} = (i - j) t_{i} - (s[i] - s[j])$</p><p>用 $dp[i][j]$ 表示第 $i$ 个人选择了 $j$ 只猫的最小代价。然后得出斜率式：</p><p>$s[k]+dp[i-1][k]=t[j]k-jt[j]+s[j]+dp[i][j]$</p><p>$y=s[k]+dp[i-1][k],k=t[j],b=-jt[j]+s[j]+dp[i][j]$</p><p>完成，反正我是不会做的。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXP=<span class="number">1e2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,P;</span><br><span class="line">ll dth[MAXN],tme[MAXN],id,cst[MAXN];</span><br><span class="line">ll dp[MAXP][MAXN],Que[MAXN],sum[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">get_Y</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dp[j<span class="number">-1</span>][k]+sum[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,P);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N;++i) <span class="built_in">read</span>(dth[i]),dth[i]+=dth[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(id,tme[i]);</span><br><span class="line">        cst[i]=tme[i]-dth[id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(cst+<span class="number">1</span>,cst+<span class="number">1</span>+M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) sum[i]=sum[i<span class="number">-1</span>]+cst[i];</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=P;++i) dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=P;++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> head=<span class="number">0</span>,tail=<span class="number">0</span>;</span><br><span class="line">        Que[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;tail&amp;&amp;(<span class="built_in">get_Y</span>(Que[head+<span class="number">1</span>],j)-<span class="built_in">get_Y</span>(Que[head],j))&lt;=cst[i]*(Que[head+<span class="number">1</span>]-Que[head])) ++head;</span><br><span class="line">            <span class="type">int</span> k=Que[head];</span><br><span class="line">            dp[j][i]=dp[j<span class="number">-1</span>][k]-cst[i]*k+sum[k]+cst[i]*i-sum[i];</span><br><span class="line">            <span class="keyword">while</span>(head&lt;tail&amp;&amp;(<span class="built_in">get_Y</span>(Que[tail],j)-<span class="built_in">get_Y</span>(Que[tail<span class="number">-1</span>],j))*(i-Que[tail])&gt;=(<span class="built_in">get_Y</span>(i,j)-<span class="built_in">get_Y</span>(Que[tail],j))*(Que[tail]-Que[tail<span class="number">-1</span>])) --tail;</span><br><span class="line">            Que[++tail]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,dp[P][M]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 6 2</span></span><br><span class="line"><span class="comment">1 3 5</span></span><br><span class="line"><span class="comment">1 0</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">4 9</span></span><br><span class="line"><span class="comment">1 10</span></span><br><span class="line"><span class="comment">2 10</span></span><br><span class="line"><span class="comment">3 12</span></span><br><span class="line"><span class="comment">*/</span>    </span><br></pre></td></tr></table></figure></details><hr><h3 id="P3628-特别行动队"><a href="#P3628-特别行动队" class="headerlink" title="P3628 特别行动队"></a><a href="https://www.luogu.com.cn/problem/P3628">P3628 特别行动队</a></h3><p>当做是我练习推式子的练习题了。发现异常好推。</p><p>令 $s[i]$ 表示为 $x$ 的前缀和，则有：</p><p>$dp[i]=as[i]^2+bs[i]+c+as[j]^2-2as[i]s[j]-bs[j]+dp[j]$</p><p>然后化成函数式表示为：</p><p>$dp[j]+as[j]^2-bs[j]=2as[i]s[j]+dp[i]-as[i]^2-bs[i]-c$ </p><p>$\mathcal{END}$</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll N,a,b,c;</span><br><span class="line">ll s[MAXN],dp[MAXN],val;</span><br><span class="line">ll head,tail,Que[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">K</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*a*s[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">X</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Y</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dp[id]+a*s[id]*s[id]-b*s[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">B</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dp[id]-a*dp[id]*dp[id]-b*dp[id]-c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">slope</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">Y</span>(x)-<span class="built_in">Y</span>(y))/(<span class="built_in">X</span>(x)-<span class="built_in">X</span>(y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-convex.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-convex.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,a,b,c);</span><br><span class="line">    Que[head=tail=<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(val);</span><br><span class="line">        s[i]=s[i<span class="number">-1</span>]+val;</span><br><span class="line">        <span class="keyword">while</span>((<span class="built_in">head</span>&lt;tail)&amp;&amp;(<span class="built_in">Y</span>(Que[head+<span class="number">1</span>])-<span class="built_in">Y</span>(Que[head]))&gt;(<span class="built_in">X</span>(Que[head+<span class="number">1</span>])-<span class="built_in">X</span>(Que[head]))*<span class="built_in">K</span>(i)) ++head;</span><br><span class="line">        <span class="keyword">if</span>(head&lt;=tail) dp[i]=dp[Que[head]]+(s[i]-s[Que[head]])*(s[i]-s[Que[head]])*a+(s[i]-s[Que[head]])*b+c;</span><br><span class="line">        <span class="keyword">while</span>((head&lt;tail)&amp;&amp;(<span class="built_in">Y</span>(Que[tail])-<span class="built_in">Y</span>(Que[tail<span class="number">-1</span>]))*(<span class="built_in">X</span>(i)-<span class="built_in">X</span>(Que[tail]))&lt;=((<span class="built_in">Y</span>(i)-<span class="built_in">Y</span>(Que[tail]))*(<span class="built_in">X</span>(Que[tail])-<span class="built_in">X</span>(Que[tail<span class="number">-1</span>])))) --tail;</span><br><span class="line">        Que[++tail]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,dp[N]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f[j]+a*s[j]*s[j]-b*s[j]=2*a*s[i]*s[j]+f[i]</span></span><br><span class="line"><span class="comment">4 </span></span><br><span class="line"><span class="comment">-1 10 -20 </span></span><br><span class="line"><span class="comment">2 2 3 4 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p>关于 $x,y,k,b$ 的选择：</p><p>首先，明晰斜率优化是用来解决以： $dp[i]=\min/\max\{dp[j]+a[i]+b[j]+a[i]\times b[j]\}$ 的问题，当然 $a[i]$ 和 $b[j]$ 不一定存在，但是 $a[i]\times b[j]$ 一定存在。</p><p>然后，拆下 $\min/\max$ ，并将<strong>只</strong>关于 $j$ 的置于一旁：</p><p>$dp[j]+b[j]=-a[i]\times b[j]+dp[i]-a[i]$</p><p>这个时候，一次函数式就已经列出来了。</p><ol><li><strong>仅</strong>关于 $i$ 的项作为 $b$ ；</li><li><strong>仅</strong>关于 $j$ 的项作为 $y$ ；</li><li><strong>既</strong>关于 $i$ <strong>又</strong>关于 $j$ 的项中，$i$ 项作 $k$ ，$j$ 项作 $x$ 。</li></ol><hr><p>依我看来，斜率优化算是 $\mathcal{dp}$ 一栏里最难的部分了。省选+会涉及，所以根据 <code>wanhui</code> 给我定的目标，我还是不得不学。</p><font style="color:white">说实话，依我而看，我的实力远远不够，后路很长，如果一起前进最后的结果终究是四分五裂。所以，也许，是时候，做出取舍。但即使如此，我也必须努力才行啊。</font><p>$\mathcal{finished\ at\ 2022.5.14}$</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 优化 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 斜率优化 </tag>
            
            <tag> 几何 </tag>
            
            <tag> 凸包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恒永末世，决铭永生，终末之诗</title>
      <link href="/Eternity/%E5%9B%9E%E5%93%8D%E5%9C%B0%E5%9F%9F%E7%9A%84%E8%B5%9E%E7%BE%8E%E8%AF%97/%E5%A4%9A%E5%85%83%E5%AE%87%E5%AE%99%E7%9A%84%E4%BA%A4%E7%BB%87%E4%B8%8E%E7%A2%B0%E6%92%9E/Eternaltale/"/>
      <url>/Eternity/%E5%9B%9E%E5%93%8D%E5%9C%B0%E5%9F%9F%E7%9A%84%E8%B5%9E%E7%BE%8E%E8%AF%97/%E5%A4%9A%E5%85%83%E5%AE%87%E5%AE%99%E7%9A%84%E4%BA%A4%E7%BB%87%E4%B8%8E%E7%A2%B0%E6%92%9E/Eternaltale/</url>
      
        <content type="html"><![CDATA[<p>“Nothing is <font style="color:darkviolet">Eternal</font> but <font style="color:red">love</font>“</p><span id="more"></span><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>现阶段作者：我，即落幕の残影</p><p>现阶段更新平台：Bilibili，网易云音乐。</p><p>现阶段更新方式：OST，小说。</p><p>整个AU共分为五个阶段：</p><blockquote><p>Eternalverse 终末之诗 亘古篇之一</p><p>Eternaltale: Soul Save 恒永末世：魂萦之赎 亘古篇之二</p><p>Eternaltale: Void Origin 恒永末世：源启虚空 过去篇</p><p>Eternaltale: Ashes Finale 恒永末世：烬灭终焉 现在篇</p><p>Eternalrune 决铭永生 未来篇</p></blockquote><h2 id="背景故事"><a href="#背景故事" class="headerlink" title="背景故事"></a>背景故事</h2><h3 id="亘古篇-Before-End"><a href="#亘古篇-Before-End" class="headerlink" title="亘古篇(Before End)"></a>亘古篇(Before End)</h3><p>这是发生在X-tale和Underverse之前的故事。</p><p>涂鸦球领域的某一个角落，这是一条早已被废弃的 Dusttale 时间线，一切都随入了自由，而作为 Dusttale 的原主人——Chara，也当然早已无所不能，「这……肯定不是第一次了吧……」，然而，随意重置，随意屠杀，面对已经对此厌倦的 Sans，Chara 也开始厌倦了起来。于是，她看向了地下室的六魂……</p><p>知晓了，这只是一条废弃的时间线；知晓了，这只是千千万万个时间线的复制体……仅仅是因为 Ink 的一点疏忽，使这个 LV 已经无法计算，成为了一条时间线神明的 Chara，带着她附身的 Frisk ，进入了涂鸦球领域，开始了，别有一番滋味的<strong>屠杀</strong>。</p><h3 id="过去与未来-Under-Choice"><a href="#过去与未来-Under-Choice" class="headerlink" title="过去与未来(Under Choice)"></a>过去与未来(Under Choice)</h3><h3 id="之后的传说-After-Tale"><a href="#之后的传说-After-Tale" class="headerlink" title="之后的传说(After Tale)"></a>之后的传说(After Tale)</h3>]]></content>
      
      
      <categories>
          
          <category> 回响地域的赞美诗 </category>
          
          <category> 多元宇宙的交织与碰撞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UndertaleAU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《重启人生》——无法被修正的过去，和我们再一次的未来</title>
      <link href="/Eternity/%E8%AE%B0%E9%9A%8F%E5%BD%B1%E8%90%BD/starting-over/"/>
      <url>/Eternity/%E8%AE%B0%E9%9A%8F%E5%BD%B1%E8%90%BD/starting-over/</url>
      
        <content type="html"><![CDATA[<p>作者：（日本）三秋缒</p><p>作品名：《重启人生Starting Over》</p><span id="more"></span><p>在中考之前读完了这本书，似乎不是一个正确的时间，但总而言之，得到了心灵的洗礼。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>《重启人生》是作家三秋缒的处女作，但他已经非常尽力的在完善这本书了。</p><blockquote><p>这是，<br>迎接二十岁生日的我，<br>重新回到十岁，<br>又再次走向二十岁的故事。</p></blockquote><p>如果有机会去重新做一件自己认为是成功了的事，我想，凭借着记忆，不会把其做得更好，反而会导致意想不到的结果吧。毕竟，运气和时运都存在在那里。老天爷是不会眷顾同一个人两次的，如果老天爷真的存在。</p><hr><p><strong>警告，以下内容涉嫌剧透，如果没有读过原著，请酌情阅读！！！</strong></p><hr><p>这本书确实注重第一观感，就和Undertale一样。</p><h2 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h2><p>人会改变，也能改变，必须改变。幸福，不是按照程序等来的，而是要自己去发现，去寻找，去努力。</p><p>这可能就是“我”在第二人生失败的原因吧。我一直坚信，仅仅去靠经验之谈生活，这个人是不可能存在好结果的。经验这种东西，并不是指引你走向未来，而是教会你如何使用过去。</p><p>说实话，这本轻小说的结局我是没有猜到的，能说是Happy Ending吗？或许是，又或许不能算是，两个支离破碎的人在末日尽头拥抱了对方，以寻求片刻的完整，对于失望与绝望而言，这也许也能使一个较好的结果吧。</p><p>我不太喜欢第一人称的小说，因为其巨大的代入感，最终又会在我看完整本书的时候让我产生巨大的落差感。<strong>因为，我与“我”之间存在了太大的差异了。</strong>而《重启人生》，这种失败的感觉我倒是深有体会吧。<strong>作为一个没有第一人生的第二人生的我，真的是太有体会了。</strong>在生活一步一步的逼迫之下，选择成为了圣诞节的坏大人。<font style="color:white">也许就是我的宿命，以梦想为借口，逃避生活。</font></p><p>说句实话，对于我个人而言，我认为我能算是半个完美的人。即使不是成绩最好，即使依然有人讨厌，即使家里存在纠葛，即使……但如果不对生活进行抱怨的话，我想，即使是流浪的人也会感到幸福，就像文中的臼水一般，唯一放在心上的，便是今天的天气。</p><p>可能很多人在最后会觉得这本书有些悲观。是真的，但对于我而言刚好合适，我是一个在内心消极与黑暗中挣扎的人，也正因如此，我才会喜欢这本书。</p><p>很多时候我们不懂得去珍惜身边的人和事，直到自己失去了的时候才去后悔。活着有时候要长远计划也要享受当下。而不能一味地去羡慕别人。我们又何尝不是，找着虚假的理由欺骗自己，我只想对自己说要面对现实，没有人愿意看着这么废物的自己，那就去改变而不是去逃避。<font style="color:white">虽然，有些时候，逃避是最好的选择，麻痹自己，也是一种生存的手段。将生活的苟且看作是诗和远方，或许自责也会少几分吧。</font></p><p>又或许，如果我能够有这所谓的第二人生，也许我会想着去改变什么。因为现在想起来，也许以前的很多年都是在徘徊中前进的。我的生活或许是完美的，但我并不是完美的。如果能给我再一次机会，也许我能够对她道歉，也许我能和他道别，也许……</p><blockquote><p>这个世界上没有如果。</p></blockquote><p>这便是答案。</p><p>或许，正因为有遗憾存在，才有去追寻未来的理由吧。</p><h2 id="名句"><a href="#名句" class="headerlink" title="名句"></a>名句</h2><blockquote><p>所谓的人生啊，哪怕只是出现蝴蝶扑翅般微小的差异，也会发生极大的变化。</p><p>正确的答案不一定是真实的答案。就算是一场误会，只要持续十年，对本人来说，那就已经是不想修正的现实了。</p><p>我讨厌看到现在进行时的幸福，却喜欢品尝幸福的余韵，那种味道淡淡的，让人觉得或许这里曾有过幸福。</p><p>至少比起想象未来如何活着，考虑死亡的事要顺利得多。</p><p>可那个人应该也是以第一名为目标，最后才能跑出第三名的成绩。假设他从一开始就以第三名为目标，最后一定是拿到第七名或第九名吧。</p><p>若是过着五十分的生活，人就会连小事都放在心上，希望生活变成五十一分；若是过着负五十分的生活，再怎么努力变成负四十九分也没有意义。</p><p>成为一个对自己人生丝毫没有后悔的人。这样的人大概非常幸福吧？要不然，就是一个超级大笨蛋；不是过着没有任何地方需要反省的完美人生，就是连反省自己人生的脑袋都没有。</p><p>因为微小的差异，人会改变，也能改变。</p><p>只要丢掉“因为一直以来都是这样，以后也会一样的吧”这样的想法就好。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 记随影落 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻小说 </tag>
            
            <tag> 恋爱 </tag>
            
            <tag> 三秋缒 </tag>
            
            <tag> 奇幻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D.C</title>
      <link href="/Eternity/Until-The-End/my-primary-school-from-4-to-6/"/>
      <url>/Eternity/Until-The-End/my-primary-school-from-4-to-6/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fc3f31f9801f98c62d6a5fc06b627205f0bfd65cb8130eaec82127d401dd22f5">956fa686beba65e04596fd799f3775e672369116bcd6125d89206d7efafc653e3e61174e1404890bd808bd01608a024aa35abd9f52aba4bc4e267524d1019a8f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">密码：我的小学班主任名字小写缩写</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/Eternity/lib/hbe.js"></script><link href="/Eternity/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Until The End </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>随机100题(26/100)</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/100-text/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/100-text/</url>
      
        <content type="html"><![CDATA[<p>“作为这一年的奋斗目标，难度：提高左右”</p><span id="more"></span><h3 id="1-P4170-CQOI2007-涂色"><a href="#1-P4170-CQOI2007-涂色" class="headerlink" title="1.P4170 [CQOI2007]涂色"></a>1.<a href="https://www.luogu.com.cn/problem/P4170">P4170 [CQOI2007]涂色</a></h3><p>$date: 2022.4.10$</p><p>区间 $dp$ 模板题，转移方程有三种：</p><ol><li>$dp_{l,r}=1,l=r$</li><li>$dp_{l,r}=\min\{dp_{l+1,r},dp_{l,r-1}\},op_l=op_r$</li><li>$dp_{l,r}=\min\{dp_{l,r},dp_{l,k}+dp_{k+1,r}\},op_l \neq op_r,k \in [l,r]$</li></ol><p>第一种，涂一块只需要一次即可；</p><p>而对于第二种，我们在涂的时候只需要再其子区间的时候多涂一块，不需要再涂一次，所以不用统计答案；</p><p>第三种，经典断点即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">51</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dp[MAXN][MAXN],n,op[MAXN];</span><br><span class="line"><span class="type">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">char</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-section.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-section.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) op[i]=<span class="built_in">change</span>(str[i]);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">1</span>;len&lt;=n;++len)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=n-len+<span class="number">1</span>;++l)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> r=l+len<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(l==r) dp[l][r]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op[l]==op[r])</span><br><span class="line">                dp[l][r]=<span class="built_in">min</span>(dp[l+<span class="number">1</span>][r],dp[l][r<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;r;++k)</span><br><span class="line">                    dp[l][r]=<span class="built_in">min</span>(dp[l][r],dp[l][k]+dp[k+<span class="number">1</span>][r]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[<span class="number">1</span>][n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">AAAAA</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="2-CF1109A-Sasha-and-a-Bit-of-Relax"><a href="#2-CF1109A-Sasha-and-a-Bit-of-Relax" class="headerlink" title="2.CF1109A Sasha and a Bit of Relax"></a>2.<a href="https://www.luogu.com.cn/problem/CF1109A">CF1109A Sasha and a Bit of Relax</a></h3><p>$date:2022.4.10$</p><p>区间数学题，详见<a href="https://www.luogu.com.cn/blog/FallenShadow/solution-cf1109a">题解</a></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs ls|1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">3e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll n,val,sum[MAXN];</span><br><span class="line">ll res;</span><br><span class="line">map&lt;pair&lt;ll,ll&gt;,ll&gt;M;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;segment.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;segment.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    ++M[<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">1</span>)];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(val);</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]^val;</span><br><span class="line">        ll x=!(i&amp;<span class="number">1</span>);</span><br><span class="line">        res+=M[<span class="built_in">make_pair</span>(sum[i],x)];</span><br><span class="line">        ++M[<span class="built_in">make_pair</span>(sum[i],x)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 2 3 4 5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">3 2 2 3 7 6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">x^x=0</span></span><br><span class="line"><span class="comment">x^0=x</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="3-P8179-「EZEC-11」Tyres"><a href="#3-P8179-「EZEC-11」Tyres" class="headerlink" title="3.P8179 「EZEC-11」Tyres"></a><a href="https://www.luogu.com.cn/problem/P8179">3.P8179 「EZEC-11」Tyres</a></h3><p>$date:2022.04.16$</p><p>虽然不是随机跳的，但是还是记上吧。调了大半天的。最后发现 $INF$ 开小了。题解的话看出题人就可以了，这里不多说。（<del>主要是讲不明白</del>）。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">505</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">2e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> ll MAXB=<span class="number">25</span>;</span><br><span class="line"><span class="type">const</span> ll INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m;</span><br><span class="line">ll t,dp[MAXN][MAXB+<span class="number">8</span>],g[MAXM],hgt[MAXM];</span><br><span class="line">ll a[MAXN],b[MAXN],c[MAXN],s;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Compare</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> ll&amp;x,<span class="type">const</span> ll&amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a[x]+b[x]*c[x]*c[x]&gt;a[y]+b[y]*c[y]*c[y])||</span><br><span class="line">            (a[x]+b[x]*c[x]*c[x]==a[y]+b[y]*c[y]*c[y]&amp;&amp;x&gt;y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;ll,vector&lt;ll&gt;,Compare&gt;Q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;t3.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;t3.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m),<span class="built_in">read</span>(t),s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]),<span class="built_in">read</span>(b[i]),c[i]=MAXB,Q.<span class="built_in">push</span>(i);</span><br><span class="line">        dp[i][<span class="number">1</span>]=a[i]+t;</span><br><span class="line">        <span class="keyword">for</span>(ll j=<span class="number">2</span>;j&lt;=MAXB;++j)</span><br><span class="line">            dp[i][j]=dp[i][j<span class="number">-1</span>]+a[i]+b[i]*(j<span class="number">-1</span>)*(j<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(g)),g[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        s=<span class="built_in">min</span>(m,s+MAXB);</span><br><span class="line">        <span class="keyword">for</span>(ll j=s;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">            <span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;=MAXB&amp;&amp;k&lt;=j;++k)</span><br><span class="line">                g[j]=<span class="built_in">min</span>(g[j],g[j-k]+dp[i][k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x=Q.<span class="built_in">top</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        hgt[i]=hgt[i<span class="number">-1</span>]+a[x]+b[x]*c[x]*c[x];</span><br><span class="line">        ++c[x],Q.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=INF;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=s&amp;&amp;i&lt;=m;++i) ans=<span class="built_in">min</span>(ans,g[i]+hgt[m-i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans-t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 4 50</span></span><br><span class="line"><span class="comment">10 100</span></span><br><span class="line"><span class="comment">100 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="4-CF986A-Fair"><a href="#4-CF986A-Fair" class="headerlink" title="4.CF986A Fair"></a><a href="https://www.luogu.com.cn/problem/CF986A">4.CF986A Fair</a></h3><p>$date:2022.04.16$</p><p><del>看到最短路，我啪的一下就点进来了</del>。这道题类似于全源最短路，但是其点数和边数过大，所以考虑按颜色分配。用 $Dist[c][v]$ 表示到 $c$ 节点涂上 $v$ 颜色的最小代价，然后用 $O(n)$ 的 $bfs$ 跑即可，然后将所有颜色排序，在每个节点处取前 $s$ 个 $Dist_{c,v}$ 即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK=<span class="number">101</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,k,s,cnt[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total,Dist[MAXN][MAXK];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[v],u&#125;;Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;Col[MAXK];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;mininum-road.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;mininum-road.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m),<span class="built_in">read</span>(k),<span class="built_in">read</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">read</span>(cnt[i]),Col[cnt[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u),<span class="built_in">read</span>(v);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(Dist,<span class="number">-1</span>,<span class="built_in">sizeof</span>(Dist));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">1</span>;c&lt;=k;++c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:Col[c])</span><br><span class="line">        &#123;</span><br><span class="line">            Q.<span class="built_in">push</span>(i);</span><br><span class="line">            Dist[i][c]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> e=Head[u],v;e;e=Edge[e].next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(Dist[(v=Edge[e].to)][c]==<span class="number">-1</span>)</span><br><span class="line">                    Dist[v][c]=Dist[u][c]+<span class="number">1</span>,Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(Dist[i]+<span class="number">1</span>,Dist[i]+<span class="number">1</span>+k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=s;++j) ans+=Dist[i][j];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5 4 3</span></span><br><span class="line"><span class="comment">1 2 4 3 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="5-P5810-SCOI2004-文本的输入"><a href="#5-P5810-SCOI2004-文本的输入" class="headerlink" title="5.P5810 [SCOI2004]文本的输入"></a>5.<a href="https://www.luogu.com.cn/problem/P5810">P5810 [SCOI2004]文本的输入</a></h3><p>$date:2022.4.19$</p><p>并不是随机跳的，无意中刷了一道四川省选题。</p><p>一道数学类型的 $dp$ 题。定义 <code>dp[i]</code> 为代价为 $i$ 时的最大字符数，对于添加字符，则 <code>dp[i]=dp[i-1]+1</code> 。而对于复制则遍历 $i-k,k=2j+5,j \in \mathbb{N^*}$ ，然后转移 $dp_i=\max^{k=2j+5 \leq i}_{u=1}(u+1)dp_{i-k}$ 即可。可以证明 <code>dp[i]</code> 单调。二分查找即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">4e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll T,dp[MAXN],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;o(1).in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;o(1).out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ans=<span class="number">1</span>;dp[ans<span class="number">-1</span>]&lt;T;++ans)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[ans]=dp[ans<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=ans<span class="number">-7</span>,j=<span class="number">2</span>;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>,++j)</span><br><span class="line">            dp[ans]=<span class="built_in">max</span>(dp[ans],dp[i]*j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="6-P1934-封印"><a href="#6-P1934-封印" class="headerlink" title="6.P1934 封印"></a>6.<a href="https://www.luogu.com.cn/problem/P1934">P1934 封印</a></h3><p>$date:2022.4.20$</p><p>较水的 $dp$ 题，转移方程：$dp_{i}=\min\{dp_{j}+(v_i+v_j)(\sum\limits^{i}_{k=j}v_k)\},v_i+v_j \leq t,j&lt;i$ 初始化 $dp_{i}=dp_{i-1}+n^2v_i$ ，注意开 <code>long long</code> ，要爆。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1001</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll val[MAXN],sum[MAXN],dp[MAXN],t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(t);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">read</span>(val[i]),sum[i]=sum[i<span class="number">-1</span>]+val[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i]=dp[i<span class="number">-1</span>]+n*n*val[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">            <span class="keyword">if</span>(val[i]+val[j]&lt;=t)</span><br><span class="line">                dp[i]=<span class="built_in">min</span>(dp[i],dp[j<span class="number">-1</span>]+(val[i]+val[j])*(sum[i]-sum[j<span class="number">-1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,dp[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 10</span></span><br><span class="line"><span class="comment">8 5 7 9 3 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="7-P7224-RC-04-子集积"><a href="#7-P7224-RC-04-子集积" class="headerlink" title="7.P7224 [RC-04] 子集积"></a><a href="https://www.luogu.com.cn/problem/P7224">7.P7224 [RC-04] 子集积</a></h3><p>$date:2022.4.20$</p><p>好吧，刚开始我以为这是一道普普通通的背包，结果是我想错了。<del>果然还是太菜了</del>，看了题解之后才有了点思路，但是还是失败了。就算贺过去了。这里给出题解的思路。</p><p>一共有 $2^n$ 个子集，暴力加入每一个物品，然后算就完事了。但是这样的时间复杂度是 $O(nm)$ ，不太保险。所以将 $a_i$ 相同的统一处理。即转换为完全背包。令 $a_i=j(j&gt;1)$ 的 $i$ 有 $k$ 个，则对于 $j,j^2,j^3…j^k$ 的转移系数为 $(^k_q)$ 。如果 $a_i=1$ 则将答案乘以 $2^k$ 而不作转移，最后统一处理。</p><p>时间复杂度 $O(\sum\limits^{m}_{i=2}\sum\limits^{cnt_i}_{j=1}\lfloor\frac{m}{i^j}\rfloor)$ ，一个很离谱的式子。近似于 $O(m \ln m)$ 。</p><p>预处理阶乘以及逆元以及阶乘的逆元用来求组合数。然后就背包了。</p><p>尝试了一下封装写法。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Calc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a=a+b-(a+b&gt;=Mod?Mod:<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a=a-b+(a-b&lt;<span class="number">0</span>?Mod:<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pro</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1ll</span>*a*b%Mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> fac[MAXN],inv[MAXN],inv_fac[MAXN],n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>]=inv_fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    fac[<span class="number">1</span>]=inv[<span class="number">1</span>]=inv_fac[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fac[i]=Calc::<span class="built_in">pro</span>(fac[i<span class="number">-1</span>],i);</span><br><span class="line">        inv[i]=Calc::<span class="built_in">pro</span>(Mod-Mod/i,inv[Mod%i]);</span><br><span class="line">        inv_fac[i]=Calc::<span class="built_in">pro</span>(inv_fac[i<span class="number">-1</span>],inv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>||m&lt;<span class="number">0</span>||n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> Calc::<span class="built_in">pro</span>(fac[n],Calc::<span class="built_in">pro</span>(inv_fac[m],inv_fac[n-m]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m,val[MAXN],dp[MAXN],cnt[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-bag.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-bag.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">read</span>(val[i]),++cnt[val[i]];</span><br><span class="line">    <span class="type">int</span> Max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;MAXN;++i) <span class="built_in">checkMax</span>(Max,cnt[i]);</span><br><span class="line">    <span class="built_in">init</span>(Max);</span><br><span class="line">    dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;MAXN;++i)</span><br><span class="line">        <span class="keyword">if</span>(cnt[i])</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=m/i;k&gt;=<span class="number">1</span>;--k)</span><br><span class="line">                <span class="keyword">if</span>(dp[k])</span><br><span class="line">                &#123;</span><br><span class="line">                    ll v=i;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt[i]&amp;&amp;v*k&lt;=m;++j,v*=i)</span><br><span class="line">                        Calc::<span class="built_in">add</span>(dp[v*k],Calc::<span class="built_in">pro</span>(<span class="built_in">C</span>(cnt[i],j),dp[k]));</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n-cnt[<span class="number">1</span>];++i) Calc::<span class="built_in">add</span>(ans,ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) Calc::<span class="built_in">sub</span>(ans,dp[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">1</span>];++i) Calc::<span class="built_in">add</span>(ans,ans);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">20 123456</span></span><br><span class="line"><span class="comment">1 5 12 24 189893 233333 2 22 134 3284 28456 261 50 10 1 2 2 2 2 22</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="8-P7228-COCI2015-2016-3-MOLEKULE"><a href="#8-P7228-COCI2015-2016-3-MOLEKULE" class="headerlink" title="8.P7228 [COCI2015-2016#3] MOLEKULE"></a><a href="https://www.luogu.com.cn/problem/P7228">8.P7228 [COCI2015-2016#3] MOLEKULE</a></h3><p>$date:2022.4.20$</p><p>跑一遍 $dfs$ ，然后使其入度和出度相交为 $0$ 即可。毕竟这道题不需要让你输出价值。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Graph</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Head[MAXN],Total,To[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="type">bool</span> f,vis[MAXN];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> next,to;</span><br><span class="line">    &#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Edge[++Total]=(edge)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">        Edge[Total+MAXN]=(edge)&#123;Head[v],u&#125;;Head[v]=Total+MAXN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">return</span> ;</span><br><span class="line">        vis[u]=<span class="number">1</span>,f^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u],v;e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[(v=Edge[e].to)]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(e&gt;MAXN) To[e-MAXN]=f^<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> To[e]=f;</span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        f^=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">outPrint</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,To[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dfs.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dfs.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u),<span class="built_in">read</span>(v);</span><br><span class="line">        Graph::<span class="built_in">addEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    Graph::<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    Graph::<span class="built_in">outPrint</span>(N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="9-P4763-CERC2014-Bricks"><a href="#9-P4763-CERC2014-Bricks" class="headerlink" title="9.P4763 [CERC2014]Bricks"></a>9.<a href="https://www.luogu.com.cn/problem/P4763">P4763 [CERC2014]Bricks</a></h3><p>$date:2022.4.20$</p><p>看到同机房巨佬 $Live$ 在切，然后想起以前在学校的 $OI$ 上做过，然后就过来 $experience^2$ 了。一道比较难思考的贪心题。思路也忘了，估计现在也不会打了。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,ans,T;</span><br><span class="line"><span class="type">int</span> val[MAXN],cnt[MAXN],t[MAXN];</span><br><span class="line"><span class="type">char</span> op[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">change</span><span class="params">(<span class="type">char</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s==<span class="string">&#x27;B&#x27;</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(N),ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(op,<span class="string">&#x27;\0&#x27;</span>,<span class="built_in">sizeof</span>(op));</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="built_in">sizeof</span>(cnt));</span><br><span class="line">    <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="built_in">sizeof</span>(t));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(val[i]);</span><br><span class="line">        cin&gt;&gt;op[i];</span><br><span class="line">        cnt[<span class="built_in">change</span>(op[i])]+=val[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;brick.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;brick.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">if</span>(!cnt[<span class="number">0</span>]||!cnt[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt[<span class="number">0</span>]+cnt[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x=<span class="built_in">change</span>(op[i]),y=<span class="built_in">change</span>(op[i])^<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1ll</span>*cnt[x]*t[y]%cnt[y]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> res=<span class="number">1ll</span>*cnt[x]*t[y]/cnt[y]-t[x];</span><br><span class="line">                <span class="keyword">if</span>(res&gt;=<span class="number">1</span>&amp;&amp;res&lt;=val[i]) ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">            t[x]+=val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 B</span></span><br><span class="line"><span class="comment">3 W</span></span><br><span class="line"><span class="comment">2 B</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3 W</span></span><br><span class="line"><span class="comment">3 B</span></span><br><span class="line"><span class="comment">9 W</span></span><br><span class="line"><span class="comment">1 B</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">2 W</span></span><br><span class="line"><span class="comment">3 W</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="10-CF1562C-Rings"><a href="#10-CF1562C-Rings" class="headerlink" title="10.CF1562C Rings"></a>10.<a href="https://www.luogu.com.cn/problem/CF1562C">CF1562C Rings</a></h3><p>$date:2022.04.22$</p><p>暴力 $O(n^2)$ 查找，但显然是过不了的。所以我们来找数学规律。</p><p>由于 $0$ 是任何非 $0$ 整数的倍数，一个数本身也是自己的倍数，所以：</p><ul><li>如果该字符串中有大于等于 $\lfloor \frac{n}{2} \rfloor$ 的连续子串全为 $0$ ，那么另找一个长度大于 $\lfloor \frac{n}{2} \rfloor$ 的连续子串即可。</li><li>如果该字符串中有两个长度大于等于 $\lfloor \frac{n}{2} \rfloor$ 的连续子串，或者是有一个长度大于等于 $\frac{n}{2}$ 的连续子串且该字串前面一位或数位为 $0$，那么也是一组解。</li><li>如果一个字符串有一个长度大于等于 $\lfloor \frac{n}{2} \rfloor$ 的连续子串，它的后面一位或数位为 $0$，说明包括后面的 $0$ 的子串一定是该子串的 $2$ 倍，是一组解。</li><li>否则说明该字符串全为 $1$，符合上面的第二种情况。事实上，上面第一种情况也可以归到第二、三两种情况里。</li></ul><p>所以，无论什么情况，该题都是有解的，用 $O(n)$ 扫一遍即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n;</span><br><span class="line"><span class="type">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;rings.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;rings.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);</span><br><span class="line">        <span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;<span class="built_in">i</span>&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;(n&gt;&gt;<span class="number">1</span>)) <span class="built_in">printf</span>(<span class="string">&quot;1 %d 1 %d\n&quot;</span>,i,i<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>,i,n,i+<span class="number">1</span>,n);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">&quot;1 %d 2 %d\n&quot;</span>,n<span class="number">-1</span>,n);</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">101111</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">111000111</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">10000000</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">11011</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">001111</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">101</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">100000000000000100000000000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="11-P2620-虫洞"><a href="#11-P2620-虫洞" class="headerlink" title="11.P2620 虫洞"></a>11.<a href="https://www.luogu.com.cn/problem/P2620">P2620 虫洞</a></h3><p>$date:2022.4.22-2022.4.23$</p><p>一道说难不难，说简单不简单的题。</p><p>考点：离散化+建图+最短路</p><p>对于这个数轴而言，能够改变答案贡献的只有虫洞，而虫洞的范围 $P \leq 40$ ，所以考虑建图。首先离散化，对于虫洞的起点与终点，有一条单向边 $E(u,v)=0$ ，并构建一个起点 $0$ 和一个终点 $W$ ，一共 $2P+2$ 个节点，对于非 $E(u,v)=0$ 的边，我们用递归处理其边权。因为不能踩到虫洞起点，所以我们需要将起点存储（推荐 <code>set</code> 和 <code>map</code> ），然后避开即可。</p><p>然后跑最短路就可以了。用 $Floyd$ 还是 $SPFA$ 或是 $Dijkstra$ 都是可以的，常数极小。</p><p>挖坑：一开始使用 <code>vector</code> 来离散，然后就爆了很久，后来换成数组就好了。所以 $Stl$ 能不用尽量不用。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXP=<span class="number">41</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3fffffff</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> W,S,P,lenP;</span><br><span class="line"><span class="type">int</span> sat[MAXP],fnl[MAXP];</span><br><span class="line"><span class="type">bool</span> path[MAXP][MAXP];</span><br><span class="line"><span class="type">int</span> Dir[MAXP&lt;&lt;<span class="number">4</span>];</span><br><span class="line">std::set&lt;<span class="type">int</span>&gt;St;</span><br><span class="line"><span class="keyword">namespace</span> Floyd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Dist[MAXP&lt;&lt;<span class="number">2</span>][MAXP&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">initForEveryTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(Dist,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(Dist));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calcEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u==v) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(St.<span class="built_in">count</span>(u)) <span class="keyword">return</span> INF;</span><br><span class="line">        <span class="type">int</span> k=v;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=P;++i)</span><br><span class="line">            <span class="keyword">if</span>(u&lt;sat[i]&amp;&amp;sat[i]&lt;k&amp;&amp;(sat[i]-u)%S==<span class="number">0</span>) k=sat[i];</span><br><span class="line">        <span class="keyword">while</span>(k!=v&amp;&amp;St.<span class="built_in">count</span>(k)) --k;</span><br><span class="line">        <span class="keyword">if</span>(k==u) <span class="keyword">return</span> INF;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">calcEdge</span>(k,v)+(k-u+S<span class="number">-1</span>)/S;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;lenP;++i)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=lenP;++j)</span><br><span class="line">                Dist[i][j]=<span class="built_in">min</span>(Dist[i][j],<span class="built_in">calcEdge</span>(Dir[i],Dir[j]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> k=<span class="number">1</span>;k&lt;=lenP;++k)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=lenP;++i)</span><br><span class="line">                <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=lenP;++j)</span><br><span class="line">                    Dist[i][j]=<span class="built_in">min</span>(Dist[i][j],Dist[i][k]+Dist[k][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">outPut</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Dist[<span class="number">1</span>][lenP]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Dist[u][v]=w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Floyd;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-graph.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-graph.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(W);</span><br><span class="line">    <span class="keyword">while</span>(W)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(S,P);</span><br><span class="line">        St.<span class="built_in">clear</span>(),lenP=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(Dir,<span class="number">0</span>,<span class="built_in">sizeof</span>(Dir));</span><br><span class="line">        Floyd::<span class="built_in">initForEveryTest</span>();</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=P;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(sat[i],fnl[i]);</span><br><span class="line">            Dir[++lenP]=sat[i],Dir[++lenP]=fnl[i];</span><br><span class="line">            St.<span class="built_in">insert</span>(sat[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Dir[++lenP]=<span class="number">0</span>,Dir[++lenP]=W;</span><br><span class="line">        <span class="built_in">sort</span>(Dir+<span class="number">1</span>,Dir+<span class="number">1</span>+lenP);</span><br><span class="line">        lenP=<span class="built_in">unique</span>(Dir+<span class="number">1</span>,Dir+<span class="number">1</span>+lenP)-Dir<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=P;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> d1=<span class="built_in">lower_bound</span>(Dir+<span class="number">1</span>,Dir+<span class="number">1</span>+lenP,sat[i])-Dir;</span><br><span class="line">            <span class="type">int</span> d2=<span class="built_in">lower_bound</span>(Dir+<span class="number">1</span>,Dir+<span class="number">1</span>+lenP,fnl[i])-Dir;</span><br><span class="line">            Floyd::<span class="built_in">addEdge</span>(d1,d2,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Floyd::<span class="built_in">init</span>();</span><br><span class="line">        Floyd::<span class="built_in">calc</span>();</span><br><span class="line">        Floyd::<span class="built_in">outPut</span>();</span><br><span class="line">        <span class="built_in">read</span>(W);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">28 3 5</span></span><br><span class="line"><span class="comment">2 18</span></span><br><span class="line"><span class="comment">5 13</span></span><br><span class="line"><span class="comment">12 6</span></span><br><span class="line"><span class="comment">17 25</span></span><br><span class="line"><span class="comment">20 15</span></span><br><span class="line"><span class="comment">50 6 1</span></span><br><span class="line"><span class="comment">9 45</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="12-P1879-USACO06NOV-Corn-Fields-G"><a href="#12-P1879-USACO06NOV-Corn-Fields-G" class="headerlink" title="12.P1879 [USACO06NOV]Corn Fields G"></a>12.<a href="https://www.luogu.com.cn/problem/P1879">P1879 [USACO06NOV]Corn Fields G</a></h3><p>$date:2022.04.24$</p><p>经典状压模板题，没啥好讲的。只是因为括号打错位调了很久。<del>太菜了</del>。</p><p>今天省选名单出了，在线膜拜省队爷wfy。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">13</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">13</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXP=<span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod=<span class="number">1e8</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M;</span><br><span class="line"><span class="type">int</span> Map[MAXN][MAXM],state[MAXP];</span><br><span class="line"><span class="type">int</span> dp[MAXN][MAXP],ok[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-compression.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-compression.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;++j)</span><br><span class="line">            <span class="built_in">read</span>(Map[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;++j)</span><br><span class="line">            ok[i]=(ok[i]&lt;&lt;<span class="number">1</span>)+Map[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;M);++s)</span><br><span class="line">        state[s]=((s&amp;(s&gt;&gt;<span class="number">1</span>))==<span class="number">0</span>)&amp;&amp;((s&amp;(s&lt;&lt;<span class="number">1</span>))==<span class="number">0</span>);</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;M);++s)</span><br><span class="line">            <span class="keyword">if</span>(state[s]&amp;&amp;((s&amp;ok[i])==s))</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> sl=<span class="number">0</span>;sl&lt;(<span class="number">1</span>&lt;&lt;M);++sl)</span><br><span class="line">                    <span class="keyword">if</span>((s&amp;sl)==<span class="number">0</span>)</span><br><span class="line">                        dp[i][s]=(dp[i][s]+dp[i<span class="number">-1</span>][sl])%Mod;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;M);++s)</span><br><span class="line">        res=(res+dp[N][s])%Mod;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=N;++i)&#123;</span></span><br><span class="line"><span class="comment">        for(int s=0;s&lt;(1&lt;&lt;M);++s)</span></span><br><span class="line"><span class="comment">            printf(&quot;%d &quot;,dp[i][s]);</span></span><br><span class="line"><span class="comment">        printf(&quot;%d &quot;,ok[i]);</span></span><br><span class="line"><span class="comment">        puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int s=0;s&lt;(1&lt;&lt;M);++s) printf(&quot;%d &quot;,state[s]);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">1 1 1</span></span><br><span class="line"><span class="comment">0 1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="13-CF803D-Magazine-Ad"><a href="#13-CF803D-Magazine-Ad" class="headerlink" title="13.CF803D Magazine Ad"></a>13.<a href="https://www.luogu.com.cn/problem/CF803D">CF803D Magazine Ad</a></h3><p>$date:2022.4.27$</p><p>较 $H_2O$ 的二分题，注意字符串的读入。详见<a href="https://www.luogu.com.cn/blog/FallenShadow/solution-cf803d">题解</a></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k,len,p;</span><br><span class="line"><span class="type">char</span> str[MAXS];</span><br><span class="line"><span class="type">int</span> val[MAXS],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val[i]&gt;x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(res+val[i]&lt;=x) res+=val[i];</span><br><span class="line">        <span class="keyword">else</span> ++cnt,res=val[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf(&quot;%d %d\n&quot;,x,cnt);</span></span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;=k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">while</span>((str[++len]=<span class="built_in">gh</span>())!=<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;-&#x27;</span>||str[i]==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            val[++tot]=i-p+<span class="number">1</span>,p=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p!=len+<span class="number">1</span>) val[++tot]=len-p;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=len;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">garage for sa-le</span></span><br><span class="line"><span class="comment">7 4 3 2</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">Edu-ca-tion-al Ro-unds are so fun</span></span><br><span class="line"><span class="comment">4 3 5 3 3 5 4 3 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="14-P1471-方差"><a href="#14-P1471-方差" class="headerlink" title="14.P1471 方差"></a>14.<a href="https://www.luogu.com.cn/problem/P1471">P1471 方差</a></h3><p>$date:2022.4.28$</p><p><del>好久没有手切过蓝题了</del></p><p>区间维护题，较基础的线段树模板，结合了一点数学知识。</p><script type="math/tex; mode=display">\sum\limits^{r}_{i=l}(x_i+d)^2=\sum\limits^{r}_{i=l}(x_i)^2+2d\sum\limits_{i=l}^{r}x_i+(r-l+1)d^2</script><p>然后维护即可。记得在粘贴代码时改掉函数名。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M;</span><br><span class="line">db val[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Seg</span></span><br><span class="line">&#123;</span><br><span class="line">    db val,val2,tag;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="function">db <span class="title">sum</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span>*(r-l+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].val=Tree[p&lt;&lt;<span class="number">1</span>].val+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val;</span><br><span class="line">    Tree[p].val2=Tree[p&lt;&lt;<span class="number">1</span>].val2+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushDown</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].val2+=(Tree[p&lt;&lt;<span class="number">1</span>].val*Tree[p].tag)*<span class="number">2</span>+Tree[p&lt;&lt;<span class="number">1</span>].<span class="built_in">sum</span>()*Tree[p].tag*Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val2+=(Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val*Tree[p].tag)*<span class="number">2</span>+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].<span class="built_in">sum</span>()*Tree[p].tag*Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].val+=Tree[p&lt;&lt;<span class="number">1</span>].<span class="built_in">sum</span>()*Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val+=Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].<span class="built_in">sum</span>()*Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].tag+=Tree[p].tag,Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=Tree[p].tag;</span><br><span class="line">        Tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l,Tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val=val[l];</span><br><span class="line">        Tree[p].val2=val[l]*val[r];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,db d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].val2+=(Tree[p].val*d)*<span class="number">2</span>+Tree[p].<span class="built_in">sum</span>()*d*d;</span><br><span class="line">        Tree[p].val+=Tree[p].<span class="built_in">sum</span>()*d;</span><br><span class="line">        Tree[p].tag+=d;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,d);</span><br><span class="line">    <span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">queryAverage</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r) <span class="keyword">return</span> Tree[p].val;</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    db val=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) val+=<span class="built_in">queryAverage</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) val+=<span class="built_in">queryAverage</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">queryVariance</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r) <span class="keyword">return</span> Tree[p].val2;</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    db val=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pushDown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) val+=<span class="built_in">queryVariance</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) val+=<span class="built_in">queryVariance</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;segmentbit.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;segmentbit.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;val[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">    <span class="keyword">while</span>(M--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op,ql,qr;</span><br><span class="line">        <span class="built_in">read</span>(op,ql,qr);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            db qk;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;qk);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,ql,qr,qk);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%.4lf\n&quot;</span>,<span class="built_in">queryAverage</span>(<span class="number">1</span>,ql,qr)/(qr-ql+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            db x1=<span class="built_in">queryAverage</span>(<span class="number">1</span>,ql,qr),x2=<span class="built_in">queryVariance</span>(<span class="number">1</span>,ql,qr);</span><br><span class="line">            db res=x2+(qr-ql+<span class="number">1</span>)*(x1/(qr-ql+<span class="number">1</span>))*(x1/(qr-ql+<span class="number">1</span>))<span class="number">-2</span>*(x1/(qr-ql+<span class="number">1</span>))*x1;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.4lf\n&quot;</span>,res/(qr-ql+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">1 5 4 2 3</span></span><br><span class="line"><span class="comment">2 1 4</span></span><br><span class="line"><span class="comment">3 1 5</span></span><br><span class="line"><span class="comment">1 1 1 1</span></span><br><span class="line"><span class="comment">1 2 2 -1</span></span><br><span class="line"><span class="comment">3 1 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="15-P4162-SCOI2009-最长距离"><a href="#15-P4162-SCOI2009-最长距离" class="headerlink" title="15.P4162 [SCOI2009]最长距离"></a>15.<a href="https://www.luogu.com.cn/problem/P4162">P4162 [SCOI2009]最长距离</a></h3><p>$date:2022.05.06$</p><p>建图，将 $nm$ 的矩阵转化为一个有 $nm$ 个点的图，$c(i,j)=(map[j]=1)?1:0$ 即可，然后每到一个点记录一次答案记为 $res=\max\{res,calc(s,k)\}$ 。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">31</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> N,M,T;</span><br><span class="line"><span class="type">char</span> Map[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> Start[MAXN*MAXN];</span><br><span class="line">db Dist[MAXN*MAXN][MAXN*MAXN],res;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getId</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (i<span class="number">-1</span>)*M+j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">calc</span><span class="params">(db x,db y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to,val;</span><br><span class="line">&#125;Edge[MAXN*MAXN*MAXN*MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN*MAXN],Total;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[u],v,w&#125;;Head[u]=Total;</span><br><span class="line">    <span class="comment">// Edge[++Total]=(edge)&#123;Head[v],u,w&#125;;Head[v]=Total;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Dir[MAXN*MAXN];</span><br><span class="line"><span class="type">bool</span> Vis[MAXN*MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N*M;++i) Dir[i]=INF,Vis[i]=<span class="number">0</span>;</span><br><span class="line">    Dir[s]=Start[s],Vis[s]=<span class="number">1</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="comment">// printf(&quot;start from %d with %d\n&quot;,s,Dir[s]);</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">checkMax</span>(res,Dist[s][u]);</span><br><span class="line">        Vis[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=Head[u],v;e;e=Edge[e].next)</span><br><span class="line">        &#123;</span><br><span class="line">            v=Edge[e].to;</span><br><span class="line">            <span class="comment">// printf(&quot;road from %d to %d\n&quot;,u,v);</span></span><br><span class="line">            <span class="keyword">if</span>(Dir[v]&gt;Dir[u]+Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                Dir[v]=Dir[u]+Edge[e].val;</span><br><span class="line">                <span class="comment">// printf(&quot;from %d to %d spend %d\n&quot;,u,v,Dir[v]);</span></span><br><span class="line">                <span class="keyword">if</span>(!Vis[v]&amp;&amp;T&gt;=Dir[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    Vis[v]=<span class="number">1</span>;</span><br><span class="line">                    Q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;min-road.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;min-road.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,T);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,Map[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=M;++k)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=M;++l)</span><br><span class="line">                    Dist[<span class="built_in">getId</span>(i,k)][<span class="built_in">getId</span>(j,l)]=<span class="built_in">calc</span>(i-j,k-l);</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=N;++i)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;=M;++j)</span></span><br><span class="line"><span class="comment">            printf(&quot;%d &quot;,getId(i,j));</span></span><br><span class="line"><span class="comment">        puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            Start[<span class="built_in">getId</span>(i,j)]=Map[i][j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>,w;k&lt;=<span class="number">4</span>;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> nx=i+dx[k],ny=j+dy[k];</span><br><span class="line">                <span class="keyword">if</span>(nx&lt;<span class="number">1</span>||nx&gt;N||ny&lt;<span class="number">1</span>||ny&gt;M) <span class="keyword">continue</span>;</span><br><span class="line">                w=Map[nx][ny]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="built_in">addEdge</span>(<span class="built_in">getId</span>(i,j),<span class="built_in">getId</span>(nx,ny),w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N*M;++i) <span class="built_in">spfa</span>(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 3 0</span></span><br><span class="line"><span class="comment">001</span></span><br><span class="line"><span class="comment">001</span></span><br><span class="line"><span class="comment">110</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="16-P6870-COCI2019-2020-5-Zapina"><a href="#16-P6870-COCI2019-2020-5-Zapina" class="headerlink" title="16.P6870 [COCI2019-2020#5] Zapina"></a>16.<a href="https://www.luogu.com.cn/problem/P6870">P6870 [COCI2019-2020#5] Zapina</a></h3><p>$date:2022.05.06$</p><p>数学dp ，组合数学题。</p><p>杨辉三角求组合数： $C(n,m)=C(n-1,m)+C(n-1,m-1)$</p><p>转移方程：</p><script type="math/tex; mode=display">dp[i][j]=\left\{\begin{aligned}&C(j,i)*(i-1)^{j-i},\text{使i开心} \\&\sum\limits^{k=j}_{k=0}dp[i-1][j-k]*C(j,k),k \in [0,j],k \neq i,\text{使i不开心}\\\end{aligned}\right.</script><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">351</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,dp[MAXN][MAXN],C[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">quickPow</span><span class="params">(ll a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%Mod;</span><br><span class="line">        a=a*a%Mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;++j)</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*for(int i=0;i&lt;=N;++i)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;=i;++j)</span></span><br><span class="line"><span class="comment">            printf(&quot;%d &quot;,C[i][j]);</span></span><br><span class="line"><span class="comment">        puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=i) dp[i][j]=<span class="number">1ll</span>*C[j][i]*<span class="built_in">quickPow</span>(i<span class="number">-1</span>,j-i)%Mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=j;++k)</span><br><span class="line">                <span class="keyword">if</span>(i!=k) dp[i][j]=(dp[i][j]+<span class="number">1ll</span>*C[j][k]*dp[i<span class="number">-1</span>][j-k])%Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[N][N]%Mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">314</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="17-CF1119B-Alyona-and-a-Narrow-Fridge"><a href="#17-CF1119B-Alyona-and-a-Narrow-Fridge" class="headerlink" title="17.CF1119B Alyona and a Narrow Fridge"></a>17.<a href="https://www.luogu.com.cn/problem/CF1119B">CF1119B Alyona and a Narrow Fridge</a></h3><p>$date:2022.05.06$</p><p>很玄学的一道题，样例看不懂，题解不明白。</p><p>more and more vegetables, what should I do?</p><p>贺过去了，二分 $+$ 贪心。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> H,N,hgt[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;V;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    V.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x;++i) V.<span class="built_in">push_back</span>(hgt[i]);</span><br><span class="line">    <span class="built_in">sort</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    <span class="type">int</span> maxn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,pos1,pos2;i&lt;V.<span class="built_in">size</span>();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((i+<span class="number">1</span>)&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos1=maxn+V[i];</span><br><span class="line">            <span class="keyword">if</span>(pos1&gt;H) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pos2=maxn+V[i];</span><br><span class="line">            <span class="keyword">if</span>(pos2&gt;H) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            maxn=<span class="built_in">max</span>(pos1,pos2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp?.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp?.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,H);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(hgt[i]);</span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>,r=N+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 7</span></span><br><span class="line"><span class="comment">2 3 5 4 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="18-P7159-「dWoi-R1」Sweet-Fruit-Chocolate"><a href="#18-P7159-「dWoi-R1」Sweet-Fruit-Chocolate" class="headerlink" title="18.P7159 「dWoi R1」Sweet Fruit Chocolate"></a>18.<a href="https://www.luogu.com.cn/problem/P7159">P7159 「dWoi R1」Sweet Fruit Chocolate</a></h3><p>$date:2022.5.27$</p><p>简单的树形 dp 问题，时间复杂度 $\mathcal O(n)$</p><p>计算方程 $ans=\sum^{n}_{i=1}d_ia_i$ ，记 $d_i$ 为第 $i$ 个点到根节点的距离。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line">ll num[MAXN],dp[MAXN],ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[v],u&#125;;Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dpTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[x]=dp[last]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dpTree</span>(v,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">powFast</span><span class="params">(ll a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%Mod;</span><br><span class="line">        a=a*a%Mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(num[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dpTree</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    ll Cnt=<span class="built_in">powFast</span>(<span class="number">2ll</span>,N<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        ans=(ans+dp[i]*num[i])%Mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans*Cnt%Mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 1 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="19-CF747B-Mammoth’s-Genome-Decoding"><a href="#19-CF747B-Mammoth’s-Genome-Decoding" class="headerlink" title="19.CF747B Mammoth’s Genome Decoding"></a><a href="https://www.luogu.com.cn/problem/CF747B">19.CF747B Mammoth’s Genome Decoding</a></h3><p>$date:2022.5.27$</p><p>暴力，暴力，暴力。甚至懒得优化。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,num[<span class="number">5</span>];</span><br><span class="line"><span class="type">char</span> str[MAXN],res[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">char</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="string">&#x27;A&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="string">&#x27;C&#x27;</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="string">&#x27;G&#x27;</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="string">&#x27;T&#x27;</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">back</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">1</span>) <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">2</span>) <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">3</span>) <span class="keyword">return</span> <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="number">4</span>) <span class="keyword">return</span> <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">comMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id=<span class="number">1</span>,res=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">if</span>(num[<span class="number">1</span>]&lt;res) res=num[<span class="number">1</span>],id=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(num[<span class="number">2</span>]&lt;res) res=num[<span class="number">2</span>],id=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(num[<span class="number">3</span>]&lt;res) res=num[<span class="number">3</span>],id=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(num[<span class="number">4</span>]&lt;res) res=num[<span class="number">4</span>],id=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;AGCT.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;AGCT.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="keyword">if</span>(str[i]!=<span class="string">&#x27;?&#x27;</span>) ++num[<span class="built_in">change</span>(str[i])];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s=<span class="built_in">comMin</span>();</span><br><span class="line">            res[i]=<span class="built_in">back</span>(s);</span><br><span class="line">            ++num[s];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> res[i]=str[i];</span><br><span class="line">    <span class="type">int</span> numMin=<span class="built_in">min</span>(num[<span class="number">1</span>],<span class="built_in">min</span>(num[<span class="number">2</span>],<span class="built_in">min</span>(num[<span class="number">3</span>],num[<span class="number">4</span>])));</span><br><span class="line">    <span class="type">int</span> numMax=<span class="built_in">max</span>(num[<span class="number">1</span>],<span class="built_in">max</span>(num[<span class="number">2</span>],<span class="built_in">max</span>(num[<span class="number">3</span>],num[<span class="number">4</span>])));</span><br><span class="line">    <span class="keyword">if</span>(numMin!=numMax) <span class="built_in">printf</span>(<span class="string">&quot;===&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,res[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">AG?C??CT</span></span><br><span class="line"><span class="comment">*/</span>    </span><br></pre></td></tr></table></figure></details><h3 id="20-CF1136A-Nastya-Is-Reading-a-Book"><a href="#20-CF1136A-Nastya-Is-Reading-a-Book" class="headerlink" title="20.CF1136A Nastya Is Reading a Book"></a><a href="https://www.luogu.com.cn/problem/CF1136A">20.CF1136A Nastya Is Reading a Book</a></h3><p>$date:2022.6.16$</p><p>超级大水题。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">101</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXP=<span class="number">1e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,l[MAXN],r[MAXN],K;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;cf.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;cf.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(l[i],r[i]);</span><br><span class="line">    <span class="built_in">read</span>(K);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">if</span>(l[i]&lt;=K&amp;&amp;K&lt;=r[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,N-i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="21-P3912-素数个数"><a href="#21-P3912-素数个数" class="headerlink" title="21.P3912 素数个数"></a><a href="https://www.luogu.com.cn/problem/P3912">21.P3912 素数个数</a></h3><p>$date:2022.6.16$</p><p>线性筛质数模板题。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e8</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,Total,pri[MAXN];</span><br><span class="line"><span class="type">bool</span> ok[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ok,<span class="number">1</span>,<span class="built_in">sizeof</span>(ok));</span><br><span class="line">    ok[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=MaxN;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ok[i]) pri[++Total]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=Total&amp;&amp;i*pri[j]&lt;=MaxN;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            ok[i*pri[j]]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Total);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;xor.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;xor.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="built_in">init</span>(N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="22-P5131-荷取融合"><a href="#22-P5131-荷取融合" class="headerlink" title="22.P5131 荷取融合"></a><a href="https://www.luogu.com.cn/problem/P5131">22.P5131 荷取融合</a></h3><p>$date:2022.6.16$</p><p>常规 dp 题。</p><p>用 $dp_{i,j}$ 表示前 $i$ 个中选了 $j$ 个的方案数，用 $g_{i,j}$ 表示相应的贡献总和。</p><p>转移方程：</p><p> $dp_{i,j}=dp_{i-1,j}+dp_{i,j-1}$</p><p>$g_{i,j}=g_{i-1,j}+g_{i,j-1}\times val_i$</p><p>最终答案：</p><p>$\frac{g_{n,k}}{f_{n,k}}$</p><p>快速幂求逆元即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK=<span class="number">3e2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod=<span class="number">19260817</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,K,val[MAXN],dp[<span class="number">2</span>][MAXK],g[<span class="number">2</span>][MAXK];</span><br><span class="line"><span class="type">bool</span> ok;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">qPow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=<span class="number">1ll</span>*res*a%Mod;</span><br><span class="line">        a=<span class="number">1ll</span>*a*a%Mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;math.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;math.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,K);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(val[i]);</span><br><span class="line">    dp[!ok][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[ok][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=K;++j) dp[ok][j]=(dp[!ok][j]+dp[ok][j<span class="number">-1</span>])%Mod;</span><br><span class="line">        g[ok][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=K;++j) g[ok][j]=(<span class="number">1ll</span>*g[!ok][j]+<span class="number">1ll</span>*g[ok][j<span class="number">-1</span>]*val[i])%Mod;</span><br><span class="line">        ok^=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">1ll</span>*g[!ok][K]*<span class="built_in">qPow</span>(dp[!ok][K],Mod<span class="number">-2</span>)%Mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">3 1 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="23-P5997-PA2014-Pakowanie"><a href="#23-P5997-PA2014-Pakowanie" class="headerlink" title="23.P5997 [PA2014]Pakowanie"></a><a href="https://www.luogu.com.cn/problem/P5997">23.P5997 [PA2014]Pakowanie</a></h3><p>$date:2022.6.16$</p><p>状压 dp 题，贺过去的。不太能理解，看题解，或者自己做吧。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">25</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS=(<span class="number">1</span>&lt;&lt;<span class="number">25</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">101</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,dp[MAXS],dw[MAXS];</span><br><span class="line"><span class="type">int</span> wgt[MAXN],cpy[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;bag?.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;bag?.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(wgt[i]);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) <span class="built_in">read</span>(cpy[i]);</span><br><span class="line">    <span class="built_in">sort</span>(cpy+<span class="number">1</span>,cpy+<span class="number">1</span>+M,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;(<span class="number">1</span>&lt;&lt;N);++i) dp[i]=M+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;N);++s)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</span><br><span class="line">            <span class="keyword">if</span>(s&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> up=s^(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>));</span><br><span class="line">                <span class="keyword">if</span>(dw[up]&gt;=wgt[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[s]&gt;dp[up]||(dp[s]==dp[up]&amp;&amp;dw[up]-wgt[j]&gt;dw[s]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[s]=dp[up];</span><br><span class="line">                        dw[s]=dw[up]-wgt[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cpy[dp[up]+<span class="number">1</span>]&gt;=wgt[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[s]&gt;dp[up]+<span class="number">1</span>||(dp[s]==dp[up]+<span class="number">1</span>&amp;&amp;cpy[dp[up]+<span class="number">1</span>]-wgt[j]&gt;dw[s]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[s]=dp[up]+<span class="number">1</span>;</span><br><span class="line">                        dw[s]=cpy[dp[up]+<span class="number">1</span>]-wgt[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(dp[(<span class="number">1</span>&lt;&lt;N)<span class="number">-1</span>]&gt;=M+<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[(<span class="number">1</span>&lt;&lt;N)<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="24-CF1512E-Permutation-by-Sum"><a href="#24-CF1512E-Permutation-by-Sum" class="headerlink" title="24.CF1512E Permutation by Sum"></a><a href="https://www.luogu.com.cn/problem/CF1512E">24.CF1512E Permutation by Sum</a></h3><p>$date:2022.6.16$</p><p>一道思路很简单的题，转化为，给定两个数 $s,k$ 求构造一个数列 $\sum\limits^{s}_{i=1}a_i=k,\forall i,j,a_i \neq a_j$ 即可。</p><p>重点在于如何构造，亲测暴力构造会爆，所以使用贪心。详情查看题解。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">501</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Test,N,Ql,Qr,Qsum;</span><br><span class="line"><span class="type">int</span> Max[MAXN],Min[MAXN],pos,path[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN],flag;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;sum.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;sum.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(Test);</span><br><span class="line">    <span class="keyword">while</span>(Test--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(N,Ql,Qr,Qsum);</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="type">int</span> left=Qr-Ql+<span class="number">1</span>,l=Ql;</span><br><span class="line">        <span class="comment">// printf(&quot;%d %d\n&quot;,((Qr-Ql+1)*(Qr-Ql+2)/2),((Qr-Ql+1)*(N+N+Ql-Qr)/2));</span></span><br><span class="line">        Max[<span class="number">0</span>]=Min[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            Min[i]=(i+<span class="number">1</span>)*i/<span class="number">2</span>;</span><br><span class="line">            Max[i]=(N+N-i+<span class="number">1</span>)*i/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) vis[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">            <span class="keyword">if</span>(Qsum-i&gt;=Min[left<span class="number">-1</span>]&amp;&amp;Qsum-i&lt;=Max[left<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                path[l++]=i;--left;</span><br><span class="line">                Qsum-=i;vis[i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(l!=Qr+<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> End=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">                <span class="keyword">if</span>(!vis[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(End==Ql<span class="number">-1</span>) End=Qr;</span><br><span class="line">                    path[++End]=i;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,path[i]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sum=(a1+an)n/2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">n-(qr-ql) ... n</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="25-P5017-NOIP2018-普及组-摆渡车"><a href="#25-P5017-NOIP2018-普及组-摆渡车" class="headerlink" title="25.P5017 [NOIP2018 普及组] 摆渡车"></a><a href="https://www.luogu.com.cn/problem/P5017">25.P5017 [NOIP2018 普及组] 摆渡车</a></h3><p>$date:2022.6.16$</p><p>一道其实很早以前就像做了，但是因为实力和时间的原因一直在咕。</p><p>斜率优化的经典题之一。</p><p>记 $dp_{i}$ 表示第 $i$ 刻时间的最小等待时间，$cnt_i$ 为第 $i$ 刻时间的人数，$sum_i$ 表示来到的时间和。</p><p>斜率式：</p><p>$dp_j+sum_j=i\times cnt_j+(dp_i-cnt_i\times i+sum_i)$</p><p>即可。</p><p>可惜琢磨了半天什么都没有想出来，然后又贺了。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">501</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXT=<span class="number">4e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,T,waiting_Time;</span><br><span class="line"><span class="type">int</span> dp[MAXT],cnt[MAXT],sum[MAXT];</span><br><span class="line"><span class="type">int</span> Que[MAXT&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> db <span class="title">slope</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (db)(dp[j]+sum[j]-dp[i]-sum[i])/(cnt[i]==cnt[j]?<span class="number">1e-9</span>:cnt[j]-cnt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;slope.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;slope.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(waiting_Time);T=<span class="built_in">max</span>(T,waiting_Time);</span><br><span class="line">        ++cnt[waiting_Time],sum[waiting_Time]+=waiting_Time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;T+M;++i) cnt[i]+=cnt[i<span class="number">-1</span>],sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">    <span class="type">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;T+M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i-M&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;tail&amp;&amp;<span class="built_in">slope</span>(Que[tail<span class="number">-1</span>],Que[tail])&gt;=<span class="built_in">slope</span>(Que[tail],i-M)) --tail;</span><br><span class="line">            Que[++tail]=i-M;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;tail&amp;&amp;<span class="built_in">slope</span>(Que[head],Que[head+<span class="number">1</span>])&lt;=i) ++head;</span><br><span class="line">        <span class="type">int</span> j=Que[head];</span><br><span class="line">        dp[i]=cnt[i]*i-sum[i];</span><br><span class="line">        <span class="keyword">if</span>(head&lt;=tail)</span><br><span class="line">            dp[i]=<span class="built_in">min</span>(dp[i],dp[j]+(cnt[i]-cnt[j])*i-(sum[i]-sum[j]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=T;i&lt;T+M;++i) ans=<span class="built_in">min</span>(ans,dp[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5 </span></span><br><span class="line"><span class="comment">11 13 1 5 5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="26-CF987C-Three-displays"><a href="#26-CF987C-Three-displays" class="headerlink" title="26.CF987C Three displays"></a><a href="https://www.luogu.com.cn/problem/CF987C">26.CF987C Three displays</a></h3><p>线段树优化dp ，<del>因为数据过水不需要优化。</del></p><p>暴力 dp 时间复杂度 $\mathcal O(n^2)$ 勉强能过，优化后复杂度 $\mathcal O(n\log n)$ ，Live 巨佬应该会打，也可以看题解，我只会暴力。</p><p>记着不要把题看错了，也不要完全相信翻译，适量读读原文。</p><details>    <summary>暴力AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">3e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,Min1=<span class="number">1e9</span>,Min2=<span class="number">1e9</span>,Min3=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Display</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s,c;</span><br><span class="line">&#125;Num[MAXN];</span><br><span class="line"><span class="type">int</span> dp[MAXN][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;math.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;math.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Num[i].s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Num[i].c);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;++k)</span><br><span class="line">                <span class="keyword">if</span>(Num[i].s&gt;Num[k].s)</span><br><span class="line">                    dp[i][j]=<span class="built_in">min</span>(dp[i][j],dp[k][j<span class="number">-1</span>]+Num[i].c);</span><br><span class="line">    <span class="keyword">if</span>(dp[N][<span class="number">3</span>]==<span class="number">1061109567</span>) <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=N;++i) <span class="built_in">checkMin</span>(ans,dp[i][<span class="number">3</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">2 4 5 4 10</span></span><br><span class="line"><span class="comment">40 30 20 10 40</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line"><span class="comment">10 13 11 14 15 12 13 13 18 13</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 区间dp </tag>
            
            <tag> 优化 </tag>
            
            <tag> RMQ </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 数论 </tag>
            
            <tag> String </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 数位dp </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 队列 </tag>
            
            <tag> bfs </tag>
            
            <tag> dfs </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> 枚举，暴力 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> SPFA </tag>
            
            <tag> 进制 </tag>
            
            <tag> Floyd </tag>
            
            <tag> 离散化 </tag>
            
            <tag> 状压dp </tag>
            
            <tag> 状态压缩 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 建图 </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> 逆元 </tag>
            
            <tag> 快速幂 </tag>
            
            <tag> 构造 </tag>
            
            <tag> 斜率优化 </tag>
            
            <tag> 线段树优化dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kmp字符串匹配算法</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/kmp/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/kmp/</url>
      
        <content type="html"><![CDATA[<p>“强大的并不是你在顺境中能多么快的前进，而是你能多快在逆流中找回你自己”</p><span id="more"></span><p>俗称 $KMP$ 算法，用法是在一个字符串 $A$ 中快速地找到一个子串 $B$ 的出现情况。是<strong>AC自动机</strong>的组成部分之一。</p><p>对于引言，你是否有想法呢？</p><p>对于一个字符串，如果当我们匹配失败，我们是否需要重新开始匹配，还是说，我们能够仅仅往前一点，然后从这一个位置再次比配。对于 $KMP$ 而言，我们有一个定义称为<strong>失配数组</strong>。是对于该点如果没有匹配成功而跳回的位置，一般记作 <code>nxt[]</code> 或者 <code>kmp[]</code> 。看个人喜好。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>我们需要遍历子串 $B$ 以记录失配数组的失配情况。如果该点无法匹配，则从该点以 <code>j=nxt[j]</code> 往前跳，直到可以再次匹配为止。然后以这样的顺序处理出失配数组。</p><p>KMP 的实现是调整 $j$ 的位置（减小 $j$ 值）并使 $j$ 尽量大，使得 $A[i-j+1…i]$ 与 $B[1…j]$ 保持匹配且尝试匹配 $A[i+1]$ 和 $B[j+1]$ 。</p><h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><p>遍历字符串 $A$ ，定义一个指针记为 $j$ 表示当前已经匹配到了第 $j$ 位。如果 $a[i] \neq b[j]$ ，则往前失配，直到再次匹配为止，如果 <code>j=len(b)</code> ，则证明我们已经匹配到了一个完整的子串 $B$ 。之后的操作就根据题目而定了。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="【模板】kmp"><a href="#【模板】kmp" class="headerlink" title="【模板】kmp"></a><a href="https://www.luogu.com.cn/problem/P3375">【模板】kmp</a></h3><p>按上述实现即可，可能不太清楚，所以接下来给出代码。</p><p>这是没有改码风之前的代码，凑合着看吧。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">char</span> stra[<span class="number">10000001</span>],strb[<span class="number">10000001</span>];</span><br><span class="line"><span class="type">int</span> Kmp[<span class="number">10000001</span>],N,M,j;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">cin&gt;&gt;(stra+<span class="number">1</span>)&gt;&gt;(strb+<span class="number">1</span>);</span><br><span class="line">    Kmp[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    N=<span class="built_in">strlen</span>(strb+<span class="number">1</span>);</span><br><span class="line">    M=<span class="built_in">strlen</span>(stra+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;strb[i]!=strb[j+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            j=Kmp[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(strb[i]==strb[j+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        Kmp[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;strb[j+<span class="number">1</span>]!=stra[i])</span><br><span class="line">        &#123;</span><br><span class="line">            j=Kmp[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stra[i]==strb[j+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==N)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i-N+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Kmp[i]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ABABABC</span></span><br><span class="line"><span class="comment">ABA</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="HNOI2008-GT考试"><a href="#HNOI2008-GT考试" class="headerlink" title="[HNOI2008]GT考试"></a><a href="https://www.luogu.com.cn/problem/P3193">[HNOI2008]GT考试</a></h3><p>一道比较难的 $kmp$ 题，因为 $kmp$ 的思路其实与 $dp$ 差不多，所以一般而言两者是连在一起考的。用 <code>f[i][j]</code> 表示对于 $i$ 位数匹配到 $j$ 位的答案数，似乎有点像数位dp。预处理出 <code>a[i][j]</code> 表示从 <code>f[x][i]</code> 转移到 <code>f[x+1][j]</code> 的可能数。</p><p>那么转移方程则是 $dp_{i,j}=\sum\limits^{m-1}_{k=0}dp_{i-1,k}*a_{k,j}$ 即可。则答案便是 $\sum\limits_{i=0}^{m-1}dp_{n,i}$ 。但这样的话，时间复杂度是 $O(nm^2)$ ，对于这道题而言只能得到 $40pt$ 。</p><p><a href="https://violeteternal.github.io/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/matrix/">前置芝士：矩阵快速幂</a></p><p>将 $dp_{i,j}$ 记作矩阵 $DP_{i}$ ，$DP_{i}$ 的第一层就是 $dp_{i,j}$ 转移方程变成了 $DP_{i}=DP_{i-1}*G$ 然后求 $DP_n$ 即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">21</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,K;</span><br><span class="line"><span class="type">int</span> f[MAXN][MAXN];        <span class="comment">//f(i,j)表示所有长度为i，且不包含M串</span></span><br><span class="line">                        <span class="comment">//且该串的末尾部分和S串当前匹配的最大长度为j</span></span><br><span class="line">                        <span class="comment">//的所有字符串的集合。</span></span><br><span class="line"><span class="type">char</span> str[MAXN];</span><br><span class="line"><span class="type">int</span> Kmp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underExpr</span><span class="params">(<span class="type">int</span> c[][MAXN],<span class="type">int</span> a[][MAXN],<span class="type">int</span> b[][MAXN])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> t[MAXN][MAXN];</span><br><span class="line">    <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="built_in">sizeof</span>(t));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;M;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;M;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;M;++k)</span><br><span class="line">                t[i][j]=(t[i][j]+a[i][k]*b[k][j])%K;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;M;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;M;++j)</span><br><span class="line">            c[i][j]=t[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQuickPow</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> f0[MAXN][MAXN]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) <span class="built_in">underExpr</span>(f0,f0,f);</span><br><span class="line">        <span class="built_in">underExpr</span>(f,f,f);</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;M;++i) res=(res+f0[<span class="number">0</span>][i])%K;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;GTtest.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;GTtest.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M),<span class="built_in">underRead</span>(K);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;str[j+<span class="number">1</span>]!=str[i]) j=Kmp[j];</span><br><span class="line">        <span class="keyword">if</span>(str[j+<span class="number">1</span>]==str[i])++j;</span><br><span class="line">        Kmp[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化f</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;M;++j)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> c=<span class="string">&#x27;0&#x27;</span>;c&lt;=<span class="string">&#x27;9&#x27;</span>;++c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k=j;</span><br><span class="line">            <span class="keyword">while</span>(k&amp;&amp;str[k+<span class="number">1</span>]!=c) k=Kmp[k];</span><br><span class="line">            <span class="keyword">if</span>(str[k+<span class="number">1</span>]==c) ++k;</span><br><span class="line">            <span class="keyword">if</span>(k&lt;M) ++f[j][k];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//f(n)=f(0)+A^N</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">underQuickPow</span>(N));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 3 100</span></span><br><span class="line"><span class="comment">111</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> String </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> Kmp </tag>
            
            <tag> 前缀数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态压缩dp</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-state-compression/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-state-compression/</url>
      
        <content type="html"><![CDATA[<p>“每天一遍，MLE再见。”</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于一类题而言，如果用 $dp$ 来做的话，会有 $m$ 个状态，而作为我们来讲，我们不可能去开一个数组 $dp[2][2][2][2][2][2][2]…[2]$ 来记录，因为空间是动态的。所以我们考虑将这 $m$ 个状态压缩成一个 $m$ 位的二进制数。存储为一位，则空间复杂度与时间复杂度都是 $O(2^m)$ 的话，枚举 $[0,2^m-1]$ ，而对于这个二进制数，它的第 $k$ 位为 $1$ 则满足第 $k$ 个条件，判断语句为 <code>if(i&gt;&gt;k&amp;1)</code> 即可。</p><p>这种题可实行的范围一般都不超过 $10 \sim 20$ ，所以很容易识别。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="Acwing91-最短Hamilton路径"><a href="#Acwing91-最短Hamilton路径" class="headerlink" title="Acwing91.最短Hamilton路径"></a><a href="https://www.acwing.com/problem/content/93/">Acwing91.最短Hamilton路径</a></h3><p>最经典的状压题，我们用一个长度为 $n$ 的二进制数来存储，第 $k$ 位为 $0$ ，则表示第 $k$ 个点还没有到达；反之，则表示第 $k$ 个点已经到达。然后遍历即可，时间复杂度 $O(2^nn^2)$ 。</p><details>    <summary>查看代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">21</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> val[MAXN][MAXN],dp[MAXS][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-state-compression.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-state-compression.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j)</span><br><span class="line">            <span class="built_in">read</span>(val[i][j]);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j)</span><br><span class="line">            <span class="keyword">if</span>(i&gt;&gt;j&amp;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;++k)</span><br><span class="line">                    <span class="keyword">if</span>(i&gt;&gt;k&amp;<span class="number">1</span>)</span><br><span class="line">                        dp[i][j]=<span class="built_in">min</span>(dp[i][j],dp[i-(<span class="number">1</span>&lt;&lt;j)][k]+val[k][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>][n<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">0 2 4 5 1</span></span><br><span class="line"><span class="comment">2 0 6 5 3</span></span><br><span class="line"><span class="comment">4 6 0 8 3</span></span><br><span class="line"><span class="comment">5 5 8 0 5</span></span><br><span class="line"><span class="comment">1 3 3 5 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="P1896-SCOI2005-互不侵犯"><a href="#P1896-SCOI2005-互不侵犯" class="headerlink" title="P1896 [SCOI2005]互不侵犯"></a><a href="https://www.luogu.com.cn/problem/P1896">P1896 [SCOI2005]互不侵犯</a></h3><p>也是一道较为经典的状压dp题，考虑当前行与上一行的状态，满足：</p><ul><li>没有相邻的 $1$ </li><li>$s_{line}\&amp;s_{line-1}=0$</li></ul><p>即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS=(<span class="number">1</span>&lt;&lt;<span class="number">10</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK=<span class="number">101</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,K,Total;</span><br><span class="line">ll dp[MAXK][MAXN][MAXS],ok[MAXS],cnt[MAXS];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;N);++s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> o=s,c=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(o)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(o&amp;<span class="number">1</span>) ++c;</span><br><span class="line">            o&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[s]=c;</span><br><span class="line">        <span class="keyword">if</span>(!(((s&lt;&lt;<span class="number">1</span>)|(s&gt;&gt;<span class="number">1</span>))&amp;s)) ok[++Total]=s;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-compression.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-compression.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N),<span class="built_in">read</span>(K);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> line=<span class="number">1</span>;line&lt;=N;++line)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=Total;++l)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> sl=ok[l];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> r=<span class="number">1</span>;r&lt;=Total;++r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> sr=ok[r];</span><br><span class="line">                <span class="keyword">if</span>(!((sr|(sr&lt;&lt;<span class="number">1</span>)|(sr&gt;&gt;<span class="number">1</span>))&amp;sl))</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=K;++k)</span><br><span class="line">                        <span class="keyword">if</span>(k-cnt[sl]&gt;=<span class="number">0</span>)</span><br><span class="line">                            dp[k][line][sl]+=dp[k-cnt[sl]][line<span class="number">-1</span>][sr];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Total;++i) ans+=dp[K][N][ok[i]];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="P2704-NOI2001-炮兵阵地"><a href="#P2704-NOI2001-炮兵阵地" class="headerlink" title="P2704 [NOI2001] 炮兵阵地"></a><a href="https://www.luogu.com.cn/problem/P2704">P2704 [NOI2001] 炮兵阵地</a></h3><p>这便是一道比较进阶的状压dp题了。因为对于一排而言，我们需要记录前两行的信息才能对该行的信息进行转移。所以需要维护前两行的状态，用 $dp[i][j][k]$ 表示第 $i$ 行的状态是 $j$ 并且 $i-1$ 行的状态是 $k$ 的答案总数。并对 $i-2$ 进行转移。</p><p>但是，这样的时间复杂度是 $2^{3m}n$ ，根本不够。所以，我们需要预处理出对于每一行而言的可行方案，直接在可行方案里计算即可。</p><p>然而，空间复杂度 $O(2^{2m}n)$ ，又超出了空间限制，所以我们可以像背包那样使用滚动数组。</p><details>    <summary>查看代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> popcount(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">101</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">11</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS=<span class="number">1</span>&lt;&lt;<span class="number">10</span>|<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,id[MAXS],sz;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2</span>][MAXS][MAXS];</span><br><span class="line"><span class="type">bool</span> valid[MAXN][MAXM];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;V,okV[MAXS][MAXS];</span><br><span class="line"><span class="type">char</span> op[MAXM+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;m);++s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m<span class="number">-1</span>&amp;&amp;flag;++j)</span><br><span class="line">            <span class="keyword">if</span>(s&gt;&gt;j&amp;<span class="number">1</span>) flag=!(s&gt;&gt;(j+<span class="number">1</span>)&amp;<span class="number">1</span>)&amp;&amp;!(s&gt;&gt;(j+<span class="number">2</span>)&amp;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(flag) id[s]=V.<span class="built_in">size</span>(),V.<span class="built_in">push_back</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    sz=V.<span class="built_in">size</span>();      <span class="comment">//V[0,sz-1] is valid</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sz;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;sz;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(V[i]&amp;V[j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;sz;++k)</span><br><span class="line">                <span class="keyword">if</span>(!(V[i]&amp;V[k])&amp;&amp;!(V[j]&amp;V[k])) okV[i][j].<span class="built_in">push_back</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> op,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">        <span class="keyword">if</span>((s&gt;&gt;i&amp;<span class="number">1</span>)&amp;&amp;!valid[op][i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-sp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-sp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,op);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;++j) valid[i][j]=op[j]==<span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*memset(dp[0],-63,sizeof(dp[0]));*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;sz;++j)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;sz;++k)</span><br><span class="line">            dp[<span class="number">0</span>][j][k]=-INF;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*memset(dp[i&amp;1],0,sizeof(dp[i&amp;1]));*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;sz;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;sz;++k)</span><br><span class="line">                dp[i&amp;<span class="number">1</span>][j][k]=-INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;sz;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;sz;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k]==-INF) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> nxt:okV[j][k])</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">check</span>(i,V[nxt])) dp[i&amp;<span class="number">1</span>][nxt][j]=<span class="built_in">max</span>(dp[i&amp;<span class="number">1</span>][nxt][j],dp[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][j][k]+<span class="built_in">popcount</span>(V[nxt]));</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;sz;++j)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;sz;++k)</span><br><span class="line">        res=<span class="built_in">max</span>(res,dp[n&amp;<span class="number">1</span>][j][k]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">PHPP</span></span><br><span class="line"><span class="comment">PPHH</span></span><br><span class="line"><span class="comment">PPPP</span></span><br><span class="line"><span class="comment">PHPP</span></span><br><span class="line"><span class="comment">PHHP</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="P3959-宝藏"><a href="#P3959-宝藏" class="headerlink" title="P3959 宝藏"></a>P3959 宝藏</h3><p>求一个图的最小权生成树，这里的最小权关系到其生成高度。</p><p>定义状态为 $dp[i][s]$ 表示当前生成树的高度为 $i$ ，且点集状态为 $s $ 的情况。每一次转移 $s$ 的子集 $T$ 以及 $s$ 与 $T$ 相异的部分。</p><p>判断子集的方法： <code>T=(T-1)&amp;s</code> 。</p><p>转移为：</p><p>$dp[i][s]=\min\{dp[i-1][T]+temp\times j\}$</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">5e3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXS=<span class="number">1</span>&lt;&lt;MAXN;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M;</span><br><span class="line">ll dp[MAXN][MAXS],w,ans=INF;</span><br><span class="line">ll Path[MAXN][MAXN],Dist[MAXS];</span><br><span class="line"><span class="comment">/*struct G</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int next,to;</span></span><br><span class="line"><span class="comment">    ll val;</span></span><br><span class="line"><span class="comment">    G(int n=0,int t=0,ll v=0):next(n),to(t),val(v)&#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;Edge[MAXM&lt;&lt;1];</span></span><br><span class="line"><span class="comment">int Head[MAXN],Total;</span></span><br><span class="line"><span class="comment">int Path[MAXN][MAXN];</span></span><br><span class="line"><span class="comment">bool Vis[MAXN];</span></span><br><span class="line"><span class="comment">inline void addEdge(int u,int v,ll w)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    Edge[++Total]=G(Head[u],v,w);Head[u]=Total;</span></span><br><span class="line"><span class="comment">    Edge[++Total]=G(Head[v],u,w);Head[v]=Total;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void Init()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    queue&lt;int&gt;Q;</span></span><br><span class="line"><span class="comment">    for(int s=0;s&lt;N;++s)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        memset(Vis,0,sizeof(Vis));</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;N;++i) Path[s][i]=INF;</span></span><br><span class="line"><span class="comment">        Path[s][s]=1;Vis[s]=1;</span></span><br><span class="line"><span class="comment">        Q.push(s);</span></span><br><span class="line"><span class="comment">        while(!Q.empty())</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            int u=Q.front();Q.pop();</span></span><br><span class="line"><span class="comment">            Vis[u]=0;</span></span><br><span class="line"><span class="comment">            for(int e=Head[u];e;e=Edge[e].next)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                int v=Edge[e].to;</span></span><br><span class="line"><span class="comment">                if(Path[s][v]&gt;Path[s][u]+1)</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                    Path[s][v]=Path[s][u]+1;</span></span><br><span class="line"><span class="comment">                    if(!Vis[v]) Q.push(v);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        while(!Q.empty()) Q.pop();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-compressin.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-compressin.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M);</span><br><span class="line">    <span class="built_in">memset</span>(Path,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(Path));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        --u,--v;</span><br><span class="line">        Path[u][v]=Path[v][u]=<span class="built_in">min</span>(Path[u][v],w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="type">int</span> S=(<span class="number">1</span>&lt;&lt;N)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">1</span>;s&lt;=S;++s)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)|s==s)</span><br><span class="line">            &#123;</span><br><span class="line">                Path[i][i]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;N;++k)</span><br><span class="line">                    <span class="keyword">if</span>(Path[i][k]!=INF) Dist[s]|=(<span class="number">1</span>&lt;&lt;k);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;++i) dp[<span class="number">0</span>][<span class="number">1</span>&lt;&lt;i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">2</span>;s&lt;=S;++s)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> T=s<span class="number">-1</span>;T;T=(T<span class="number">-1</span>)&amp;s)</span><br><span class="line">            <span class="keyword">if</span>((Dist[T]|s)==Dist[T])</span><br><span class="line">            &#123;</span><br><span class="line">                ll res=<span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> sf=T^s;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;N;++k)</span><br><span class="line">                    <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;k)&amp;sf)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ll temp=INF;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;N;++l)</span><br><span class="line">                            <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;l)&amp;T) <span class="built_in">checkMin</span>(temp,Path[l][k]);</span><br><span class="line">                        res+=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;N;++j)</span><br><span class="line">                    <span class="keyword">if</span>(dp[j<span class="number">-1</span>][T]!=INF)</span><br><span class="line">                        dp[j][s]=<span class="built_in">min</span>(dp[j][s],dp[j<span class="number">-1</span>][T]+res*j);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;++i) <span class="built_in">checkMin</span>(ans,dp[i][S]);</span><br><span class="line">    <span class="comment">/*for(int i=1,u,v;i&lt;=M;++i)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        read(u,v,w);</span></span><br><span class="line"><span class="comment">        addEdge(u-1,v-1,w);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Init();</span></span><br><span class="line"><span class="comment">    for(int start=0;start&lt;N;++start)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        ll res=INF;</span></span><br><span class="line"><span class="comment">        for(int s=0;s&lt;(1&lt;&lt;N);++s)</span></span><br><span class="line"><span class="comment">            for(int i=0;i&lt;N;++i)</span></span><br><span class="line"><span class="comment">                dp[start][s]=INF;</span></span><br><span class="line"><span class="comment">        dp[start][1&lt;&lt;start]=0;</span></span><br><span class="line"><span class="comment">        for(int s=0;s&lt;(1&lt;&lt;N);++s)</span></span><br><span class="line"><span class="comment">            for(int st=0;st&lt;N;++st)</span></span><br><span class="line"><span class="comment">                if((s&gt;&gt;st)&amp;1)</span></span><br><span class="line"><span class="comment">                    for(int e=Head[st],v;e;e=Edge[e].next)</span></span><br><span class="line"><span class="comment">                        if((s&gt;&gt;(v=Edge[e].to))&amp;1)</span></span><br><span class="line"><span class="comment">                            dp[start][s]=min(dp[start][s],dp[start][s-(1&lt;&lt;v)]+Edge[e].val*Path[start][st]);</span></span><br><span class="line"><span class="comment">        checkMin(ans,dp[start][(1&lt;&lt;N)-1]);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5 </span></span><br><span class="line"><span class="comment">1 2 1 </span></span><br><span class="line"><span class="comment">1 3 3 </span></span><br><span class="line"><span class="comment">1 4 1 </span></span><br><span class="line"><span class="comment">2 3 4 </span></span><br><span class="line"><span class="comment">3 4 1 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实，状态压缩并不仅限于使用在dp内，很多地方都能用到。方便，但十分难调（机房某巨佬所言）。算是dp一环中比较难的一类了。（之后还会有四边形不等式和斜率优化）</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 优化 </tag>
            
            <tag> 状压dp </tag>
            
            <tag> 状态压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树型dp</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-tree/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-tree/</url>
      
        <content type="html"><![CDATA[<p>“父承子业。”</p><span id="more"></span><p>简单来说就是在一棵树上进行 $dp$ 操作。一般是从子节点转移到父节点。初始化为叶节点。</p><p>其可扩展性十分高。所以没有固定模板而言。但一般实现方式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span><span class="comment">//当前节点以及其父节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[x]=<span class="comment">/*something*/</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;<span class="comment">//不可回溯</span></span><br><span class="line">        <span class="built_in">dp</span>(v,x);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        some Codes;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    some Code;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">dp</span>(Rt,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="求树的直径"><a href="#求树的直径" class="headerlink" title="求树的直径"></a>求树的直径</h3><p>两种方法</p><ol><li>两遍 $bfs$ 或 $dfs$ 。第一次从任意点开始，找到该点能到达的最远距离，第二次从找到的点出发，再次找最远点。这两点就是树的直径。复杂度 $O(2n)$ 。</li><li>考虑树型 $dp$ 。时间复杂度 $O(n)$ 。</li></ol><p>第一种方法不必多述，而对于第二种方法：我们用 $dp_{k,x},k \in \{0,1\},x \in n$ 来记录该点所能到达其子树的最远距离和次远距离。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="P3047-USACO12FEB-Nearby-Cows-G"><a href="#P3047-USACO12FEB-Nearby-Cows-G" class="headerlink" title="P3047 [USACO12FEB]Nearby Cows G"></a><a href="https://www.luogu.com.cn/problem/P3047">P3047 [USACO12FEB]Nearby Cows G</a></h3><p>对于一个点 $x$ ，与它相距不超过 $k$ 的点有两种情况：</p><ul><li>在 $x$ 的儿子之中。</li><li>在 $x$ 之上（或其父节点的另一棵子树）</li></ul><p>那么我们进行两次遍历，第一次查找每一个点向下查找能找到的点权值，记为 <code>dp[0][x][k]</code> ，第二次查找父节点满足条件的点权值，将两次计算相加即可。需要进行容斥。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK=<span class="number">21</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,K,Val[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2</span>][MAXN][MAXK];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(Tree)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">    Edge[++Total]=(Tree)&#123;Head[v],u&#125;;Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=K;++i) dp[<span class="number">0</span>][x][i]=Val[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=K;++i) dp[<span class="number">0</span>][x][i]+=dp[<span class="number">0</span>][v][i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsSec</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        dp[<span class="number">1</span>][v][<span class="number">1</span>]+=dp[<span class="number">0</span>][x][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=K;++i) dp[<span class="number">1</span>][v][i]+=dp[<span class="number">1</span>][x][i<span class="number">-1</span>]-dp[<span class="number">0</span>][v][i<span class="number">-2</span>];</span><br><span class="line">        <span class="built_in">dfsSec</span>(v,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tredp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tredp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N),<span class="built_in">read</span>(K);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        <span class="built_in">read</span>(u),<span class="built_in">read</span>(v);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Val[i]);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=K;++j)</span><br><span class="line">            dp[<span class="number">1</span>][i][j]=dp[<span class="number">0</span>][i][j];</span><br><span class="line">    <span class="built_in">dfsSec</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dp[<span class="number">1</span>][i][K]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 2 </span></span><br><span class="line"><span class="comment">5 1 </span></span><br><span class="line"><span class="comment">3 6 </span></span><br><span class="line"><span class="comment">2 4 </span></span><br><span class="line"><span class="comment">2 1 </span></span><br><span class="line"><span class="comment">3 2 </span></span><br><span class="line"><span class="comment">1 </span></span><br><span class="line"><span class="comment">2 </span></span><br><span class="line"><span class="comment">3 </span></span><br><span class="line"><span class="comment">4 </span></span><br><span class="line"><span class="comment">5 </span></span><br><span class="line"><span class="comment">6 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="P7103-「C-E-L-U-01」族谱树"><a href="#P7103-「C-E-L-U-01」族谱树" class="headerlink" title="P7103 「C.E.L.U-01」族谱树"></a><a href="https://www.luogu.com.cn/problem/P7103">P7103 「C.E.L.U-01」族谱树</a></h3><p>这道题其实并不是一道纯粹树型 $dp$ 。直接用 $Tarjan$ 求所有深度的 $lca$ 即可。复杂度 $O(n+q)$ 。据说 $O(n \log n)$ 会被卡。不清楚。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,K[MAXN],Q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="type">int</span> f[MAXN],dep[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(Tree)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dpTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[x]=dep[last]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x];e;e=Edge[e].next) <span class="built_in">dpTree</span>(Edge[e].to,x),f[Edge[e].to]=x;</span><br><span class="line">    K[dep[x]]=K[dep[x]]?<span class="built_in">find</span>(K[dep[x]]):x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tredp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tredp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N),<span class="built_in">read</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,fa;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(fa);f[i]=i;</span><br><span class="line">        <span class="built_in">addEdge</span>(fa,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dpTree</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">while</span>(M--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(Q);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,K[Q]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8 3</span></span><br><span class="line"><span class="comment">0 1 1 2 2 3 4 5</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="Loj-10155-「一本通-5-2-例-3」数字转换"><a href="#Loj-10155-「一本通-5-2-例-3」数字转换" class="headerlink" title="Loj#10155. 「一本通 5.2 例 3」数字转换"></a><a href="https://loj.ac/p/10155">Loj#10155. 「一本通 5.2 例 3」数字转换</a></h3><p>这题我还比较喜欢。不看标签我是绝对不会想到用树型 $dp$ 来解的。我们记数 $i$ 的约数和为 $f(i)$ 。而当 $f(i) \leq i$ 时，可以互相转换。如果将每一个数都看作一个节点，则我们连一条边 $c(i,f(i))$ 。然后对于这一个无向图。求出其直径即可。而对于线性求约数和。读者可以自行思考如何实现复杂度 $O(n \log n)$，或者看代码。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Limit,f[MAXN],dp[<span class="number">3</span>][MAXN],ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;MAXN;++i) f[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;MAXN;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;i*j&lt;MAXN;++j)</span><br><span class="line">            f[i*j]+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(Tree)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">    Edge[++Total]=(Tree)&#123;Head[v],u&#125;;Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dpTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x];e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v==last||v==x) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dpTree</span>(v,x);</span><br><span class="line">        <span class="keyword">if</span>(dp[<span class="number">1</span>][x]&lt;dp[<span class="number">1</span>][v]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[<span class="number">2</span>][x]=dp[<span class="number">1</span>][x];</span><br><span class="line">            dp[<span class="number">1</span>][x]=dp[<span class="number">1</span>][v]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dp[<span class="number">2</span>][x]&lt;dp[<span class="number">1</span>][v]+<span class="number">1</span>) dp[<span class="number">2</span>][x]=dp[<span class="number">1</span>][v]+<span class="number">1</span>;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,dp[<span class="number">1</span>][x]+dp[<span class="number">2</span>][x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree-d.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree-d.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">read</span>(Limit);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Limit;++i) <span class="keyword">if</span>(i&gt;=f[i]) <span class="built_in">addEdge</span>(i,f[i]);</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=Limit;++i) cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;f[i]&lt;&lt;endl;</span></span><br><span class="line">    <span class="built_in">dpTree</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">79</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 优化 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> LCA </tag>
            
            <tag> 树型dp </tag>
            
            <tag> 二次扫描与换根法 </tag>
            
            <tag> 树的重心 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 换根dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树上最近公共祖先(LCA)</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/lca/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/lca/</url>
      
        <content type="html"><![CDATA[<p>“你与我最初的缔结”</p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>LCA（Least Common Ancestors）</strong>：即最近公共祖先，是指在有根树中，找出某两个结点 $u$ 和 $v$ 最近的公共祖先。</p><p>对于下图（取自洛谷）：</p><p><img src="https://cdn.luogu.com.cn/upload/pic/61612.png" alt="LCA"></p><p>$lca(13,5)=3$</p><p>$lca(6,4)=4$</p><p>$lca(18,2)=2$</p><p>$lca(15,18)=5$</p><p>…</p><h2 id="朴素思路"><a href="#朴素思路" class="headerlink" title="朴素思路"></a>朴素思路</h2><p>从一个点开始，向上标记至根节点；然后将另一点向上搜索到第一个标记的点，该点则是两点的 $lca$ 。这样的复杂度是 $O(nq)$ ，$q$ 表示询问次数。<del>非常滴慢</del>。</p><h2 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h2><h3 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h3><hr><h3 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h3><p>裸裸的树剖，甚至不需要数据结构维护。</p><p>对于一组询问 $(x,y)$ 首先将两个点跳到同一条重链上，然后输出深度小的点即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Root;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[u],v);Head[u]=Total;</span><br><span class="line">    Edge[++Total]=<span class="built_in">Graph</span>(Head[v],u);Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Size[MAXN],Dep[MAXN],Top[MAXN],Fa[MAXN],Son[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last,<span class="type">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fa[x]=last,Size[x]=<span class="number">1</span>,Dep[x]=dep;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsTree</span>(v,x,dep+<span class="number">1</span>);</span><br><span class="line">        Size[x]+=Size[v];</span><br><span class="line">        <span class="keyword">if</span>(!Son[x]||Size[Son[x]]&lt;Size[v]) Son[x]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsDfn</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Top[x]=topf;</span><br><span class="line">    <span class="keyword">if</span>(!Son[x]) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">dfsDfn</span>(Son[x],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v==Fa[x]||v==Son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfsDfn</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Top[x]!=Top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[Top[x]]&lt;Dep[Top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        x=Fa[Top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&gt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree-chain.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,Root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,u,v;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfsTree</span>(Root,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfsDfn</span>(Root,Root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x,y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">lca</span>(x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5 4</span></span><br><span class="line"><span class="comment">3 1</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="Tarjan"><a href="#Tarjan" class="headerlink" title="Tarjan"></a>Tarjan</h3><hr><h3 id="st表"><a href="#st表" class="headerlink" title="st表"></a>st表</h3><p>做到 $O(n \log n)$ 的预处理，$O(1)$ 的查询，算比较快的了。将整个树遍历，每遍历一个点将其加至序列末尾。记为数组 $id(x)$ 。无论是到达还是回溯都需要记录。可以证明该序列不会超过 $2n-1$ 。从 $x$ 到 $y$ 需要从 $lca$ 的一个子树走到另一个子树。则在区间 $[id(x),id(y)]$ 之间一定存在 $lca(x,y)$ 。</p><p>而 $lca(x,y)$ 就是其中深度最小的点。用 $st$ 表维护。</p><details>    <summary>ST表<summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Idx,Rt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="type">int</span> Log[MAXN&lt;&lt;<span class="number">1</span>],St[MAXN&lt;&lt;<span class="number">1</span>][<span class="number">64</span>],Dep[MAXN],Id[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAddEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[v],u&#125;;Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underSwap</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x^=y^=x^=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underDfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    St[++Idx][<span class="number">0</span>]=x;Id[x]=Idx;Dep[x]=Dep[last]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">underDfs</span>(v,x);</span><br><span class="line">        St[++Idx][<span class="number">0</span>]=x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underDepMin</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Dep[a]&lt;Dep[b]?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=Idx;++i) Log[i]=Log[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;k)&lt;=Idx;++k)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>&lt;=Idx;++i)</span><br><span class="line">            St[i][k]=<span class="built_in">underDepMin</span>(St[i][k<span class="number">-1</span>],St[i+(<span class="number">1</span>&lt;&lt;(k<span class="number">-1</span>))][k<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underLca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=Id[x],y=Id[y];</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) <span class="built_in">underSwap</span>(x,y);</span><br><span class="line">    <span class="type">int</span> k=Log[y-x+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">underDepMin</span>(St[x][k],St[y-(<span class="number">1</span>&lt;&lt;(k))+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;LCA.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;LCA.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M),<span class="built_in">underRead</span>(Rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(u),<span class="built_in">underRead</span>(v);</span><br><span class="line">        <span class="built_in">underAddEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underDfs</span>(Rt,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">underInit</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y;M;--M)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(x),<span class="built_in">underRead</span>(y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underLca</span>(x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5 4</span></span><br><span class="line"><span class="comment">3 1</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> LCA </tag>
            
            <tag> Tarjan </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 分治 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 递归 </tag>
            
            <tag> ST表 </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数位dp</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-digit/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-digit/</url>
      
        <content type="html"><![CDATA[<p>“聚小而大。”</p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一种以位数为转移条件的 $dp$ ，一般是统计一个区间内满足一类条件的计数 $dp$ 。一般的初始转移有二维 $dp_{i,j}$ 表示有 $i$ 位且末位为 $j$ 的统计个数。一般满足差分性质（与<strong>树状数组</strong>类似），即 $[l,r]=[1,r]-[1,l-1]$ 的性质。</p><h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><h3 id="迭代式"><a href="#迭代式" class="headerlink" title="迭代式"></a>迭代式</h3><p>即使用 <code>for</code> 循环来遍历整个 <code>dp</code> 数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;Num;<span class="comment">//存储limit的每一位</span></span><br><span class="line">    <span class="keyword">while</span>(x) Num.<span class="built_in">push_back</span>(x%<span class="number">10</span>),x/=<span class="number">10</span>;</span><br><span class="line">    ll res=<span class="number">0</span>;<span class="comment">//存储答案</span></span><br><span class="line">    <span class="type">int</span> last=<span class="comment">/*init*/</span>;<span class="comment">//限制条件s</span></span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=Num.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=Num[i];</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;x;++j) <span class="keyword">if</span>(<span class="comment">/*some condition*/</span>) res+=dp[i+<span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span>(<span class="comment">/*some condition*/</span>) last=x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(!i) ++res;</span><br><span class="line">&#125;<span class="comment">//以limit=119547为例，这部分计算的是[100000,119547]的值</span></span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=Num.<span class="built_in">size</span>()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">            res+=dp[i+<span class="number">1</span>][j];</span><br><span class="line">    <span class="comment">//同上，这部分计算[1,99999]的总值</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="记忆化"><a href="#记忆化" class="headerlink" title="记忆化"></a>记忆化</h3><p>使用<code>dfs</code>遍历所有的情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> x<span class="comment">/*,bool con1,bool con2...bool conn*/</span>)</span><span class="comment">//一些限制条件，x表示位数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="comment">/*something*/</span>;</span><br><span class="line">    ll &amp;res=dp[x]<span class="comment">/*[some][conditions]...[]*/</span>;</span><br><span class="line">    <span class="keyword">if</span>(~res) <span class="keyword">return</span> res;<span class="comment">//该位置已达到</span></span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=cntN;++i)<span class="comment">//limit范围内</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="comment">/*some conditions*/</span>) <span class="comment">/*something*/</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="comment">/*some conditions*/</span>) <span class="comment">/*something*/</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">/*something*/</span>;</span><br><span class="line">        res+=<span class="built_in">dfs</span>(x<span class="number">-1</span><span class="comment">/*,...,...,...,*/</span>);<span class="comment">//查找下一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>将所有应算的都算出来， $dp$ 的过程只是在查找 $limit$ 范围之内的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i) dp[<span class="number">1</span>][i]=<span class="number">1</span>;<span class="comment">//处理[0,9]</span></span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;MAXN;++i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">            <span class="comment">/*for(re int l=?;?;?)*/</span></span><br><span class="line">            <span class="comment">/*some conditions*/</span>dp[i][j]=dp[i<span class="number">-1</span>][<span class="comment">/*some conditions*/</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="Luogu-P2657-windy数"><a href="#Luogu-P2657-windy数" class="headerlink" title="Luogu P2657 windy数"></a><a href="https://www.luogu.com.cn/problem/P2657">Luogu P2657 windy数</a></h3><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>数位 $dp$ 模板题，用 $dp_{i,j}$ 表示位数为 $i$ ，最高位是 $j$ 的计数，递推出在 $limit$ 内满足的个数，对于相邻的两位，只要其相差不到 $2$ 都可以相加。最终答案便是 <code>dp(r)-dp(l-1)</code> 。</p><h4 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h4><p>递推写法。</p><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">11</span>][<span class="number">11</span>],l,r;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underAbs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x&gt;<span class="number">0</span>?x:-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i) dp[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">10</span>;++i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">9</span>;++l)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">underAbs</span>(l-j)&gt;=<span class="number">2</span>)</span><br><span class="line">                    dp[i][l]+=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underDp</span><span class="params">(<span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!N) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;Num;</span><br><span class="line">    Num.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> n=N,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) Num.<span class="built_in">push_back</span>(n%<span class="number">10</span>),n/=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> last=<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=Num.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=Num[i];</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=i==Num.<span class="built_in">size</span>()<span class="number">-1</span>;j&lt;x;++j)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">underAbs</span>(j-last)&gt;=<span class="number">2</span>) res+=dp[i+<span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">underAbs</span>(x-last)&gt;=<span class="number">2</span>) last=x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(!i) ++res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=Num.<span class="built_in">size</span>()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">            res+=dp[i+<span class="number">1</span>][j];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(l),<span class="built_in">underRead</span>(r);</span><br><span class="line">    <span class="built_in">underInit</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">underDp</span>(r)-<span class="built_in">underDp</span>(l<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">25 50</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="Loj-10166-数字游戏"><a href="#Loj-10166-数字游戏" class="headerlink" title="Loj #10166 数字游戏"></a><a href="https://loj.ac/p/10166">Loj #10166 数字游戏</a></h3><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><p>与上一题差不了多少。预处理 $dp_{i,j,k}$ 表示 $i$ 位最高位为 $j$ 且模 $k$ 的计数即可。</p><h4 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC Code"></a>AC Code</h4><p>同样是迭代式写法。</p><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">21</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXMOD=<span class="number">101</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l,r,mod;</span><br><span class="line">ll dp[MAXN][<span class="number">10</span>][MAXMOD];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underMod</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i) dp[<span class="number">1</span>][i][i%mod]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;MAXN;++i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">9</span>;++k)</span><br><span class="line">                <span class="keyword">for</span>(re <span class="type">int</span> l=<span class="number">0</span>;l&lt;mod;++l)</span><br><span class="line">                    dp[i][j][l]+=dp[i<span class="number">-1</span>][k][<span class="built_in">underMod</span>(l-j)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">underDp</span><span class="params">(<span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!N) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;Num;</span><br><span class="line">    <span class="keyword">while</span>(N) Num.<span class="built_in">push_back</span>(N%<span class="number">10</span>),N/=<span class="number">10</span>;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> last=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=Num.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=Num[i];</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;x;++j) res+=dp[i+<span class="number">1</span>][j][<span class="built_in">underMod</span>(-last)];</span><br><span class="line">        last=<span class="built_in">underMod</span>(last+x);</span><br><span class="line">        <span class="keyword">if</span>(!i&amp;&amp;!last) ++res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;l&gt;&gt;r&gt;&gt;mod)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underInit</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">underDp</span>(r)-<span class="built_in">underDp</span>(l<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 19 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="Luogu-P6669-组合数问题"><a href="#Luogu-P6669-组合数问题" class="headerlink" title="Luogu P6669 组合数问题"></a><a href="https://www.luogu.com.cn/problem/P6669">Luogu P6669 组合数问题</a></h3><h4 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h4><p>其实这道题用记忆化要好些一些，一个五维数组记录位数，$n$ 数是否达到上限， $m$ 数是否达到上限，$n$和 $m$ 是否相同过以及 $n$ 是否小于过 $m$ 的情况。这里需要很多组合数的前置知识（比如<strong>卢卡斯定理</strong>）以优化。这里不多解释，有兴趣可以在洛谷上看题解。</p><h4 id="AC-Code-2"><a href="#AC-Code-2" class="headerlink" title="AC Code"></a>AC Code</h4><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">61</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,dp[MAXN][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>],N[MAXN],M[MAXN],k;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="function">ll <span class="title">underDfs</span><span class="params">(<span class="type">int</span> x,<span class="type">bool</span> qn,<span class="type">bool</span> qm,<span class="type">bool</span> dif,<span class="type">bool</span> sml)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> sml;</span><br><span class="line">    ll &amp;res=dp[x][qn][qm][dif][sml];</span><br><span class="line">    <span class="keyword">if</span>(~res) <span class="keyword">return</span> res;</span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cntN=qn?k<span class="number">-1</span>:N[x],cntM=qm?k<span class="number">-1</span>:M[x];</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=cntN;++i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;(j&lt;=i||dif)&amp;&amp;j&lt;=cntM;++j)</span><br><span class="line">            res=(res+<span class="built_in">underDfs</span>(x<span class="number">-1</span>,qn|(i&lt;cntN),qm|(j&lt;cntM),dif|(i!=j),sml|(i&lt;j)))%MOD;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(T),<span class="built_in">underRead</span>(k);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(n),<span class="built_in">underRead</span>(m);</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">        ll Max=<span class="built_in">underMax</span>(n,m),size=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(Max) Max/=k,++size;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=size;++i) N[i]=n%k,n/=k;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=size;++i) M[i]=m%k,m/=k;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">underDfs</span>(size,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 优化 </tag>
            
            <tag> 数位dp </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> Lucas定理 </tag>
            
            <tag> 二项式定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI-Online 2022 提高组</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/noionline-senior-2022/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/noionline-senior-2022/</url>
      
        <content type="html"><![CDATA[<p>被单调队列了。</p><span id="more"></span><h2 id="T1-P8251-丹钓战"><a href="#T1-P8251-丹钓战" class="headerlink" title="T1 P8251 丹钓战"></a><a href="https://www.luogu.com.cn/problem/P8251">T1 P8251 丹钓战</a></h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>单调栈预处理出一个 $c$ 数组以记录每一个数对答案的贡献。然后将题意转化为求 $[l,r]$ 中小于 $l$ 的个数，每个元素对答案的贡献当且仅当其下的元素不在 $[l,r]$ 之间。用主席树维护即可。</p><p>官方时间复杂度 $O((n+q) \log n)$</p><p><del>考场没打出来，暴力30pt</del></p><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,T,Rt[MAXN],Idx,Ql,Qr;</span><br><span class="line"><span class="type">int</span> a[MAXN],b[MAXN],c[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PST</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,dat;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[x].dat=Tree[Tree[x].l].dat+Tree[Tree[x].r].dat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underBuild</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=++Idx;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">underBuild</span>(Tree[x].l,l,mid),<span class="built_in">underBuild</span>(Tree[x].r,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[++Idx]=Tree[x];</span><br><span class="line">    ++Tree[Idx].dat,x=Idx;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=mid) <span class="built_in">underModify</span>(Tree[x].l,l,mid,d);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">underModify</span>(Tree[x].r,mid+<span class="number">1</span>,r,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQuery</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==mid) <span class="keyword">return</span> Tree[Tree[x].l].dat;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;mid) <span class="keyword">return</span> <span class="built_in">underQuery</span>(Tree[x].l,l,mid,k);</span><br><span class="line">    <span class="keyword">return</span> Tree[Tree[x].l].dat+<span class="built_in">underQuery</span>(Tree[x].r,mid+<span class="number">1</span>,r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;stack.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;stack.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">underRead</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">underRead</span>(b[i]);</span><br><span class="line">    a[<span class="number">0</span>]=c[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    b[<span class="number">0</span>]=INF;</span><br><span class="line">    <span class="built_in">underBuild</span>(Rt[<span class="number">0</span>],<span class="number">0</span>,N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=T,mid;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(b[i]&lt;b[c[mid]]) l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(a[c[l]]==a[i]) --l;</span><br><span class="line">        T=l+<span class="number">1</span>;</span><br><span class="line">        c[T]=i;</span><br><span class="line">        Rt[i]=Rt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">underModify</span>(Rt[i],<span class="number">0</span>,N,c[l]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(Ql),<span class="built_in">underRead</span>(Qr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underQuery</span>(Rt[Qr],<span class="number">0</span>,N,Ql<span class="number">-1</span>)-<span class="built_in">underQuery</span>(Rt[Ql<span class="number">-1</span>],<span class="number">0</span>,N,Ql<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 4</span></span><br><span class="line"><span class="comment">3 1 3 1 2 3 3 2 1 1</span></span><br><span class="line"><span class="comment">10 10 2 9 7 5 4 7 6 1</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">7 8</span></span><br><span class="line"><span class="comment">7 10</span></span><br><span class="line"><span class="comment">1 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h2 id="T2-P8252-讨论"><a href="#T2-P8252-讨论" class="headerlink" title="T2 P8252 讨论"></a><a href="https://www.luogu.com.cn/problem/P8252">T2 P8252 讨论</a></h2><h2 id="T3-P8253-如何正确地排序"><a href="#T3-P8253-如何正确地排序" class="headerlink" title="T3 P8253 如何正确地排序"></a><a href="https://www.luogu.com.cn/problem/P8253">T3 P8253 如何正确地排序</a></h2>]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMQ </tag>
            
            <tag> 数论 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 分治 </tag>
            
            <tag> 单调栈 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
            <tag> 容斥原理 </tag>
            
            <tag> 三维偏序 </tag>
            
            <tag> CDQ分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构2022.03.20练习</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220320/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220320/</url>
      
        <content type="html"><![CDATA[<p>结果：C Accepted</p><p>改题进度：BC Accepted</p><span id="more"></span><h2 id="Task-One——Tree"><a href="#Task-One——Tree" class="headerlink" title="Task One——Tree"></a>Task One——Tree</h2><p>始终不得求解</p><h2 id="Task-Two——普通计算姬-common"><a href="#Task-Two——普通计算姬-common" class="headerlink" title="Task Two——普通计算姬(common)"></a>Task Two——普通计算姬(common)</h2><p><a href="https://hydro.ac/d/bzoj/p/4765">题目链接</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>求出该树的 $dfs$ 序。对于每一次询问，用树状数组或者线段树维护即可。对于修改，部分分做法即是对树状数组进行暴力修改。然而这样只能得 $90pt$ 。然后将整个 $dfs$ 序的序列进行分块，记录每一个点对每一个序列的贡献，修改序列和即可。最后一个点会爆 $long \ long$ ，需要开 $ull$ </p><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,u,v,op,Qf,Qs,Rt,Idx,Blo;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total,cnt[MAXN],pos[MAXN],r[MAXN][<span class="number">401</span>];</span><br><span class="line">ull Val[MAXN],Tre[MAXN],sum[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">&#125;Seg[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAddEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[v],u&#125;;Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underDfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Seg[x].l=++Idx;++cnt[pos[x]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Blo;++i) r[x][i]=cnt[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x];e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v!=last) <span class="built_in">underDfs</span>(v,x);</span><br><span class="line">    &#125;</span><br><span class="line">    Seg[x].r=Idx;--cnt[pos[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underLowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAdd</span><span class="params">(<span class="type">int</span> x,ull val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=N;x+=<span class="built_in">underLowbit</span>(x)) Tre[x]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">underQuery</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ull ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x&gt;=<span class="number">1</span>;x-=<span class="built_in">underLowbit</span>(x)) ans+=Tre[x];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">underCalc</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">underQuery</span>(r)-<span class="built_in">underQuery</span>(l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInitBlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> block=<span class="built_in">sqrt</span>(N);</span><br><span class="line">    Blo=(N%block)?(N/block+<span class="number">1</span>):(N/block);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) pos[i]=(i<span class="number">-1</span>)/Blo+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underUpdate</span><span class="params">(<span class="type">int</span> x,ull k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Blo;++i) sum[i]+=(ull)r[x][i]*k;</span><br><span class="line">    <span class="built_in">underAdd</span>(Seg[x].l,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">underAns</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ull res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos[r]-pos[l]&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) res+=<span class="built_in">underCalc</span>(Seg[i].l,Seg[i].r);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=pos[l]*Blo;++i) res+=<span class="built_in">underCalc</span>(Seg[i].l,Seg[i].r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=pos[l]+<span class="number">1</span>;i&lt;=pos[r]<span class="number">-1</span>;++i) res+=sum[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=(pos[r]<span class="number">-1</span>)*Blo+<span class="number">1</span>;i&lt;=r;++i) res+=<span class="built_in">underCalc</span>(Seg[i].l,Seg[i].r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;common.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;common.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="built_in">underInitBlock</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">underRead</span>(Val[i]);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(u),<span class="built_in">underRead</span>(v);</span><br><span class="line">        <span class="keyword">if</span>(!u) Rt=v;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!u) Rt=u;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">underAddEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underDfs</span>(Rt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">underUpdate</span>(i,Val[i]);</span><br><span class="line">    <span class="keyword">while</span>(M--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(op),<span class="built_in">underRead</span>(Qf),<span class="built_in">underRead</span>(Qs);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">underUpdate</span>(Qf,Qs-Val[Qf]);</span><br><span class="line">            Val[Qf]=Qs;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>,<span class="built_in">underAns</span>(Qf,Qs));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 4</span></span><br><span class="line"><span class="comment">0 0 3 4 0 1</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">2 1 2</span></span><br><span class="line"><span class="comment">1 1 1</span></span><br><span class="line"><span class="comment">2 3 6</span></span><br><span class="line"><span class="comment">2 3 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h2 id="Task-Three——文艺计算姬-art"><a href="#Task-Three——文艺计算姬-art" class="headerlink" title="Task Three——文艺计算姬(art)"></a>Task Three——文艺计算姬(art)</h2><p><a href="https://hydro.ac/d/bzoj/p/4766">题目链接</a></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>暴力取一些比较小的点，然后推公式。毕竟 $1 \leq n,m \leq 10^{18}$ 。</p><p>然后推得公式为 $ans=n^{m-1}m^{n-1}$ 。然后用快速幂即可。注意 $1e18*1e18$ 会爆 $long\ long$ 。所以需要快速乘。</p><h3 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll N,M,P,tot,ans;</span><br><span class="line"><span class="type">int</span> fa[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+m;++i) fa[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underFind</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">underFind</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underD</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> edge)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(edge==n+m<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++ans;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=n+<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">underFind</span>(i)!=<span class="built_in">underFind</span>(j))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> p1=<span class="built_in">underFind</span>(i),p2=<span class="built_in">underFind</span>(j);</span><br><span class="line">                fa[p1]=p2;</span><br><span class="line">                <span class="built_in">underD</span>(n,m,edge+<span class="number">1</span>);</span><br><span class="line">                fa[p1]=p1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">underSmi</span><span class="params">(ll a,ll b,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(res+a)%p;</span><br><span class="line">        a=(a+a)%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// printf(&quot;%lld %lld %lld\n&quot;,a,b,res);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">underQmi</span><span class="params">(ll a,ll b,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=<span class="built_in">underSmi</span>(res,a,p)%p;</span><br><span class="line">        a=<span class="built_in">underSmi</span>(a,a,p)%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;art.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;art.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M),<span class="built_in">underRead</span>(P);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">underSmi</span>(<span class="built_in">underQmi</span>(N,M<span class="number">-1</span>,P),<span class="built_in">underQmi</span>(M,N<span class="number">-1</span>,P),P));</span><br><span class="line">    <span class="comment">// printf(&quot;%lld %lld\n&quot;,N,M);</span></span><br><span class="line">    <span class="comment">/*for(re int i=1;i&lt;=N;++i)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for(re int j=1;j&lt;=M;++j)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            underInit(i,j);</span></span><br><span class="line"><span class="comment">            underD(i,j,0);</span></span><br><span class="line"><span class="comment">            printf(&quot;%d,%d=%lld\n&quot;,i,j,ans);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1,1=1</span></span><br><span class="line"><span class="comment">1,2=1</span></span><br><span class="line"><span class="comment">2,2=4</span></span><br><span class="line"><span class="comment">2,3=12</span></span><br><span class="line"><span class="comment">2,4=32</span></span><br><span class="line"><span class="comment">3,1=1</span></span><br><span class="line"><span class="comment">3,2=12</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">f(n,m)=n^(m-1)*m^(n-1)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> RMQ </tag>
            
            <tag> 数论 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 块状链表，块状数组，分块 </tag>
            
            <tag> Dfs序 </tag>
            
            <tag> Prufer序 </tag>
            
            <tag> Matrix-Tree定理 </tag>
            
            <tag> LCA </tag>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3850书架</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p3850/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p3850/</url>
      
        <content type="html"><![CDATA[<p>“STL的妙用”</p><span id="more"></span><p>使用 $rope$ 轻松解决。</p><p><a href="https://violeteternal.github.io/Eternity/%E9%A2%98%E8%A7%A3/p4008">rope的使用</a></p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/rope&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,x;</span><br><span class="line">string t[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">rope&lt;<span class="type">int</span>&gt;R;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;rope.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;rope.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;t[R.<span class="built_in">size</span>()];</span><br><span class="line">        R.<span class="built_in">push_back</span>(R.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underRead</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;t[R.<span class="built_in">size</span>()];</span><br><span class="line">        <span class="built_in">underRead</span>(x);</span><br><span class="line">        R.<span class="built_in">insert</span>(x,R.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underRead</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(x);</span><br><span class="line">        cout&lt;&lt;t[R[x]]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
            <tag> STL </tag>
            
            <tag> rope </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dcoj2008 蜜雪冰城</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/dcoj2008/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/dcoj2008/</url>
      
        <content type="html"><![CDATA[<p>区间dp经典题</p><span id="more"></span><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定 $m$ 个三元组 $\{a_i,b_i,c_i\}$ ，表示第 $i$ 个人会选择区间 $[a_i,b_i]$ 中最便宜的值 $val_k$ 如果 $c_i \leq val_k$ 。设计一个长度为 $n$ 的数列 $val_i$ 使收益最大。</p><p>输出最大收益以及一种方案，含 $spj$ 。</p><p>样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#1 in:</span><br><span class="line">7 5</span><br><span class="line">1 4 7</span><br><span class="line">3 7 13</span><br><span class="line">5 6 20</span><br><span class="line">6 7 1</span><br><span class="line">1 2 5</span><br><span class="line"></span><br><span class="line">#1 out:</span><br><span class="line">43</span><br><span class="line">5 5 13 13 20 20 13</span><br><span class="line"></span><br><span class="line">#2 in:</span><br><span class="line">10 10</span><br><span class="line">1 7 3141</span><br><span class="line">2 8 5926</span><br><span class="line">3 5 5358</span><br><span class="line">1 9 9793</span><br><span class="line">5 10 2384</span><br><span class="line">4 7 6264</span><br><span class="line">5 9 3383</span><br><span class="line">9 10 27950</span><br><span class="line">3 8 2884</span><br><span class="line">1 7 1971</span><br><span class="line"></span><br><span class="line">#2 out:</span><br><span class="line">55021</span><br><span class="line">1971 2384 5358 6264 6264 6264 6264 2384 27950 27950</span><br></pre></td></tr></table></figure><p>数据范围：</p><p>$n \leq 50,m \leq 4000,1 \leq a_i \leq b_i \leq n,1 \leq c_i \leq 500000$</p><p>$subtask1:n=1$</p><p>$subtask2:n,m$</p><p>$subtask3:$无特殊限制</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先，我们必须明白：$val_k \in T,T=\{c_1,c_2…c_m\},k \in [1,n]$ 。这需要一些简单的证明，这里不多赘述。</p><h3 id="部分分"><a href="#部分分" class="headerlink" title="部分分"></a>部分分</h3><p>对于 $subtask1$ 而言，暴力枚举每一个价格，求出最大收益。期望得分： $30pt$</p><p>对于 $suntask2$ 而言，用 $O(2^m)$ 的时间暴力枚举每一个人是否会贡献答案。用线段树维护区间值，求出最大收益。时间复杂度 $O(2^m(n+m)\log n)$ ，期望得分： $60pt$ 。</p><p><del>这题确实良心</del></p><h3 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h3><p>首先离散化出有多少个不同的 $c_i$ ，用 $M$ 表示离散化之后的个数。我们设 $val_k$ 是区间 $[l,r]$ 之间的最小值。$(l \leq k \leq r)$ ，则对于任何一个 $l \leq a_i \leq b_i \leq r$  的人而言，他的答案贡献必定是 $val_k$ 。那么我们用 $dp_{l,r,v}$ 表示区间 $[l,r]$ 内最小值为 $v$ 已得到的最优解。$cnt_k$ 表示有多少个人对该点的答案有贡献。则转移方程为：</p><p>$dp_{l,r,v}=\max\{dp_{l,r,v},dp_{l,k-1,v_1}+dp_{k+1,r,v_2}+cnt_k*v\}(v \leq v_1,v_2 \leq c_M)$</p><p>也许你会直呼：<del>就这？</del></p><p>怎么可能！你算算复杂度：区间枚举 $O(n^3)$ 枚举价值 $O(m^3)$ 。加起来 $O(n^3m^3)$ 。过得了个寄！你说用四边形不等式优化到 $O(n^2m^3)$ ？开玩笑！？还不是过不了，何况这道题不能用四边形不等式优化。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>不能从 $n$ 入手，就优化 $m$ 。用一个数组 $g_{l,r,v}$ 预处理出 $\max\{dp_{l,r,v_1}\},v \leq v_1 \leq c_M$ 。直接优化成 $O(n^3m)$ 那过这道题就是氢氢忪忪了。</p><h3 id="输出方案"><a href="#输出方案" class="headerlink" title="输出方案"></a>输出方案</h3><p>记录每一种 $[l,r]$ 是从哪一个 $k$ 转移过来的即可。</p><h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">51</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">4001</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,a[MAXM],b[MAXM],c[MAXM],cnt[MAXM],ans;</span><br><span class="line"><span class="type">int</span> dp[MAXN][MAXN][MAXM],g[MAXN][MAXN][MAXM];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;V;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="built_in">sizeof</span>(cnt));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=a[i]&amp;&amp;b[i]&lt;=r&amp;&amp;a[i]&lt;=k&amp;&amp;k&lt;=b[i]) ++cnt[c[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num[MAXN][MAXN][MAXM],renum[MAXN][MAXN][MAXM];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPrint</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id=num[l][r][k];</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=id<span class="number">-1</span>) <span class="built_in">underPrint</span>(l,num[l][r][k]<span class="number">-1</span>,renum[l][id<span class="number">-1</span>][k]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,V[k<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(id+<span class="number">1</span>&lt;=r) <span class="built_in">underPrint</span>(id+<span class="number">1</span>,r,renum[id+<span class="number">1</span>][r][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;section-dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;section-dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(a[i]),<span class="built_in">underRead</span>(b[i]),<span class="built_in">underRead</span>(c[i]);</span><br><span class="line">        V.<span class="built_in">push_back</span>(c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>());</span><br><span class="line">    V.<span class="built_in">erase</span>(<span class="built_in">unique</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>()),V.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) c[i]=<span class="built_in">lower_bound</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>(),c[i])-V.<span class="built_in">begin</span>()+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=N;l&gt;=<span class="number">1</span>;--l)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r=l;r&lt;=N;++r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=l,sum;k&lt;=r;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">underInit</span>(l,r,k);</span><br><span class="line">                sum=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=V.<span class="built_in">size</span>();i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum+=cnt[i];</span><br><span class="line">                    ans=sum*V[i<span class="number">-1</span>]+g[l][k<span class="number">-1</span>][i]+g[k+<span class="number">1</span>][r][i];</span><br><span class="line">                    <span class="keyword">if</span>(ans&gt;dp[l][r][i]||!dp[l][r][i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[l][r][i]=ans;</span><br><span class="line">                        num[l][r][i]=k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=V.<span class="built_in">size</span>();k&gt;=<span class="number">1</span>;--k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[l][r][k]&gt;g[l][r][k+<span class="number">1</span>]||!g[l][r][k+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    g[l][r][k]=dp[l][r][k];</span><br><span class="line">                    renum[l][r][k]=k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    g[l][r][k]=g[l][r][k+<span class="number">1</span>];</span><br><span class="line">                    renum[l][r][k]=renum[l][r][k+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,g[<span class="number">1</span>][N][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">underPrint</span>(<span class="number">1</span>,N,renum[<span class="number">1</span>][N][<span class="number">1</span>]);</span><br><span class="line">    cerr&lt;&lt;endl&lt;&lt;<span class="string">&quot;time:&quot;</span>&lt;&lt;<span class="built_in">clock</span>()&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 5</span></span><br><span class="line"><span class="comment">1 4 7</span></span><br><span class="line"><span class="comment">3 7 13</span></span><br><span class="line"><span class="comment">5 6 20</span></span><br><span class="line"><span class="comment">6 7 1</span></span><br><span class="line"><span class="comment">1 2 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 区间dp </tag>
            
            <tag> 离散化 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间dp</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-of-section/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-of-section/</url>
      
        <content type="html"><![CDATA[<p>“随着方程推进，登峰造极。”</p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在区间上进行动态规划，从而求解一段区间上的最优解。通过合并小区间递推出大区间的 $dp$ 算法。</p><h2 id="思路-实现"><a href="#思路-实现" class="headerlink" title="思路/实现"></a>思路/实现</h2><p><strong>合并</strong>：即将两个或多个部分进行整合，当然也可以反过来；</p><p><strong>特征</strong>：能将问题分解为能两两合并的形式；</p><p><strong>求解</strong>：对整个问题设最优值，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值。</p><p>一般来说，其转移方程都与：</p><p>$dp_{i,j}=\max\{dp_{i,j},dp_{i,k}+dp_{k,j}+cost_k\},k \in [l,r]$</p><p>类似。注意，此处的 $\max$ 并不一定指数值上的较大值。</p><p>一般来说，能够达到 $O(n^3)$ 复杂度的题都要考虑区间 $dp$ 。对于小部分题而言，能够用<strong>四边形不等式</strong>优化到 $O(n^2)$ 。</p><h3 id="区间dp的三种写法"><a href="#区间dp的三种写法" class="headerlink" title="区间dp的三种写法"></a>区间dp的三种写法</h3><p>都可以证明出是从小区间到大区间。</p><p>$len$ 表示区间长度，$l$ 表示左端点， $r$ 表示右端点。$k$ 为枚举点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">1</span>;len&lt;=n;++len)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=n-len+<span class="number">1</span>;++l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> r=l+len<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;=r;++k)</span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=n;l&gt;=<span class="number">1</span>;--l)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> r=l;r&lt;=n;++r)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;=r;++k)</span><br><span class="line">            <span class="comment">//do something</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> r=<span class="number">1</span>;r&lt;=n;++r)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=r;l&gt;=<span class="number">1</span>;--l)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;=r;++k)</span><br><span class="line">            <span class="comment">//do something</span></span><br></pre></td></tr></table></figure><p>没什么太大区别，看自己习惯。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="Luogu-P1880-NOI1995-石子合并"><a href="#Luogu-P1880-NOI1995-石子合并" class="headerlink" title="Luogu P1880 [NOI1995] 石子合并"></a><a href="https://www.luogu.com.cn/problem/P1880">Luogu P1880 [NOI1995] 石子合并</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定 $n$ 个数，每次操作将相邻两堆合并。得分为两个数字的和。求最大得分和最小的分。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><strong>暴力</strong>：</p><p>暴力合并，时间复杂度 $O(n!)$</p><p><strong>区间dp</strong>：</p><p>对于每一个状态 $dp_{i,j}$ 都可由 $dp_{i,k}$ 与 $dp_{k+1,j}$ 转移而来。</p><p>$dp_{i,j}=\max\{dp_{i,j},dp_{i,k}+dp_{k+1,j}\},k \in [i,j]$</p><p>具体过程还需读者自行思考。</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">int</span> n,Stone[<span class="number">201</span>];</span><br><span class="line"><span class="type">int</span> StonePrime[<span class="number">201</span>];</span><br><span class="line"><span class="type">int</span> F[<span class="number">201</span>][<span class="number">201</span>],MaxG;</span><br><span class="line"><span class="type">int</span> G[<span class="number">201</span>][<span class="number">201</span>],MinF=<span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b?b:a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">F[i][i]=<span class="number">0</span>;</span><br><span class="line">G[i][i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">StonePrime[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Stone[i]);</span><br><span class="line">Stone[i+n]=Stone[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i)</span><br><span class="line">&#123;</span><br><span class="line">StonePrime[i]=Stone[i]+StonePrime[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">1</span>;p&lt;n;++p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=p+i;(i&lt;n*<span class="number">2</span>)&amp;&amp;(j&lt;<span class="number">2</span>*n);++i,j=p+i)</span><br><span class="line">&#123;</span><br><span class="line">F[i][j]=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;j;++k)</span><br><span class="line">&#123;</span><br><span class="line">F[i][j]=<span class="built_in">Min</span>(F[i][j],F[i][k]+F[k+<span class="number">1</span>][j]+StonePrime[j]-StonePrime[i<span class="number">-1</span>]);</span><br><span class="line">G[i][j]=<span class="built_in">Max</span>(G[i][j],G[i][k]+G[k+<span class="number">1</span>][j]+StonePrime[j]-StonePrime[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">MinF=<span class="built_in">Min</span>(MinF,F[i][i+n<span class="number">-1</span>]);</span><br><span class="line">MaxG=<span class="built_in">Max</span>(MaxG,G[i][i+n<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>,MinF,MaxG);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">4 5 9 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="Luogu-P1063-NOIP2006-提高组-能量项链"><a href="#Luogu-P1063-NOIP2006-提高组-能量项链" class="headerlink" title="Luogu P1063 [NOIP2006 提高组] 能量项链"></a><a href="https://www.luogu.com.cn/problem/P1063">Luogu P1063 [NOIP2006 提高组] 能量项链</a></h3><h4 id="转移方程"><a href="#转移方程" class="headerlink" title="转移方程"></a>转移方程</h4><p>$dp_{l,r}=\max\{dp_{l,r},dp{l,k}+dp{k,r}+val_l<em>val_k</em>val_r\},k \in [l,r]$</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">int</span> n,Power[<span class="number">201</span>];</span><br><span class="line"><span class="type">int</span> G[<span class="number">201</span>][<span class="number">201</span>],MaxG;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b?b:a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Power[i]);</span><br><span class="line">Power[i+n]=Power[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n*<span class="number">2</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>;i-j&lt;n&amp;&amp;j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=j;k&lt;i;++k)</span><br><span class="line">&#123;</span><br><span class="line">G[j][i]=<span class="built_in">Max</span>(G[j][i],G[k+<span class="number">1</span>][i]+G[j][k]+Power[j]*Power[k+<span class="number">1</span>]*Power[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">MaxG=<span class="built_in">Max</span>(MaxG,G[j][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,MaxG);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">2 3 5 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="其他题目"><a href="#其他题目" class="headerlink" title="其他题目"></a>其他题目</h3><p><a href="https://violeteternal.github.io/Eternity/题解/dcoj2008">DCOJ#.2008蜜雪冰城</a></p><p><a href="">LuoguP1436棋盘分割</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 区间dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4008 [NOI2003]文本编辑器</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p4008/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p4008/</url>
      
        <content type="html"><![CDATA[<p>我愿称之为最强 $STL$ ！！！</p><span id="more"></span><script src="/js/mathjax.js"></script><h3 id="Rope"><a href="#Rope" class="headerlink" title="Rope"></a>Rope</h3><p>学习了一种超级强大的 $STL$ ，甚至于很多竞赛禁止使用。</p><blockquote><p>$rope$</p></blockquote><p>非标准 $STL$ ，仅能在 $C++11$ 以后使用。</p><p>需要头文件 <code>#include&lt;ext/rope&gt;</code></p><p>并需要 <code>using namespace __gnu_cxx;</code></p><p>定义为 <code>rope&lt;变量类型&gt;变量名</code> 或 <code>crope 变量名称</code></p><p><code>crope R</code> 其实就是 <code>rope&lt;char&gt;R</code></p><p>结合了<strong>链表</strong>和<strong>数组</strong>各自优点的块状链表。内部结构<strong>可持久化平衡树</strong>套<strong>红黑树</strong>。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><code>push_back(x)</code> : 在末尾添加 $x$  ( $x$ 是 <code>char</code> 类型的)。</p><p><code>insert(pos,x)</code>:在 $pos$ 插入 $x$  ( $x$ 是字符串, $x$ 后面加个 $int$ 参数可以只能 $x$ 中插入几个)。</p><p><code>erase(pos,x)</code>: 从 $pos$ 开始删除 $x$ 个。</p><p><code>replace(pos,x)</code>: 从 $pos$ 开始换成 $x$ ( $x$ 是字符串, $x$ 后面加个 $int$ 参数可以只能 $x$ 中的前几个)。</p><p><code>substr(pos,x)</code>提取 $pos$ 开始 $x$ 个。</p><p><code>copy(pos,len,x)</code>:从 $pos$ 到 $pos+len$ 替换成 $x$ 。</p><p>访问：同数组，用<code>R[x]</code>即可。大部分操作都是 $O(\log n)$ 的复杂度。</p><h2 id="该题"><a href="#该题" class="headerlink" title="该题"></a>该题</h2><p>当用上 $rope$ 后，可持久的紫题没有丝毫威严。</p><p>吸氧过：</p><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/rope&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,pos;</span><br><span class="line">string Str;</span><br><span class="line">rope&lt;<span class="type">char</span>&gt;R;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;rope.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;rope.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;Str;</span><br><span class="line">        <span class="keyword">if</span>(Str[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k;</span><br><span class="line">            <span class="built_in">underRead</span>(k);</span><br><span class="line">            pos=k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Str[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="built_in">underRead</span>(n);</span><br><span class="line">            <span class="type">char</span> ch;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                ch=<span class="built_in">gh</span>();</span><br><span class="line">                <span class="keyword">if</span>(ch&lt;<span class="number">32</span>||ch&gt;<span class="number">126</span>) --i;</span><br><span class="line">                <span class="keyword">else</span> R.<span class="built_in">insert</span>(pos+i,ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Str[<span class="number">0</span>]==<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="built_in">underRead</span>(n);</span><br><span class="line">            R.<span class="built_in">erase</span>(pos,n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Str[<span class="number">0</span>]==<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="built_in">underRead</span>(n);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) cout&lt;&lt;R[pos+i];</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Str[<span class="number">0</span>]==<span class="string">&#x27;P&#x27;</span>) --pos;</span><br><span class="line">        <span class="keyword">else</span> ++pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">Insert 26</span></span><br><span class="line"><span class="comment">abcdefghijklmnop</span></span><br><span class="line"><span class="comment">qrstuv wxy</span></span><br><span class="line"><span class="comment">Move 15</span></span><br><span class="line"><span class="comment">Delete 11</span></span><br><span class="line"><span class="comment">Move 5</span></span><br><span class="line"><span class="comment">Insert 1</span></span><br><span class="line"><span class="comment">^</span></span><br><span class="line"><span class="comment">Next</span></span><br><span class="line"><span class="comment">Insert 1</span></span><br><span class="line"><span class="comment">_</span></span><br><span class="line"><span class="comment">Next</span></span><br><span class="line"><span class="comment">Next</span></span><br><span class="line"><span class="comment">Insert 4</span></span><br><span class="line"><span class="comment">.\/.</span></span><br><span class="line"><span class="comment">Get 4</span></span><br><span class="line"><span class="comment">Prev</span></span><br><span class="line"><span class="comment">Insert 1</span></span><br><span class="line"><span class="comment">^</span></span><br><span class="line"><span class="comment">Move 0</span></span><br><span class="line"><span class="comment">Get 22</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">Insert 5 opres</span></span><br><span class="line"><span class="comment">Get 3</span></span><br><span class="line"><span class="comment">Next</span></span><br><span class="line"><span class="comment">Next</span></span><br><span class="line"><span class="comment">Get 3</span></span><br><span class="line"><span class="comment">Insert 10 undertales</span></span><br><span class="line"><span class="comment">Move 6</span></span><br><span class="line"><span class="comment">Get 10</span></span><br><span class="line"><span class="comment">Delete 1</span></span><br><span class="line"><span class="comment">Get 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> 块状链表，块状数组，分块 </tag>
            
            <tag> STL </tag>
            
            <tag> 递归 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
            <tag> rope </tag>
            
            <tag> 可持久化平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1503 鬼子进村</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p1503/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p1503/</url>
      
        <content type="html"><![CDATA[<p>$Splay$</p><span id="more"></span><p>求前驱后继。</p><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Idx,Vis[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Splay</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> chi[<span class="number">2</span>],fa;</span><br><span class="line">    <span class="type">int</span> size,val;</span><br><span class="line">&#125;Tree[MAXN];</span><br><span class="line"><span class="type">int</span> Root,Qx;</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[x].size=Tree[Tree[x].chi[<span class="number">0</span>]].size+Tree[Tree[x].chi[<span class="number">1</span>]].size+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">    <span class="type">int</span> k=Tree[y].chi[<span class="number">1</span>]==x;</span><br><span class="line">    Tree[z].chi[Tree[z].chi[<span class="number">1</span>]==y]=x;</span><br><span class="line">    Tree[x].fa=z;</span><br><span class="line">    Tree[y].chi[k]=Tree[x].chi[k^<span class="number">1</span>];</span><br><span class="line">    Tree[Tree[x].chi[k^<span class="number">1</span>]].fa=y;</span><br><span class="line">    Tree[x].chi[k^<span class="number">1</span>]=y;</span><br><span class="line">    Tree[y].fa=x;</span><br><span class="line">    <span class="built_in">underPushUp</span>(y);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Tree[x].fa!=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">        <span class="keyword">if</span>(z!=k)</span><br><span class="line">            <span class="keyword">if</span>((Tree[y].chi[<span class="number">1</span>]==x)^(Tree[z].chi[<span class="number">1</span>]==y))</span><br><span class="line">                <span class="built_in">underRotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">underRotate</span>(y);</span><br><span class="line">        <span class="built_in">underRotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!k) Root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInsert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,p;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        p=u;</span><br><span class="line">        u=Tree[u].chi[x&gt;Tree[u].val];</span><br><span class="line">    &#125;</span><br><span class="line">    u=++Idx;</span><br><span class="line">    <span class="keyword">if</span>(p) Tree[p].chi[x&gt;Tree[p].val]=u;</span><br><span class="line">    Tree[u].val=x;</span><br><span class="line">    Tree[u].size=<span class="number">1</span>;</span><br><span class="line">    Tree[u].fa=p;</span><br><span class="line">    <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Root=++Idx;</span><br><span class="line">    Tree[Root].fa=<span class="number">0</span>;</span><br><span class="line">    Tree[Root].val=<span class="number">0</span>;</span><br><span class="line">    Tree[Root].size=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">underInsert</span>(N+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetPre</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].val&lt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetNxt</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].val&gt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underErase</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">underGetPre</span>(x),r=<span class="built_in">underGetNxt</span>(x);</span><br><span class="line">    <span class="built_in">Splay</span>(l,<span class="number">0</span>),<span class="built_in">Splay</span>(r,l);</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].size=<span class="number">0</span>;</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].fa=<span class="number">0</span>;</span><br><span class="line">    Tree[r].chi[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Splay</span>(r,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> top,S[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;splay.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;splay.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="built_in">underInit</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">underRead</span>(Qx);</span><br><span class="line">            <span class="built_in">underInsert</span>(Qx);</span><br><span class="line">            S[++top]=Qx;</span><br><span class="line">            Vis[Qx]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Vis[S[top]]=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">underErase</span>(S[top--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">underRead</span>(Qx);</span><br><span class="line">            <span class="keyword">if</span>(Vis[Qx]) <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Tree[<span class="built_in">underGetNxt</span>(Qx)].val-Tree[<span class="built_in">underGetPre</span>(Qx)].val<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 9</span></span><br><span class="line"><span class="comment">D 3</span></span><br><span class="line"><span class="comment">D 6</span></span><br><span class="line"><span class="comment">D 5</span></span><br><span class="line"><span class="comment">Q 4</span></span><br><span class="line"><span class="comment">Q 5</span></span><br><span class="line"><span class="comment">R</span></span><br><span class="line"><span class="comment">Q 4</span></span><br><span class="line"><span class="comment">R</span></span><br><span class="line"><span class="comment">Q 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
            <tag> Treap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2073 送花</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p2073/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p2073/</url>
      
        <content type="html"><![CDATA[<script src="/js/mathjax.js"></script><p>$STL\ yyds!$</p><span id="more"></span><p>敲了半天的 $Splay$ 无果后索性换 $stl$ ，没想到居然还跑进了最优解！？<del>顺便学了一下 $map$</del></p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">map&lt;ll,ll&gt;M;</span><br><span class="line">ll op,w,c;</span><br><span class="line">ll res,ans;</span><br><span class="line"><span class="comment">/*int M,Idx,op;</span></span><br><span class="line"><span class="comment">struct Val</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int w,c;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">struct Splay</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int chi[2],fa;</span></span><br><span class="line"><span class="comment">    int num,size;</span></span><br><span class="line"><span class="comment">    Val val;</span></span><br><span class="line"><span class="comment">&#125;Tree[MAXN];</span></span><br><span class="line"><span class="comment">int Root;</span></span><br><span class="line"><span class="comment">int Vis[MAXN],ans;</span></span><br><span class="line"><span class="comment">inline void underPushUp(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    Tree[x].size=Tree[Tree[x].chi[0]].size+Tree[Tree[x].chi[1]].size+Tree[x].num;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underRotate(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int y=Tree[x].fa,z=Tree[y].fa;</span></span><br><span class="line"><span class="comment">    int k=Tree[y].chi[1]==x;</span></span><br><span class="line"><span class="comment">    Tree[z].chi[Tree[z].chi[1]==y]=x;</span></span><br><span class="line"><span class="comment">    Tree[x].fa=z;</span></span><br><span class="line"><span class="comment">    Tree[y].chi[k]=Tree[x].chi[k^1];</span></span><br><span class="line"><span class="comment">    Tree[Tree[x].chi[k^1]].fa=y;</span></span><br><span class="line"><span class="comment">    Tree[x].chi[k^1]=y;</span></span><br><span class="line"><span class="comment">    Tree[y].fa=x;</span></span><br><span class="line"><span class="comment">    underPushUp(y);</span></span><br><span class="line"><span class="comment">    underPushUp(x);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void Splay(int x,int k)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    while(Tree[x].fa!=k)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int y=Tree[x].fa,z=Tree[y].fa;</span></span><br><span class="line"><span class="comment">        if(z!=k)</span></span><br><span class="line"><span class="comment">            if((Tree[y].chi[1]==x)^(Tree[z].chi[1]==y))</span></span><br><span class="line"><span class="comment">                underRotate(x);</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">                underRotate(y);</span></span><br><span class="line"><span class="comment">        underRotate(x);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(!k) Root=x;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">bool f;</span></span><br><span class="line"><span class="comment">inline void underInsert(Val x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int u=Root,p;</span></span><br><span class="line"><span class="comment">    while(u)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if(Tree[u].val.c==x.c)</span></span><br><span class="line"><span class="comment">        &#123;  </span></span><br><span class="line"><span class="comment">            f=1;</span></span><br><span class="line"><span class="comment">            return ;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        p=u;</span></span><br><span class="line"><span class="comment">        u=Tree[u].chi[x.c&gt;Tree[u].val.c];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    u=++Idx;</span></span><br><span class="line"><span class="comment">    if(p) Tree[p].chi[x.c&gt;Tree[p].val.c]=u;</span></span><br><span class="line"><span class="comment">    Tree[u].val.c=x.c;</span></span><br><span class="line"><span class="comment">    Tree[u].val.w=x.w;</span></span><br><span class="line"><span class="comment">    Tree[u].size=1;</span></span><br><span class="line"><span class="comment">    Tree[u].fa=p;</span></span><br><span class="line"><span class="comment">    Tree[u].num=1;</span></span><br><span class="line"><span class="comment">    Splay(u,0);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underInit()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    Root=++Idx;</span></span><br><span class="line"><span class="comment">    Tree[Root].fa=0;</span></span><br><span class="line"><span class="comment">    Tree[Root].num=1;</span></span><br><span class="line"><span class="comment">    Tree[Root].size=1;</span></span><br><span class="line"><span class="comment">    Tree[Root].val.c=INF;</span></span><br><span class="line"><span class="comment">    Val u;</span></span><br><span class="line"><span class="comment">    u.w=0,u.c=-INF;</span></span><br><span class="line"><span class="comment">    underInsert(u);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline int underGetPre(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int u=Root,res,v=Root;</span></span><br><span class="line"><span class="comment">    while(u)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        v=u;</span></span><br><span class="line"><span class="comment">        if(Tree[u].val.c&lt;x)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            res=u;</span></span><br><span class="line"><span class="comment">            u=Tree[u].chi[1];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else u=Tree[u].chi[0];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Splay(v,0);</span></span><br><span class="line"><span class="comment">    return res;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline int underGetNxt(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int u=Root,res,v=Root;</span></span><br><span class="line"><span class="comment">    while(u)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        v=u;</span></span><br><span class="line"><span class="comment">        if(Tree[u].val.c&gt;x)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            res=u;</span></span><br><span class="line"><span class="comment">            u=Tree[u].chi[0];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else u=Tree[u].chi[1];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Splay(v,0);</span></span><br><span class="line"><span class="comment">    return res;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underErase(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int l=underGetPre(x),r=underGetNxt(x);</span></span><br><span class="line"><span class="comment">    Splay(l,0),Splay(r,l);</span></span><br><span class="line"><span class="comment">    Tree[Tree[r].chi[0]].fa=0;</span></span><br><span class="line"><span class="comment">    Tree[r].chi[0]=0;</span></span><br><span class="line"><span class="comment">    Splay(r,0);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;splay.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;splay.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">/*underInit();*/</span></span><br><span class="line">    map&lt;ll,ll&gt;::iterator it;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">underRead</span>(w),<span class="built_in">underRead</span>(c);</span><br><span class="line">            <span class="comment">// if(M.count(c)) continue;</span></span><br><span class="line">            M.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(c,w));</span><br><span class="line">            <span class="comment">/*Val Q;</span></span><br><span class="line"><span class="comment">            scanf(&quot;%d%d&quot;,&amp;Q.w,&amp;Q.c);</span></span><br><span class="line"><span class="comment">            f=0;</span></span><br><span class="line"><span class="comment">            underInsert(Q);</span></span><br><span class="line"><span class="comment">            if(f) Vis[Q.c]=Q.w;</span></span><br><span class="line"><span class="comment">            ans+=Q.w;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>&amp;&amp;!M.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            it=M.<span class="built_in">begin</span>();</span><br><span class="line">            M.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="comment">/*int x=underGetPre(INF);</span></span><br><span class="line"><span class="comment">            if(!Vis[Tree[x].val.c]) continue;</span></span><br><span class="line"><span class="comment">            underErase(Tree[x].val.c);</span></span><br><span class="line"><span class="comment">            ans-=Vis[Tree[x].val.c];</span></span><br><span class="line"><span class="comment">            Vis[Tree[x].val.c]=0;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>&amp;&amp;!M.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            it=M.<span class="built_in">end</span>();</span><br><span class="line">            M.<span class="built_in">erase</span>(--it);</span><br><span class="line">            <span class="comment">/*int x=underGetNxt(-INF);</span></span><br><span class="line"><span class="comment">            if(!Vis[Tree[x].val.c]) continue;</span></span><br><span class="line"><span class="comment">            underErase(Tree[x].val.c);</span></span><br><span class="line"><span class="comment">            ans-=Vis[Tree[x].val.c];</span></span><br><span class="line"><span class="comment">            Vis[Tree[x].val.c]=0;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(map&lt;ll,ll&gt;::iterator i=M.<span class="built_in">begin</span>();i!=M.<span class="built_in">end</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=(*i).second;</span><br><span class="line">        res+=(*i).first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld&quot;</span>,ans,res);</span><br><span class="line">    <span class="comment">/*printf(&quot;%d&quot;,ans);*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 1 1</span></span><br><span class="line"><span class="comment">1 2 5</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1 3 3</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 5 2</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> Splay </tag>
            
            <tag> STL </tag>
            
            <tag> 单调队列 </tag>
            
            <tag> map </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>S.H.A.D.O.W</title>
      <link href="/Eternity/Until-The-End/my-junior-high-school-life/"/>
      <url>/Eternity/Until-The-End/my-junior-high-school-life/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fae789e00bceac39cc7dbac819834f604fffc0d0bf0825396765feffbd40d807"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">密码：我初三的班级号</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/Eternity/lib/hbe.js"></script><link href="/Eternity/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Until The End </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>平衡树</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/bst-treap-splay/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/bst-treap-splay/</url>
      
        <content type="html"><![CDATA[<p>“平衡的旋转，亦是世上最美的舞蹈。”</p><span id="more"></span><h2 id="二叉搜索树-Binary-Search-Tree"><a href="#二叉搜索树-Binary-Search-Tree" class="headerlink" title="二叉搜索树(Binary Search Tree)"></a>二叉搜索树(Binary Search Tree)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>顾名思义，一棵二叉树，满足左子点的值小于父节点，右子点的值大于父节点。所有节点都满足该性质。当然，空节点不算。</p><h3 id="性质-特点"><a href="#性质-特点" class="headerlink" title="性质/特点"></a>性质/特点</h3><p>能够高效地完成：</p><ul><li>插入</li><li>查询</li><li>删除</li></ul><p>若 $x$ 是其中节点，而 $y$ 和 $z$ 分别是其左子点与右子点。那么它们满足：</p><blockquote><p>$y.key \leq x.key \leq z.key$</p></blockquote><h3 id="复杂度-代码实现"><a href="#复杂度-代码实现" class="headerlink" title="复杂度/代码实现"></a>复杂度/代码实现</h3><p>均摊 $O(\log n)$</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>从根节点开始，按性质向下查找即可</p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>根据性质查找直到空节点，并新建节点。</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h5 id="叶节点"><a href="#叶节点" class="headerlink" title="叶节点"></a>叶节点</h5><p>直接删除</p><h5 id="仅有一个子节点的父节点"><a href="#仅有一个子节点的父节点" class="headerlink" title="仅有一个子节点的父节点"></a>仅有一个子节点的父节点</h5><p>上移其子节点，删除其本身</p><h5 id="双子节点的父节点"><a href="#双子节点的父节点" class="headerlink" title="双子节点的父节点"></a>双子节点的父节点</h5><p>找到需要删除的节点 $p$ 的直接前驱（或后驱） $s$ ，用 $s$ 代替 $p$ ，并删除 $s$</p><h3 id="另话"><a href="#另话" class="headerlink" title="另话"></a>另话</h3><p>然而，二叉查找树虽然均摊 $O(\log n)$ ，但实际上，当树作为一条链时，其任何操作都是 $O(n)$ ，<del>那做个P啊</del>，所以就会有了<strong>平衡树</strong>这种东西</p><h2 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h2><p>有两位巨佬告诉我， $Treap$ 这东西不需要学。所以我也就简单提提。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>$Treap$ 实际上是一个合成词，$Tree+Heap$ 的合成。也顾名思义，给每一个节点加入一个随机值 $rand()$ 使其基本达到平衡。从而保证树的深度在 $\log n$ 左右。当这棵树的深度达到平衡极限时，进行<strong>左旋</strong>和<strong>右旋</strong>操作使深度降低。</p><h4 id="旋转-rotate"><a href="#旋转-rotate" class="headerlink" title="旋转(rotate)"></a>旋转(rotate)</h4><p>旋转分为<strong>左旋(zig)</strong>和<strong>右旋(zag)</strong>。其目的是使子节点转到根节点处。因为平衡树的操作众多，所以这里重点讲旋转，其他的因题而异即可。</p><p>$rotate(\&amp;p,d)$ 中，以 $p$ 为初始根节点旋转，$d=0$ 时左旋，$d=1$ 时右旋。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k=Tree.son[p][d^<span class="number">1</span>];</span><br><span class="line">Tree.son[p][d^<span class="number">1</span>]=Tree.son[k][d];</span><br><span class="line">Tree.son[k][d]=p;</span><br><span class="line"><span class="built_in">underPushUp</span>(p);</span><br><span class="line"><span class="built_in">underPushUp</span>(k);</span><br><span class="line">p=k;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以左旋为例：</p><p>将右子点保存为 $k$ ，将 $p$ 的右子点变成 $k$ 的左子点。再将 $k$ 的左子点变成 $p$ 。然后将 $p$ 和 $k$ 都进行 $pushup$ 。（如果你不知道 $pushup$ 是啥请看<a href="">线段树学习笔记</a>）</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>建立一个极小点($-\inf$)和一个极大点($\inf$)防止越界</p><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> M,Idx,Rt,op,x;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Treap</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> son[<span class="number">2</span>],val,rd,cnt,size;</span><br><span class="line">&#125;Tree[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underNew</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[++Idx].val=val;</span><br><span class="line">    Tree[Idx].rd=<span class="built_in">rand</span>();</span><br><span class="line">    Tree[Idx].cnt=Tree[Idx].size=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> Idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].size=Tree[Tree[p].son[<span class="number">0</span>]].size+Tree[Tree[p].son[<span class="number">1</span>]].size+Tree[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underBuild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">underNew</span>(-INF),<span class="built_in">underNew</span>(INF);</span><br><span class="line">    Rt=<span class="number">1</span>,Tree[<span class="number">1</span>].son[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">underPushUp</span>(Rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k=Tree[p].son[d^<span class="number">1</span>];</span><br><span class="line">    Tree[p].son[d^<span class="number">1</span>]=Tree[k].son[d];</span><br><span class="line">    Tree[k].son[d]=p;</span><br><span class="line">    p=k;</span><br><span class="line">    <span class="built_in">underPushUp</span>(Tree[p].son[d]);</span><br><span class="line">    <span class="built_in">underPushUp</span>(p);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;   <span class="comment">//d=0 -&gt; zag</span></span><br><span class="line">    <span class="comment">//d=1 -&gt; zig</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInsert</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=<span class="built_in">underNew</span>(val);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val==Tree[p].val)</span><br><span class="line">    &#123;</span><br><span class="line">        ++Tree[p].cnt,<span class="built_in">underPushUp</span>(p);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val&lt;Tree[p].val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underInsert</span>(Tree[p].son[<span class="number">0</span>],val);</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].rd&lt;Tree[Tree[p].son[<span class="number">0</span>]].rd) <span class="built_in">underRotate</span>(p,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underInsert</span>(Tree[p].son[<span class="number">1</span>],val);</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].rd&lt;Tree[Tree[p].son[<span class="number">1</span>]].rd) <span class="built_in">underRotate</span>(p,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underPushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetRankByVal</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(val==Tree[p].val) <span class="keyword">return</span> Tree[Tree[p].son[<span class="number">0</span>]].size+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(val&lt;Tree[p].val) <span class="keyword">return</span> <span class="built_in">underGetRankByVal</span>(Tree[p].son[<span class="number">0</span>],val);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">underGetRankByVal</span>(Tree[p].son[<span class="number">1</span>],val)+Tree[Tree[p].son[<span class="number">0</span>]].size+Tree[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetValByRank</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span>(Tree[Tree[p].son[<span class="number">0</span>]].size&gt;=rank) <span class="keyword">return</span> <span class="built_in">underGetValByRank</span>(Tree[p].son[<span class="number">0</span>],rank);</span><br><span class="line">    <span class="keyword">if</span>(Tree[Tree[p].son[<span class="number">0</span>]].size+Tree[p].cnt&gt;=rank) <span class="keyword">return</span> Tree[p].val;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">underGetValByRank</span>(Tree[p].son[<span class="number">1</span>],rank-Tree[Tree[p].son[<span class="number">0</span>]].size-Tree[p].cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetPre</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>,p=Rt;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val==Tree[p].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Tree[p].son[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                p=Tree[p].son[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">while</span>(Tree[p].son[<span class="number">1</span>]) p=Tree[p].son[<span class="number">1</span>];</span><br><span class="line">                ans=p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].val&lt;val&amp;&amp;Tree[p].val&gt;Tree[ans].val) ans=p;</span><br><span class="line">        p=(val&lt;Tree[p].val?Tree[p].son[<span class="number">0</span>]:Tree[p].son[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Tree[ans].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetNxt</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">2</span>,p=Rt;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val==Tree[p].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Tree[p].son[<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                p=Tree[p].son[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">while</span>(Tree[p].son[<span class="number">0</span>]) p=Tree[p].son[<span class="number">0</span>];</span><br><span class="line">                ans=p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].val&gt;val&amp;&amp;Tree[p].val&lt;Tree[ans].val) ans=p;</span><br><span class="line">        p=(val&lt;Tree[p].val?Tree[p].son[<span class="number">0</span>]:Tree[p].son[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Tree[ans].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underErase</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(val==Tree[p].val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].cnt&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            --Tree[p].cnt,<span class="built_in">underPushUp</span>(p);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].son[<span class="number">0</span>]||Tree[p].son[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!Tree[p].son[<span class="number">1</span>]||Tree[Tree[p].son[<span class="number">0</span>]].rd&gt;Tree[Tree[p].son[<span class="number">1</span>]].rd) <span class="built_in">underRotate</span>(p,<span class="number">1</span>),<span class="built_in">underErase</span>(Tree[p].son[<span class="number">1</span>],val);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">underRotate</span>(p,<span class="number">0</span>),<span class="built_in">underErase</span>(Tree[p].son[<span class="number">0</span>],val);</span><br><span class="line">            <span class="built_in">underPushUp</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    val&lt;Tree[p].val?<span class="built_in">underErase</span>(Tree[p].son[<span class="number">0</span>],val):<span class="built_in">underErase</span>(Tree[p].son[<span class="number">1</span>],val);</span><br><span class="line">    <span class="built_in">underPushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;splay.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;splay.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underBuild</span>();</span><br><span class="line">    <span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">while</span>(M--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(op),<span class="built_in">underRead</span>(x);</span><br><span class="line">        <span class="keyword">switch</span>(op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">underInsert</span>(Rt,x);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">underErase</span>(Rt,x);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underGetRankByVal</span>(Rt,x)<span class="number">-1</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underGetValByRank</span>(Rt,x+<span class="number">1</span>));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underGetPre</span>(x));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underGetNxt</span>(x));<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">1 106465</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">1 317721</span></span><br><span class="line"><span class="comment">1 460929</span></span><br><span class="line"><span class="comment">1 644985</span></span><br><span class="line"><span class="comment">1 84185</span></span><br><span class="line"><span class="comment">1 89851</span></span><br><span class="line"><span class="comment">6 81968</span></span><br><span class="line"><span class="comment">1 492737</span></span><br><span class="line"><span class="comment">5 493598</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h2 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>俗称<strong>伸展树</strong>。也是一种二叉排序树，为了使整个查找时间变小，将被查频率高的那些节点转到靠近根节点的位置。每次查找节点之后对树进行重构，把被查找的节点搬移到树根。</p><p>为了将当前被访问节点旋转到树根，我们通常将节点自底向上旋转，直至该节点成为树根为止。“旋转”的巧妙之处就是在不打乱数列中数据大小关系（指中序遍历结果是全序的）情况下，所有基本操作的平摊复杂度仍为 $O(\log n)$。</p><p>一般来说， $Splay$ 的节点维护信息为：</p><div class="table-container"><table><thead><tr><th style="text-align:center">$fa$</th><th style="text-align:center">$chi[0/1]$</th><th style="text-align:center">$dat$</th><th style="text-align:center">$cnt$</th><th style="text-align:center">$size$</th></tr></thead><tbody><tr><td style="text-align:center">父节点编号</td><td style="text-align:center">子节点编号（一般 $0$ 为左子点，$1$ 为右子点）</td><td style="text-align:center">节点权值</td><td style="text-align:center">该节点权值出现的个数</td><td style="text-align:center">子树大小</td></tr></tbody></table></div><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h4><p>与 $Treap$ 的旋转类似。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">    <span class="type">int</span> k=Tree[y].chi[<span class="number">1</span>]==x;</span><br><span class="line">    Tree[z].chi[Tree[z].chi[<span class="number">1</span>]==y]=x;</span><br><span class="line">    Tree[x].fa=z;</span><br><span class="line">    Tree[y].chi[k]=Tree[x].chi[k^<span class="number">1</span>];</span><br><span class="line">    Tree[Tree[x].chi[k^<span class="number">1</span>]].fa=y;</span><br><span class="line">    Tree[x].chi[k^<span class="number">1</span>]=y;</span><br><span class="line">    Tree[y].fa=x;</span><br><span class="line">    <span class="built_in">underPushUp</span>(y);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Splay操作"><a href="#Splay操作" class="headerlink" title="Splay操作"></a>Splay操作</h4><p>传递两个参数 $x$ 和 $k$ 表示将编号为 $x$ 的节点旋转到 $k$ 处，当 $k=0$ 时旋转到根节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Tree[x].fa!=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">        <span class="keyword">if</span>(z!=k)</span><br><span class="line">            <span class="keyword">if</span>((Tree[y].chi[<span class="number">1</span>]==x)^(Tree[z].chi[<span class="number">1</span>]==y))</span><br><span class="line">                <span class="built_in">underRotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">underRotate</span>(y);</span><br><span class="line">        <span class="built_in">underRotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!k) Root=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的说其实就上面两句，但实际上还是要讨论很多情况的。<del>背板子就完事儿了</del>。</p><p>其他的就根据题目而定了。这里给出一些比较常用的操作：</p><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInsert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,p;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat==x)</span><br><span class="line">        &#123;</span><br><span class="line">            ++Tree[u].cnt;</span><br><span class="line">            ++Tree[u].size;</span><br><span class="line">            <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        p=u;</span><br><span class="line">        u=Tree[u].chi[x&gt;Tree[u].dat];</span><br><span class="line">    &#125;</span><br><span class="line">    u=++Idx;</span><br><span class="line">    <span class="keyword">if</span>(p) Tree[p].chi[x&gt;Tree[p].dat]=u;</span><br><span class="line">    Tree[u].dat=x;</span><br><span class="line">    Tree[u].size=<span class="number">1</span>;</span><br><span class="line">    Tree[u].fa=p;</span><br><span class="line">    Tree[u].cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underErase</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">underGetPre</span>(x),r=<span class="built_in">underGetNxt</span>(x);</span><br><span class="line">    <span class="built_in">Splay</span>(l,<span class="number">0</span>),<span class="built_in">Splay</span>(r,l);</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].cnt--;</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].size--;</span><br><span class="line">    <span class="keyword">if</span>(!Tree[Tree[r].chi[<span class="number">0</span>]].cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[Tree[r].chi[<span class="number">0</span>]].fa=<span class="number">0</span>;</span><br><span class="line">        Tree[r].chi[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(r,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找前驱操作"><a href="#查找前驱操作" class="headerlink" title="查找前驱操作"></a>查找前驱操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetPre</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat&lt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找后驱操作"><a href="#查找后驱操作" class="headerlink" title="查找后驱操作"></a>查找后驱操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetNxt</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat&gt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找排名操作"><a href="#查找排名操作" class="headerlink" title="查找排名操作"></a>查找排名操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underNum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[Tree[u].chi[<span class="number">0</span>]].size&gt;=x) u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&lt;=Tree[Tree[u].chi[<span class="number">0</span>]].size+Tree[u].cnt&amp;&amp;x&gt;=Tree[Tree[u].chi[<span class="number">0</span>]].size+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x-=Tree[Tree[u].chi[<span class="number">0</span>]].size+Tree[u].cnt;</span><br><span class="line">            u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> M,Idx;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Splay</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> chi[<span class="number">2</span>],fa;</span><br><span class="line">    <span class="type">int</span> cnt,size,dat;</span><br><span class="line">&#125;Tree[MAXN];</span><br><span class="line"><span class="type">int</span> Root;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[x].size=Tree[Tree[x].chi[<span class="number">0</span>]].size+Tree[Tree[x].chi[<span class="number">1</span>]].size+Tree[x].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">    <span class="type">int</span> k=Tree[y].chi[<span class="number">1</span>]==x;</span><br><span class="line">    Tree[z].chi[Tree[z].chi[<span class="number">1</span>]==y]=x;</span><br><span class="line">    Tree[x].fa=z;</span><br><span class="line">    Tree[y].chi[k]=Tree[x].chi[k^<span class="number">1</span>];</span><br><span class="line">    Tree[Tree[x].chi[k^<span class="number">1</span>]].fa=y;</span><br><span class="line">    Tree[x].chi[k^<span class="number">1</span>]=y;</span><br><span class="line">    Tree[y].fa=x;</span><br><span class="line">    <span class="built_in">underPushUp</span>(y);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Tree[x].fa!=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">        <span class="keyword">if</span>(z!=k)</span><br><span class="line">            <span class="keyword">if</span>((Tree[y].chi[<span class="number">1</span>]==x)^(Tree[z].chi[<span class="number">1</span>]==y))</span><br><span class="line">                <span class="built_in">underRotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">underRotate</span>(y);</span><br><span class="line">        <span class="built_in">underRotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!k) Root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInsert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,p;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat==x)</span><br><span class="line">        &#123;</span><br><span class="line">            ++Tree[u].cnt;</span><br><span class="line">            ++Tree[u].size;</span><br><span class="line">            <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        p=u;</span><br><span class="line">        u=Tree[u].chi[x&gt;Tree[u].dat];</span><br><span class="line">    &#125;</span><br><span class="line">    u=++Idx;</span><br><span class="line">    <span class="keyword">if</span>(p) Tree[p].chi[x&gt;Tree[p].dat]=u;</span><br><span class="line">    Tree[u].dat=x;</span><br><span class="line">    Tree[u].size=<span class="number">1</span>;</span><br><span class="line">    Tree[u].fa=p;</span><br><span class="line">    Tree[u].cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Root=++Idx;</span><br><span class="line">    Tree[Root].fa=<span class="number">0</span>;</span><br><span class="line">    Tree[Root].cnt=<span class="number">1</span>;</span><br><span class="line">    Tree[Root].size=<span class="number">1</span>;</span><br><span class="line">    Tree[Root].dat=INF;</span><br><span class="line">    <span class="built_in">underInsert</span>(-INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetPre</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat&lt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetNxt</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat&gt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underErase</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">underGetPre</span>(x),r=<span class="built_in">underGetNxt</span>(x);</span><br><span class="line">    <span class="built_in">Splay</span>(l,<span class="number">0</span>),<span class="built_in">Splay</span>(r,l);</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].cnt--;</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].size--;</span><br><span class="line">    <span class="keyword">if</span>(!Tree[Tree[r].chi[<span class="number">0</span>]].cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[Tree[r].chi[<span class="number">0</span>]].fa=<span class="number">0</span>;</span><br><span class="line">        Tree[r].chi[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(r,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underNum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[Tree[u].chi[<span class="number">0</span>]].size&gt;=x) u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&lt;=Tree[Tree[u].chi[<span class="number">0</span>]].size+Tree[u].cnt&amp;&amp;x&gt;=Tree[Tree[u].chi[<span class="number">0</span>]].size+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x-=Tree[Tree[u].chi[<span class="number">0</span>]].size+Tree[u].cnt;</span><br><span class="line">            u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;splay.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;splay.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underInit</span>();</span><br><span class="line">    <span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op,x;</span><br><span class="line">        <span class="built_in">underRead</span>(op),<span class="built_in">underRead</span>(x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) <span class="built_in">underInsert</span>(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>) <span class="built_in">underErase</span>(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Splay</span>(<span class="built_in">underGetPre</span>(x),<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Tree[Tree[Root].chi[<span class="number">0</span>]].size+Tree[Root].cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Tree[<span class="built_in">underNum</span>(x+<span class="number">1</span>)].dat);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Tree[<span class="built_in">underGetPre</span>(x)].dat);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Tree[<span class="built_in">underGetNxt</span>(x)].dat);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">1 106465</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">1 317721</span></span><br><span class="line"><span class="comment">1 460929</span></span><br><span class="line"><span class="comment">1 644985</span></span><br><span class="line"><span class="comment">1 84185</span></span><br><span class="line"><span class="comment">1 89851</span></span><br><span class="line"><span class="comment">6 81968</span></span><br><span class="line"><span class="comment">1 492737</span></span><br><span class="line"><span class="comment">5 493598</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="文艺平衡树"><a href="#文艺平衡树" class="headerlink" title="文艺平衡树"></a>文艺平衡树</h3><p><a href="https://www.luogu.com.cn/problem/P3391">例题</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们已知，平衡树的中序遍历永远满足全序。我们又会发现（<del>其实要推一下</del>），当我们把区间 $[l,r]$ 反转时，就是将其两个子节点指针交换。将 $l$ 转到根节点，将 $r$ 转为 $l$ 的子节点。然后交换其子树编号即可。</p><h4 id="AC-Code-2"><a href="#AC-Code-2" class="headerlink" title="AC Code"></a>AC Code</h4><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Idx;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Splay</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> chi[<span class="number">2</span>],fa,tag;</span><br><span class="line">    <span class="type">int</span> cnt,size,dat;</span><br><span class="line">&#125;Tree[MAXN];</span><br><span class="line"><span class="type">int</span> Root;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[x].size=Tree[Tree[x].chi[<span class="number">0</span>]].size+Tree[Tree[x].chi[<span class="number">1</span>]].size+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushDown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree[x].tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(Tree[x].chi[<span class="number">0</span>],Tree[x].chi[<span class="number">1</span>]);</span><br><span class="line">Tree[Tree[x].chi[<span class="number">0</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">Tree[Tree[x].chi[<span class="number">1</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">Tree[x].tag^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">    <span class="type">int</span> k=Tree[y].chi[<span class="number">1</span>]==x;</span><br><span class="line">    Tree[z].chi[Tree[z].chi[<span class="number">1</span>]==y]=x;</span><br><span class="line">    Tree[x].fa=z;</span><br><span class="line">    Tree[y].chi[k]=Tree[x].chi[k^<span class="number">1</span>];</span><br><span class="line">    Tree[Tree[x].chi[k^<span class="number">1</span>]].fa=y;</span><br><span class="line">    Tree[x].chi[k^<span class="number">1</span>]=y;</span><br><span class="line">    Tree[y].fa=x;</span><br><span class="line">    <span class="built_in">underPushUp</span>(y);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Tree[x].fa!=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">        <span class="keyword">if</span>(z!=k)</span><br><span class="line">            <span class="keyword">if</span>((Tree[y].chi[<span class="number">1</span>]==x)^(Tree[z].chi[<span class="number">1</span>]==y)) <span class="built_in">underRotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">underRotate</span>(y);</span><br><span class="line">        <span class="built_in">underRotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!k) Root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInsert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat==x)</span><br><span class="line">        &#123;</span><br><span class="line">            ++Tree[u].cnt;</span><br><span class="line">            ++Tree[u].size;</span><br><span class="line">            <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        p=u;</span><br><span class="line">        u=Tree[u].chi[x&gt;Tree[u].dat];</span><br><span class="line">    &#125;</span><br><span class="line">    u=++Idx;</span><br><span class="line">    <span class="keyword">if</span>(p) Tree[p].chi[x&gt;Tree[p].dat]=u;</span><br><span class="line">    Tree[u].dat=x;</span><br><span class="line">    Tree[u].size=<span class="number">1</span>;</span><br><span class="line">    Tree[u].fa=p;</span><br><span class="line">    Tree[u].cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underWrite</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">underPushDown</span>(rt);</span><br><span class="line"><span class="keyword">if</span>(Tree[rt].chi[<span class="number">0</span>]) <span class="built_in">underWrite</span>(Tree[rt].chi[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(Tree[rt].dat&gt;<span class="number">1</span>&amp;&amp;Tree[rt].dat&lt;N+<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Tree[rt].dat<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(Tree[rt].chi[<span class="number">1</span>]) <span class="built_in">underWrite</span>(Tree[rt].chi[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underKth</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> u=Root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">underPushDown</span>(u);</span><br><span class="line"><span class="keyword">if</span>(Tree[Tree[u].chi[<span class="number">0</span>]].size&gt;=k) u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Tree[Tree[u].chi[<span class="number">0</span>]].size+<span class="number">1</span>==k) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">else</span> k-=Tree[Tree[u].chi[<span class="number">0</span>]].size+<span class="number">1</span>,u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underSwap</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">l=<span class="built_in">underKth</span>(l);</span><br><span class="line">r=<span class="built_in">underKth</span>(r+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Splay</span>(l,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">Splay</span>(r,l);</span><br><span class="line">Tree[Tree[Tree[Root].chi[<span class="number">1</span>]].chi[<span class="number">0</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Root=++Idx;</span><br><span class="line">    Tree[Root].fa=<span class="number">0</span>;</span><br><span class="line">    Tree[Root].cnt=<span class="number">1</span>;</span><br><span class="line">    Tree[Root].size=<span class="number">1</span>;</span><br><span class="line">    Tree[Root].dat=INF;</span><br><span class="line">    <span class="built_in">underInsert</span>(-INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;splay.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;splay.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N+<span class="number">2</span>;++i) <span class="built_in">underInsert</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> Ql,Qr;</span><br><span class="line">        <span class="built_in">underRead</span>(Ql),<span class="built_in">underRead</span>(Qr);</span><br><span class="line">        <span class="built_in">underSwap</span>(Ql,Qr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underWrite</span>(Root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="Fhq-Treap"><a href="#Fhq-Treap" class="headerlink" title="Fhq-Treap"></a>Fhq-Treap</h2><p>暂代补充</p><h2 id="AVL数"><a href="#AVL数" class="headerlink" title="AVL数"></a>AVL数</h2><p>暂代补充</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>估计不会有了</p><hr><p>没有更多了</p><p>首次更新：$date\ 2022.3.14$</p><p>最后更新：$date\ 2022.3.19$</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> Splay </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可持久化线段树(主席树)</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/persistent-segment-tree/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/persistent-segment-tree/</url>
      
        <content type="html"><![CDATA[<p>“人最重要的，是不能忘记自己为何出发。”</p><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>主席树</strong>全称<strong>可持久化权值线段树</strong>，用于维护区间最值与一些奇奇怪怪的东西。支持历史询问与修改（目前不会），似乎与普通线段树的时间复杂度是一样的，但空间会减少很多消耗。</p><p>在算法执行的过程中，会发现在更新一个动态集合时，需要维护其过去的版本。这样的集合称为是<strong>可持久</strong>的。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="建树-build"><a href="#建树-build" class="headerlink" title="建树(build)"></a>建树(build)</h3><p>首先，建立起<strong>亘古树</strong>，即一开始的整棵线段树。但是根本不需要。对于主席树而言，改掉了我的一个习惯：即线段树的左区间与右区间是存于 $Tree$ 内的。这样可能会消耗一些空间。但对于主席树而言，其儿子节点并不满足 <code>Tree[p].l=p&lt;&lt;1</code> 与 <code>Tree[p].r=p&lt;&lt;1|1</code> 的关系，所以对于建树而言，每一个节点的 $l$ 和 $r$ 存储的是其左右儿子的点编号。每输入一个数，就动态修改即可，根本不需要进行 $build$ 操作。<del>一般不建</del></p><h3 id="修改-插入-modify"><a href="#修改-插入-modify" class="headerlink" title="修改/插入(modify)"></a>修改/插入(modify)</h3><p>每输入一个值……其实这句话是不对的。对于部分主席树的题而言，是需要<strong>离散化</strong>的。所以插入（修改）操作都是在输入完并离散化之后才一次性完成的。</p><p>以洛谷的<a href="https://www.luogu.com.cn/problem/P3834">模板题</a>为例，我们需要求区间 $[l,r]$ 的第 $k$ 小值。则对于这道题的历史版本 $v_i$ ，处理的其实是<strong>前缀和</strong>的信息。即我们建的第 $i$ 个树存储的是区间 $[1,i]$ 的 $Val$ 信息。而叶节点存储的则是第 $i$ 个数的个数。</p><p>对于每一次的插入操作，我们就在原来基础上插入一条链直达叶节点，表示我们在该位置插入了一个数。然后自下而上更新区间值 $dat$ ，这与线段树是一样的。而不同的是，在插入过程中，其节点编号 $p$ 是动态的。因为当一个地方没有被修改时，我们会指向其历史编号，只有当修改时才会新建编号，而我们新建了编号后，其父节点所指的子节点也是会更改的。所以就会有 <code>int &amp;x</code> 的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[++Idx]=Tree[x];</span><br><span class="line">    x=Idx;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ++Tree[x].dat;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=mid) <span class="built_in">underModify</span>(Tree[x].l,l,mid,d);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">underModify</span>(Tree[x].r,mid+<span class="number">1</span>,r,d);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询-query"><a href="#查询-query" class="headerlink" title="查询(query)"></a>查询(query)</h3><p>其意义并非真正的线段树查询。因为用了二分的思想又与线段树相似而称之为查询。对于查询第 $k$ 小数而言，因为我们已经离散化排了序的，则：</p><ol><li>当该节点的左儿子存储的数的个数大于 $k$ ，则查询左儿子；</li><li>当该节点的左儿子存储的数的个数小于 $k$ ，则查询右儿子的第 $k-ls$ 小值。</li></ol><p>这就因题而异了，只是提一句。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h4><p>因题而异。可以有，也可以没有。</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>因题而异。可以有，也可以没有。</p><h4 id="修改根节点-root"><a href="#修改根节点-root" class="headerlink" title="修改根节点(root)"></a>修改根节点(root)</h4><p>每一个历史线段树的根节点在一开始的时候都是空的，其会在插入操作里不断更新。这也是为什么 <code>int &amp;x</code> 的原因（<del>二次重提</del>）</p><h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Val[MAXN&lt;&lt;<span class="number">1</span>],Root[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PersistentSegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> dat,l,r;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> Idx;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].dat=Tree[Tree[p].l].dat+Tree[Tree[p].r].dat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[++Idx]=Tree[x];</span><br><span class="line">    x=Idx;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ++Tree[x].dat;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=mid) <span class="built_in">underModify</span>(Tree[x].l,l,mid,d);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">underModify</span>(Tree[x].r,mid+<span class="number">1</span>,r,d);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQuery</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> x2,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ls=Tree[Tree[x2].l].dat-Tree[Tree[x1].l].dat;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=ls) <span class="keyword">return</span> <span class="built_in">underQuery</span>(Tree[x1].l,Tree[x2].l,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">underQuery</span>(Tree[x1].r,Tree[x2].r,mid+<span class="number">1</span>,r,k-ls);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;PST.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;PST.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;V;</span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(Val[i]);</span><br><span class="line">        V.<span class="built_in">push_back</span>(Val[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> len=V.<span class="built_in">erase</span>(<span class="built_in">unique</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>()),V.<span class="built_in">end</span>())-V.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Root[i]=Root[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">underModify</span>(Root[i],<span class="number">1</span>,len,<span class="built_in">lower_bound</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>(),Val[i])-V.<span class="built_in">begin</span>()+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> Ql,Qr,Qk;M;M--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(Ql),<span class="built_in">underRead</span>(Qr),<span class="built_in">underRead</span>(Qk);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,V[<span class="built_in">underQuery</span>(Root[Ql<span class="number">-1</span>],Root[Qr],<span class="number">1</span>,len,Qk)<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">25957 6405 15770 26287 26465 </span></span><br><span class="line"><span class="comment">2 2 1</span></span><br><span class="line"><span class="comment">3 4 1</span></span><br><span class="line"><span class="comment">4 5 1</span></span><br><span class="line"><span class="comment">1 2 2</span></span><br><span class="line"><span class="comment">4 4 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h2 id="可持久化数组"><a href="#可持久化数组" class="headerlink" title="可持久化数组"></a>可持久化数组</h2><p>其实差不多，只是多了一个建树操作。因为它有一个初始数列，这道题真的就是字面意思的<strong>可持久化</strong>了。</p><p><a href="https://www.luogu.com.cn/problem/P3919">P3919 【模板】可持久化线段树 1（可持久化数组）</a></p><h3 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Idx,Root[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,dat;</span><br><span class="line">&#125;Tree[MAXN*<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> Val[MAXN],op,Ql,Qv,Qk;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underBuild</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=++Idx;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[x].dat=Val[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">underBuild</span>(Tree[x].l,l,mid),<span class="built_in">underBuild</span>(Tree[x].r,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[++Idx]=Tree[x];</span><br><span class="line">    x=Idx;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[x].dat=k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=mid) <span class="built_in">underModify</span>(Tree[x].l,l,mid,d,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">underModify</span>(Tree[x].r,mid+<span class="number">1</span>,r,d,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQuery</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> Tree[x].dat;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=mid) <span class="keyword">return</span> <span class="built_in">underQuery</span>(Tree[x].l,l,mid,d);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">underQuery</span>(Tree[x].r,mid+<span class="number">1</span>,r,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;PST-fake.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;PST-fake.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">underRead</span>(Val[i]);</span><br><span class="line">    <span class="built_in">underBuild</span>(Root[<span class="number">0</span>],<span class="number">1</span>,N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(Qv),<span class="built_in">underRead</span>(op);</span><br><span class="line">        Root[i]=Root[Qv];</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">underRead</span>(Ql),<span class="built_in">underRead</span>(Qk);</span><br><span class="line">            <span class="built_in">underModify</span>(Root[i],<span class="number">1</span>,N,Ql,Qk);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">underRead</span>(Ql);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underQuery</span>(Root[i],<span class="number">1</span>,N,Ql));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 10</span></span><br><span class="line"><span class="comment">59 46 14 87 41</span></span><br><span class="line"><span class="comment">0 2 1</span></span><br><span class="line"><span class="comment">0 1 1 14</span></span><br><span class="line"><span class="comment">0 1 1 57</span></span><br><span class="line"><span class="comment">0 1 1 88</span></span><br><span class="line"><span class="comment">4 2 4</span></span><br><span class="line"><span class="comment">0 2 5</span></span><br><span class="line"><span class="comment">0 2 4</span></span><br><span class="line"><span class="comment">4 2 1</span></span><br><span class="line"><span class="comment">2 2 2</span></span><br><span class="line"><span class="comment">1 1 5 91</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
            <tag> 可持久化线段树 </tag>
            
            <tag> 可持久化数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉函数</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/euler-function/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/euler-function/</url>
      
        <content type="html"><![CDATA[<p>“下一个就是你了，承太郎“</p><span id="more"></span><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><blockquote><p>指的是满足小于等于$N$且与$N$互质的数目和。</p></blockquote><h2 id="欧拉公式求解公式："><a href="#欧拉公式求解公式：" class="headerlink" title="欧拉公式求解公式："></a>欧拉公式求解公式：</h2><p>对于一个正整数$N$满足：</p><blockquote><p>$\varphi(x)=\sum_{k}[(k, n)=1][k \in N][k&lt;n]$</p></blockquote><p>则有</p><blockquote><p>$\varphi(n)=n\left(1-\frac{1}{p_{1}}\right)\left(1-\frac{1}{p_{2}}\right)\left(1-\frac{1}{p_{3}}\right) \cdots\left(1-\frac{1}{p_{k}}\right)$</p></blockquote><h2 id="欧拉函数的性质："><a href="#欧拉函数的性质：" class="headerlink" title="欧拉函数的性质："></a>欧拉函数的性质：</h2><h3 id="当-N-0-时："><a href="#当-N-0-时：" class="headerlink" title="当$N=0$时："></a>当$N=0$时：</h3><blockquote><p>$\varphi(0)=0$.</p></blockquote><h3 id="当-N-1-时："><a href="#当-N-1-时：" class="headerlink" title="当$N=1$时："></a>当$N=1$时：</h3><blockquote><p>$\varphi(1)=1$.因为1与自身互质。</p></blockquote><h3 id="当-N-为质数时："><a href="#当-N-为质数时：" class="headerlink" title="当$N$为质数时："></a>当$N$为质数时：</h3><blockquote><p>$\varphi(N)=N-1$.</p></blockquote><h3 id="如果-P-是质数，而-N-是-P-的正整数次方："><a href="#如果-P-是质数，而-N-是-P-的正整数次方：" class="headerlink" title="如果$P$是质数，而$N$是$P$的正整数次方："></a>如果$P$是质数，而$N$是$P$的正整数次方：</h3><blockquote><p>$\varphi(P^N)=P^N(1-\frac{1}{p})$</p></blockquote><h2 id="欧拉定理："><a href="#欧拉定理：" class="headerlink" title="欧拉定理："></a>欧拉定理：</h2><p>设$a,m \in N^+$，且$(a,m)=1$，那么则有</p><blockquote><p>$a^{\varphi(m)} \equiv 1 \pmod m$</p><p>且$a$对模$m$的阶$\delta_m(a)$必须整除$\varphi(a)$.</p></blockquote><p>证明：</p><blockquote><p>取模$m$的缩系，$a_1,a_2,a_3……a_{\varphi(m)}$，</p><p>则$aa_1,aa_2,aa_3……aa_{\varphi(m)}$也是$m$的缩系.</p><p>故有$\prod_{i=1}^{\varphi(m)}a_i \equiv \prod_{i=1}^{\varphi(m)}aa_i \equiv a^{\varphi(m)}\prod_{i=1}^{\varphi(m)}a_i \pmod m$</p><p>则可以推出$a^{\varphi(m)} \equiv 1 \pmod m$. </p></blockquote><p>证毕</p><p>欧拉定理可以推出<strong>费马小定理</strong>：</p><blockquote><p>如果p是一个质数，而整数$a$不是$p$的倍数，</p><p>则有$a^{(p-1)} \equiv 1 \pmod p$。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同余</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/congruence/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/congruence/</url>
      
        <content type="html"><![CDATA[<p>“虽然我们相差甚远，但至少初心是一致的。”</p><span id="more"></span><h2 id="同余："><a href="#同余：" class="headerlink" title="同余："></a>同余：</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>$a$ 与 $b$ 同余，当且仅当 $a$ 与 $b$ 除以 $p$ 的余数相同，记作 $a$ 与 $b$ 模 $p$ 同余，写作 $a \equiv b \pmod p$。</p><h3 id="同余的性质："><a href="#同余的性质：" class="headerlink" title="同余的性质："></a>同余的性质：</h3><ul><li><p>若 $a \equiv b \pmod p$ ，则有 $a+c \equiv b+c \pmod p$</p></li><li><p>若 $a \equiv b \pmod p$ ，则有 $ac \equiv bc \pmod p$</p></li><li><p>若 $a \equiv b \pmod p$ ，且 $c \equiv d \pmod p$ ，则有 $a \pm c \equiv b \pm d \pmod p$</p></li><li><p>若 $ac \equiv bc \pmod p$ ，且 $(c,m)=1$ ，那么 $a \equiv b \pmod p$</p></li><li><p>若 $a \equiv b \pmod p$ ，且 $c \equiv d \pmod p$ ，则有 $ac \equiv bd \pmod p$</p></li><li><p>若 $a \equiv b \pmod p$ ，则有 $ac \equiv bc \pmod {pc}$</p></li><li><p>若 $a$ 和 $b$ 都是整数，且 $d$ 和 $m$ 都是正整数， $d$ 是 $a,b,m$ 中任一公因数，则如果 $a \equiv b \pmod m$ 成立时，则有 $\frac{a}{d} \equiv \frac{b}{d} \pmod {\frac{p}{d}}$</p></li><li><p>若 $a$ 和 $b$ 都是整数，且 $d$ 和 $m$ 都是正整数，且 $d|m$，则如果 $a \equiv b \pmod m$ 成立时，则有 $a \equiv b \pmod d$ 。</p></li><li><p>若 $a$ 和 $b$ 都是整数，且 $d$ 和 $m$ 都是正整数，如果 $a \equiv b \pmod m$ 成立时，则有 $(a,m)=(b,m)$ ，且若如果 $d$ 能够整除 $a,b,m$ 中的任意一个， $d$ 也就能整除 $a,b$ 中的另一个。</p></li></ul><h2 id="扩展欧几里得算法："><a href="#扩展欧几里得算法：" class="headerlink" title="扩展欧几里得算法："></a>扩展欧几里得算法：</h2><p>若 $(a,b)=d$ ，那么对于方程 $ax+by=d$ 的解有一组特殊解为 $x=x_0,y=y_0$ ，那么该方程的通解为 $x=x_0+\frac{b}{d}<em>t,y=y_0-\frac{a}{d}</em>t$ ，而我们用这个通解来逆向推出 $gcd$ ，因为我们有<strong>欧几里得定理</strong>：</p><blockquote><p>$(a,b)=d$ ，则有 $(b,a \bmod b)=d$</p></blockquote><p>那么就会推出： $d=a<em>y_1+b</em>(x_1-y_1*\frac{a}{b})$ </p><p>在这个算式中满足： $x=y_1,y=x_1-\frac{a}{b}*y_1$</p><h3 id="扩欧解同余方程："><a href="#扩欧解同余方程：" class="headerlink" title="扩欧解同余方程："></a>扩欧解同余方程：</h3><p>对于方程 $ax \equiv 1 \pmod b$ ，已知 $a$ 与 $b$ ，求出最小的 $x$ 。</p><p><a href="https://www.luogu.com.cn/problem/P1082">LuoguP1082</a></p><p>妥妥的扩欧模板题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">LL a,b,x,y;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underExgcd</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">7</span>;            <span class="comment">//一对特殊解</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underExgcd</span>(b,a%b);</span><br><span class="line">    LL tx=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=tx-a/b*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;exgcd.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;exgcd.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(a),<span class="built_in">underRead</span>(b);</span><br><span class="line">    <span class="built_in">underExgcd</span>(a,b);</span><br><span class="line">    x=(x%b+b)%b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="中国剩余定理："><a href="#中国剩余定理：" class="headerlink" title="中国剩余定理："></a>中国剩余定理：</h2><p><a href="https://www.luogu.com.cn/problem/P1495">LuoguP1495曹冲养猪</a></p><p>有一个同余方程组满足 </p><script type="math/tex; mode=display">\left\{\begin{matrix}x \equiv a_1 \pmod {m_1} \\x \equiv a_2 \pmod {m_2} \\x \equiv a_3 \pmod {m_3} \\x \equiv a_4 \pmod {m_4} \\x \equiv a_5 \pmod {m_5} \\...... \\x \equiv a_k \pmod {m_k}\end{matrix}\right.</script><p> ，求出最小的 $x$ 。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>设 $M=m_1m_2m_3…m_k$ ，令 $M_i=\frac{M}{m_i}$ ，$t_i$ 是 $M_i$  的逆元，有 $M_it_i \equiv 1 \pmod m_i$</p><p>则 $x=\sum_{i=1}^{k}{a_iM_it_i}$</p><p>则可构造特殊解 $x_0=x+k*M$</p><p>最小正整数解即为 $x_{min}=x_0 \bmod M$</p><h3 id="P3868-AC-Code"><a href="#P3868-AC-Code" class="headerlink" title="P3868 AC Code:"></a>P3868 AC Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    LL type,mod;</span><br><span class="line">&#125;Num[MAXN];</span><br><span class="line">LL M[MAXN],Mul=<span class="number">1</span>,Mi[MAXN],X;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underExgcd</span><span class="params">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underExgcd</span>(b,a%b,x,y);</span><br><span class="line">    LL z=x;x=y;y=z-y*(a/b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;china.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;china.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(Num[i].type),<span class="built_in">underRead</span>(Num[i].mod);</span><br><span class="line">        Mul*=Num[i].type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">1</span>;t&lt;=N;++t)</span><br><span class="line">    &#123;</span><br><span class="line">        Mi[t]=Mul/Num[t].type;</span><br><span class="line">        LL x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">underExgcd</span>(Mi[t],Num[t].type,x,y);</span><br><span class="line">        X+=Num[t].mod*Mi[t]*(x&lt;<span class="number">0</span>?x+Num[t].type:x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,X%Mul);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3 1</span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">7 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 同余 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数列与极限 #2</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Math/analytical-mathematics-series-limits-2/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Math/analytical-mathematics-series-limits-2/</url>
      
        <content type="html"><![CDATA[<p>“当我趋近于你，我们之间的感情便成为了确值”</p><span id="more"></span><h2 id="实数的完备性定理（部分）"><a href="#实数的完备性定理（部分）" class="headerlink" title="实数的完备性定理（部分）"></a>实数的完备性定理（部分）</h2><h3 id="单调有界定理"><a href="#单调有界定理" class="headerlink" title="单调有界定理"></a>单调有界定理</h3><ol><li><p>若数列 $\{ x_n \}$ 递增且有上界，则</p><script type="math/tex; mode=display">\lim \limits_{n \to +\infty} x_n = \sup \{ x_n | n \in N \}</script></li><li><p>若数列 $\{ x_n \}$ 递减且有下界，则</p><script type="math/tex; mode=display">\lim \limits_{n \to +\infty} x_n = \inf \{ x_n | n \in N\}</script></li></ol><h3 id="柯西收敛原理"><a href="#柯西收敛原理" class="headerlink" title="柯西收敛原理"></a>柯西收敛原理</h3><p>设 $ \{ x_n \} $ 是一个数列，如果对于任意一个 $\epsilon &gt; 0$ ，存在 $N \in \mathbb{Z^<em>}$ ，只要 $n$ 满足 $n &gt; N$ ，则对于任意正整数 $p$ 而言，都有 $| x_{n+p}-x_n | &lt; \epsilon$ ，这样的数列 $\{ x_n \}$ 便称为<em>*柯西数列</em></em>。</p><p>这样的<strong>渐进稳定性</strong>和<strong>收敛性</strong>是等价的，即为<strong>充分必要条件</strong>。</p><p>简单来说：</p><script type="math/tex; mode=display">数列 \{ x_n \} 收敛的充要条件是 \forall \epsilon \in \mathbb{R^+} , \exists N \in \mathbb{Z^+} , \forall n,m > N ( | x_m - x_n | < \epsilon )</script><h3 id="戴德金原理"><a href="#戴德金原理" class="headerlink" title="戴德金原理"></a>戴德金原理</h3><p>如果 $\mathbb{R}$ 的两个子集 $A$ 和 $B$ 满足：</p><script type="math/tex; mode=display">\begin{aligned}&1. A \neq \emptyset \wedge B \neq \emptyset \\&2. A \cup B = \mathbb{R}\\&3. \forall x \in A , \forall y \in B ( x < y ) \\\end{aligned}</script><p>那么， $\exists c \in \mathbb{R} ( \forall a \in A , \forall b \in B ( a  \leq c \leq b) )$ 。</p><h3 id="闭区间套定理"><a href="#闭区间套定理" class="headerlink" title="闭区间套定理"></a>闭区间套定理</h3><p>如果数列 $\{ a_n \}$ 和 $\{ b_n \}$ 满足：</p><script type="math/tex; mode=display">\begin{aligned}&1. \forall n \in \mathbb{Z^+} ( a_n \leq a_{n+1} < b_{n+1} \leq b_n ) \\&2. \lim \limits_{n \to +\infty} ( b_n - a_n ) = 0 \\\end{aligned}</script><p>那么以下结论成立：</p><script type="math/tex; mode=display">\begin{aligned}&1. \lim \limits_{n \to +\infty} a_n = \lim \limits =_{n \to +\infty} b_n (该极限值记为 c )\\&2. 上述 c 是满足 \forall n \in \mathbb{Z^+} ( a_n \leq c \leq b_n ) 的唯一实数\end{aligned}</script><h3 id="确界存在原理"><a href="#确界存在原理" class="headerlink" title="确界存在原理"></a>确界存在原理</h3><p>对于 $\mathbb{R}$ 的任何非空子集 $S$ ，若 $S$ 在 $\mathbb{R}$ 内有上界，则 $S$ 在 $\mathbb{R}$ 内有上确界。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 分析数学 </tag>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数列与极限</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Math/analytical-mathematics-series-limits/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Math/analytical-mathematics-series-limits/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数学不能凭 $\text{sense}$ ，必须要追求<strong>严谨</strong>。—— $Zq$</p></blockquote><span id="more"></span><h2 id="数列定义"><a href="#数列定义" class="headerlink" title="数列定义"></a>数列定义</h2><p>一种从自然数（或正整数）到实数（或其它域）的映射 $f : \mathbb{N} \to \mathbb{R}$ ，这便是一个<strong>数列</strong>。一般来说，设 $a_n=f(n)$ ，则该数列记作 $\{ a_n \}_{n=0}^{+ \infty}$</p><p>定义一个数列 $f : \mathbb{N} \to \mathbb{R}$ 的子数列为一个数列 $g : L \to \mathbb{R}$ 满足 $L \subseteq \mathbb{N} \wedge \forall n \in L , g(n) = f(n) \wedge \mid L \mid = + \infty$ 。</p><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><p>对于一个数列 ${a_n\}_{n = 1}^{+ \infty }$ ，若 $\exists \delta \in R, s.t. \forall \epsilon &gt; 0, \exists N &gt; 0 \wedge N \in \mathbb{N}^+, s.t. \forall n &gt; N , \mid a_n - \delta \mid &lt; \epsilon$ ，我们就称 $\delta$ 为数列的极限，记作 $\lim\limits _{n \to + \infty} a_n = \delta$ ，或者 $a_n \to \delta(n \to + \infty)$ ，有时候括号内的可以省略。（上面的 $s.t$ 指 “使得”）</p><p>对于一个数列，如果它存在极限，我们就称这个数列<strong>收敛</strong>，否则就称其<strong>发散</strong>。</p><h2 id="数列极限的几何意义"><a href="#数列极限的几何意义" class="headerlink" title="数列极限的几何意义"></a>数列极限的几何意义</h2><p>对于一个数列满足：</p><script type="math/tex; mode=display">\begin{aligned}当 n > N 时，均有不等式 | x_n - a | < \epsilon\end{aligned}</script><p>即表示：</p><script type="math/tex; mode=display">\begin{aligned}\\所有下标大于 N 的 x_n 都落在 ( a - \epsilon , a + \epsilon ) 内，\\且落在 ( a - \epsilon , a + \epsilon ) 之外的点至多有 N 个（有限）\end{aligned}</script><p>如果存在某个值 $\epsilon_0$ 使得数列 ${x_n}$ 中有无穷个项落在 $( a - \epsilon_0 , a+ \epsilon_0)$ 之外，则 ${x_n}$ 一定不以 $a$ 为极限。</p><h2 id="数列极限的性质："><a href="#数列极限的性质：" class="headerlink" title="数列极限的性质："></a>数列极限的性质：</h2><h3 id="唯一性"><a href="#唯一性" class="headerlink" title="唯一性"></a>唯一性</h3><p>若一个数列的极限存在，则极限值是唯一的，且它的任何子列的极限与原数列相等。</p><p>证明，即：若 $a_n \to b, a_n \to c$ 则 $b = c$</p><p>有：</p><script type="math/tex; mode=display">\begin{aligned}\forall \epsilon > 0, \exists N_b > 0, s.t. \forall n > N_b, \mid a_n - b \mid < \epsilon \\\forall \epsilon > 0, \exists N_c > 0, s.t. \forall n > N_c, \mid a_n - c \mid < \epsilon \\\end{aligned}</script><p>记 $N = \max(N_b, N_c)$ 有：</p><script type="math/tex; mode=display">\forall n > N, \mid a_n - c \mid + \mid a_n - b \mid < 2 \epsilon</script><p>由三角不等式 $\mid a \mid - \mid b \mid \le \mid a \pm b \mid \le \mid a \mid + \mid b \mid$ 得：</p><script type="math/tex; mode=display">\mid b - c \mid < 2 \epsilon</script><p>由于 $\epsilon$ 可以无限小，故有 $b = c$</p><p>QED</p><h3 id="有界性"><a href="#有界性" class="headerlink" title="有界性"></a>有界性</h3><p>如果一个数列收敛，则这个数列一定有界。</p><p><strong>但如果一个数列有界，它不一定收敛</strong> $e.g. {x_n}=(-1)^n$</p><h3 id="保号性"><a href="#保号性" class="headerlink" title="保号性"></a>保号性</h3><p>若 $\lim \limits_{n \to +\infty} x_n = a &gt; 0$ （或 $<0$ ） ，则对任何 $m \in ( 0 , a )( a < 0$ 时则是 $m \in ( a , 0 )$ ，存在 $N > 0$ ，使 $n &gt; N$ 时有 $x_n &gt; M$ （相应的是 $x_n&lt;m$ ）</p><h3 id="基本运算法则"><a href="#基本运算法则" class="headerlink" title="基本运算法则"></a>基本运算法则</h3><ul><li>若 $C$ 为常数，则 $\lim \limits_{n \to + \infty} C = C$</li><li>若 $C$ 为常数，则 $\lim \limits_{n \to + \infty} \frac{C}{n} = 0$</li><li>若 $| a | &lt; 1$ ，则 $\lim \limits_{n \to +\infty} a^n = 0$</li><li>如果 $\lim \limits_{n \to +\infty} a_n = A , \lim \limits_{n \to + \infty} b_n =B$ 且 $C$ 为常数。则：</li></ul><script type="math/tex; mode=display">\begin{aligned}\\ \lim \limits_{n \to +\infty} (a_n \pm b_n) = A \pm B\\ \lim \limits_{n \to +\infty} (a_n · b_n) = A · B\end{aligned}</script><h2 id="子数列的极限"><a href="#子数列的极限" class="headerlink" title="子数列的极限"></a>子数列的极限</h2><p>对于一个数列 $\{a_n\}{n = 1}^{+ \infty}$ 的子数列 $\{a{n_k}\}{k = 1}^{+ \infty}$ ，若 $a_n \to \delta$ ，则 $a{n_k} \to \delta$</p><p>证明：</p><p>对于所有 $k$ ，有 $n_k \ge k$ ，又因为 $\forall \epsilon &gt; 0, \exists N &gt; 0, s.t. \forall n &gt; N, \mid a_n - b \mid &lt; \epsilon$</p><p>故 $\forall \epsilon &gt; 0$ ，取 $K = N$ ，有 $\forall k &gt; K, n_k \ge k &gt; K = N$ ，故 $\mid a_{n_k} - b \mid &lt; \epsilon$ ，即 $a_{n_k} \to \delta$</p><p>QED</p><h2 id="级数"><a href="#级数" class="headerlink" title="级数"></a>级数</h2><p>级数是指将数列的项依次用加号连接起来的函数，用 $OIer$ 的话来说就是数列的前缀和，即对于数列 $\{s _n\} _{n = 1}^{+ \infty}$ ，有 $s _n = \sum _{i = 1}^n a _i$ </p><h2 id="数列的和"><a href="#数列的和" class="headerlink" title="数列的和"></a>数列的和</h2><p>对于数列 $\{a _n\} _{n = 1}^{+ \infty}$ ，它的和 $\sum _{n = 1}^{+ \infty} a _n$ 有意义，当且仅当它的级数数列 $\{s _n\} _{n = 1}^{+ \infty}$ 收敛</p><p>正确性显然</p><p>这里补充一个等比数列求和公式（设公比为 $q$ ）： $(1 - q)(1 + q + q^2 + … + q^n) = 1 - q^{n + 1}$</p><h2 id="极限的线性可加性"><a href="#极限的线性可加性" class="headerlink" title="极限的线性可加性"></a>极限的线性可加性</h2><p>设 $a_n \to a, b_m \to b$ ，则 $\lim \limits _{n \to + \infty} (\alpha a_n + \beta b_n) = \alpha a + \beta b$</p><p>证明：</p><script type="math/tex; mode=display">\begin{aligned}& \mid \alpha a _n + \beta b _n - (\alpha a + \beta b) \mid \\\le & \mid \alpha \mid \mid a _n - a \mid + \mid \beta \mid \mid b _n - b \mid \\& = \mid \alpha \mid \epsilon ‘ + \mid \beta \mid \epsilon ‘\end{aligned}</script><h2 id="夹逼定理"><a href="#夹逼定理" class="headerlink" title="夹逼定理"></a>夹逼定理</h2><p>设 $a_n \le b_n \le c_n$ ，且 $\lim \limits _{n \to + \infty} a_n = \lim \limits _{n \to + \infty} c_n$ ，则 $\lim \limits _{n \to + \infty} a_n = \lim \limits _{n \to + \infty} b_n$ </p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 分析数学 </tag>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数与极限</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Math/analytical-mathematics-limits-of-functions/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Math/analytical-mathematics-limits-of-functions/</url>
      
        <content type="html"><![CDATA[<p>“一步一步向前，直到终点”</p><span id="more"></span><p>在了解函数极限之前，我们需要知道一些概念。</p><p><a href="https://dyd-true.github.io/2022/02/12/%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E9%99%90/#more">资料参考：Dyd巨佬</a></p><h2 id="拓扑空间"><a href="#拓扑空间" class="headerlink" title="拓扑空间"></a>拓扑空间</h2><h3 id="拓扑空间的邻域定义"><a href="#拓扑空间的邻域定义" class="headerlink" title="拓扑空间的邻域定义"></a>拓扑空间的邻域定义</h3><p>设 $X$ 是一个集合， $\mathfrak{U}_x$ 为其子集族，其元称为 $x$ 的<strong>邻域</strong>，令 $\mathfrak{U} = \{ \mathfrak{U}_x \}_{x \in X}$ ，则 $( X , \mathfrak{U})$ 被称为一个<strong>拓扑空间</strong>。</p><h2 id="邻域"><a href="#邻域" class="headerlink" title="邻域"></a>邻域</h2><p>邻域，是指集合上的一种基础的拓扑结构。</p><p>对于实数 $\alpha , \delta$  ：</p><p>定义数集 $\{x \in R \mid a - \delta &lt; x &lt; a + \delta\}$ 为 $a$ 以 $\delta$ 为半径的<strong>邻域</strong>，记做 $U(a, \delta)$ </p><p>定义数集 $\{x \in R \mid a - \delta &lt; x &lt; a 或 a &lt; x &lt; a + \delta\}$ 为 $a$ 以 $\delta$ 为半径的<strong>去心邻域</strong>，记做 $\mathring{U}(a, \delta)$ </p><p> 定义数集 $\{x \in R \mid a - \delta &lt; x &lt; a\}$ 为 $a$ 以 $\delta$ 为半径的<strong>去心左邻域</strong>，记做 $\mathring{U} _- (a, \delta)$ </p><p> 定义数集 $\{x \in R \mid a &lt; x &lt; a + \delta\}$ 为 $a$ 以 $\delta$ 为半径的<strong>去心右邻域</strong>，记做 $\mathring{U} _+ (a, \delta)$ </p><p>函数的左极限和右极限统称为<strong>侧边极限</strong></p><p>明显， $\lim \limits _{x \to {x _0} _+} f(x) = a$ 且 $\lim \limits _{x  \to {x _0} _-} f(x) = a$ 与 $\lim \limits _{x \to x _0} f(x) = a$ 互为充要条件</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><h3 id="唯一性"><a href="#唯一性" class="headerlink" title="唯一性"></a>唯一性</h3><p>若 $f(x) \to a(x \to r)$ 且 $f(x) \to b (x \to r)$ ，则 $a = b$</p><h3 id="局部有界"><a href="#局部有界" class="headerlink" title="局部有界"></a>局部有界</h3><p>若在某一个过程时 $f(x)$ 有极限，则存在一个时刻以后 $f(x)$ 有界。</p><p>即若极限 $\lim \limits_{x \to x_0} f(x)$ 存在，则函数 $f(x)$ 在 $x_0$ 的某一空心邻域上有界。</p><h3 id="局部保号性"><a href="#局部保号性" class="headerlink" title="局部保号性"></a>局部保号性</h3><p>若 $\lim \limits_{x \to x_0} f(x) = A$ ，且 $A &gt; 0$ ，则 $\exists \delta &gt; 0$ ，当 $x \in U^0 ( x_0 , \delta )$ 时， $ f(x)&gt;0 $ 。</p><h3 id="迫敛性"><a href="#迫敛性" class="headerlink" title="迫敛性"></a>迫敛性</h3><p>如果函数 $f(x),g(x),h(x)$ 满足：</p><ol><li>$g(x) \leq f(x) \leq h(x)$ </li><li>$\lim g(x) = A , \lim h(x) = A$ </li></ol><p>那么 $\lim f(x)$ 存在且为 $A$ 。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 分析数学 </tag>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OIP2022.03.05模拟赛</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220305/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220305/</url>
      
        <content type="html"><![CDATA[<p>“<del>提高模拟能考出省选题来</del>“</p><span id="more"></span><h2 id="题目I——最短路径-path"><a href="#题目I——最短路径-path" class="headerlink" title="题目I——最短路径(path)"></a>题目I——最短路径(path)</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一个 $N$ 个点，$M$ 条边的有向权值图，求全源最短路中每条边被经过的次数。</p><p><strong>最短路径</strong>：从 $a$ 到 $b$ 的最短路径是指一条路径当且仅当不存在另一条从 $a -&gt; b$ 的路径比该路径更短。</p><blockquote><p>意思是<strong>两点之间的最短路径不止一条</strong></p></blockquote><p>求每条边通过的最短路径的个数。取模 $10^9+7$。</p><h3 id="思路I"><a href="#思路I" class="headerlink" title="思路I"></a>思路I</h3><p>用 $Spfa$ 跑 $n$ 遍最短路，跑完之后枚举每条边，记录所有满足 $val_i+c_{i,j}=val_j$ 的边。再以此对于每一遍 $Spfa$ 跑一遍 $Topo$ 排序。</p><h3 id="思路II"><a href="#思路II" class="headerlink" title="思路II"></a>思路II</h3><p>依然是跑 $n$ 遍最短路，求出<strong>最短路径图</strong>，即只含最短路的边。用 $f_i$ 表示从 $1$ 点至 $i$ 点有多少条路径， $g_i$ 表示从 $i$ 号点往后走有多少条路径。则以 $i$ 为起点的所有最短路中，经过 $c_j(u,v)$ 边的路径条数为 $f_u*g_v$</p><h3 id="另话"><a href="#另话" class="headerlink" title="另话"></a>另话</h3><p>这道题在洛谷上是双倍经验。一道紫一道灰。<del>这样做 $NOIp$ 模拟的第一题真的好吗</del></p><h3 id="Task-One-Ac-Code"><a href="#Task-One-Ac-Code" class="headerlink" title="Task One Ac Code"></a>Task One Ac Code</h3><details>    <summary>思路I</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1501</span>,MAXM=<span class="number">5001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=x*<span class="number">10</span>+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,u,v,w;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from,to,next,val;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> First[MAXN],Total,Dist[MAXN],Que[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> Vis[MAXN],Is[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAdd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(Node)&#123;x,y,First[x],z&#125;;First[x]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underSPFA</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dist,<span class="number">0x7f7f7f7f</span>,<span class="built_in">sizeof</span>(Dist));</span><br><span class="line">    <span class="built_in">memset</span>(Is,<span class="number">0</span>,<span class="built_in">sizeof</span>(Is));</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> len;</span><br><span class="line">    Dist[Que[len=<span class="number">1</span>]=x]=<span class="number">0</span>,Vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u=Que[i];Vis[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=First[u],v;e;e=Edge[e].next)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Dist[u]+Edge[e].val&lt;Dist[v=Edge[e].to])</span><br><span class="line">&#123;</span><br><span class="line">    Dist[v]=Dist[u]+Edge[e].val;</span><br><span class="line">    <span class="keyword">if</span>(!Vis[v]) Vis[Que[++len]=v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Dist[Edge[i].from]+Edge[i].val==Dist[Edge[i].to])</span><br><span class="line">&#123;</span><br><span class="line">    Is[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Deg[MAXN],Cnt[<span class="number">3</span>][MAXN],Ord[MAXN],len,Ans[MAXM];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underTopo</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>()) Q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">memset</span>(Deg,<span class="number">0</span>,<span class="built_in">sizeof</span>(Deg));</span><br><span class="line">    <span class="built_in">memset</span>(Cnt,<span class="number">0</span>,<span class="built_in">sizeof</span>(Cnt));</span><br><span class="line">    len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) <span class="keyword">if</span>(Is[i]) ++Deg[Edge[i].to];</span><br><span class="line">    Q.<span class="built_in">push</span>(s); Cnt[<span class="number">1</span>][s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">    Ord[++len]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=First[u];e;e=Edge[e].next)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!Is[e]) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">    Cnt[<span class="number">1</span>][v]=(Cnt[<span class="number">1</span>][v]+Cnt[<span class="number">1</span>][u])%Mod;</span><br><span class="line">    <span class="keyword">if</span>(--Deg[v]==<span class="number">0</span>) Q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=len;j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x=Ord[j];++Cnt[<span class="number">2</span>][x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=First[x];e;e=Edge[e].next)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!Is[e]) <span class="keyword">continue</span>;</span><br><span class="line">    Cnt[<span class="number">2</span>][x]=(Cnt[<span class="number">2</span>][x]+Cnt[<span class="number">2</span>][Edge[e].to])%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;path.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;path.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">    <span class="built_in">underAdd</span>(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">underSPFA</span>(i);<span class="built_in">underTopo</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;++j)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Is[j]) Ans[j]=(Ans[j]+<span class="number">1ll</span>*Cnt[<span class="number">1</span>][Edge[j].from]*Cnt[<span class="number">2</span>][Edge[j].to]%Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 4</span></span><br><span class="line"><span class="comment">1 2 5</span></span><br><span class="line"><span class="comment">2 3 5</span></span><br><span class="line"><span class="comment">3 4 5</span></span><br><span class="line"><span class="comment">1 4 8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><details>    <summary>思路II</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y, w, next, ans;</span><br><span class="line">    <span class="type">bool</span> flag;</span><br><span class="line">&#125; map[<span class="number">5101</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, st, ed;</span><br><span class="line"><span class="type">int</span> d[<span class="number">1510</span>], r[<span class="number">1510</span>], dis[<span class="number">1510</span>], f[<span class="number">1510</span>], g[<span class="number">1510</span>], head[<span class="number">1510</span>];</span><br><span class="line"><span class="type">bool</span> flag[<span class="number">1510</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dis[a] &lt; dis[b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> w, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    map[c].x = x;</span><br><span class="line">    map[c].y = y;</span><br><span class="line">    map[c].w = w;</span><br><span class="line">    map[c].ans = <span class="number">0</span>;</span><br><span class="line">    map[c].next = head[x];</span><br><span class="line">    head[x] = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;path.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;path.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);</span><br><span class="line">        x --; y --;</span><br><span class="line">        <span class="built_in">add_edge</span>(x, y, w, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) r[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> start=<span class="number">0</span>; start&lt;n; start++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) dis[i] = <span class="number">99999999</span>;</span><br><span class="line">        dis[start] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) flag[i] = <span class="literal">true</span>;</span><br><span class="line">        flag[start] = <span class="literal">false</span>;</span><br><span class="line">        st = ed = <span class="number">0</span>;</span><br><span class="line">        d[ed++] = start;</span><br><span class="line">        <span class="keyword">while</span> (st &lt; ed) &#123;</span><br><span class="line">            <span class="type">int</span> i = d[(st++) % n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=head[i]; j&gt;<span class="number">-1</span>; j=map[j].next)</span><br><span class="line">                <span class="keyword">if</span> (dis[i] + map[j].w &lt; dis[map[j].y]) &#123;</span><br><span class="line">                    dis[map[j].y] = dis[i] + map[j].w;</span><br><span class="line">                    <span class="keyword">if</span> (flag[map[j].y]) &#123;</span><br><span class="line">                        flag[map[j].y] = <span class="literal">false</span>;</span><br><span class="line">                        d[(ed++) % n] = map[j].y;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            flag[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int i=0; i&lt;n; i++)</span></span><br><span class="line">        <span class="comment">//    printf(&quot;%d--&gt;%d: %d\n&quot;, start, i, dis[i]);</span></span><br><span class="line">        <span class="comment">//printf(&quot;start: %d\n&quot;, start);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">            <span class="keyword">if</span> (dis[map[i].x] + map[i].w == dis[map[i].y]) &#123;</span><br><span class="line">                map[i].flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//        printf(&quot;%d--&gt;%d(%d)  &quot;, map[i].x, map[i].y, map[i].w);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                map[i].flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">        <span class="built_in">sort</span>(r, r+n, cmp);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) f[i] = <span class="number">0</span>;</span><br><span class="line">        f[start] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=head[r[i]]; j&gt;<span class="number">-1</span>; j=map[j].next)</span><br><span class="line">                <span class="keyword">if</span> (map[j].flag)</span><br><span class="line">                    f[map[j].y] = (f[map[j].y] + f[r[i]]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int i=0; i&lt;n; i++)</span></span><br><span class="line">        <span class="comment">//    printf(&quot;f[%d]=%d  &quot;, i, f[i]);</span></span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=n<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">            g[r[i]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=head[r[i]]; j&gt;<span class="number">-1</span>; j=map[j].next)</span><br><span class="line">                <span class="keyword">if</span> (map[j].flag)</span><br><span class="line">                    g[r[i]] = (g[r[i]] + g[map[j].y]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int i=0; i&lt;n; i++)</span></span><br><span class="line">        <span class="comment">//    printf(&quot;g[%d]=%d  &quot;, i, g[i]);</span></span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">            <span class="keyword">if</span> (map[i].flag) &#123;</span><br><span class="line">                <span class="comment">//printf(&quot;%d--&gt;%d  &quot;, map[i].x, map[i].y);</span></span><br><span class="line">                map[i].ans = (map[i].ans + g[map[i].y] * (<span class="type">long</span> <span class="type">long</span>)(f[map[i].x])) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, map[i].ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="题目II——数列-seq"><a href="#题目II——数列-seq" class="headerlink" title="题目II——数列(seq)"></a>题目II——数列(seq)</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>对于一个长度为 $n$ 的数列，有 $m$ 个询问：</p><ol><li>$C\ i\ x$ 表示将下标为 $i$ 的数改为 $x$</li><li>$Q\ i$ 求满足 $\forall i \leq k \leq j,A_k \leq \max\{A_i,A_j\}$ 中 $j$ 的个数</li></ol><p>复杂度不大于 $O(n \log n)$</p><h3 id="题意思路"><a href="#题意思路" class="headerlink" title="题意思路"></a>题意思路</h3><p>根据其查询，我们需要找到所有的“谷段”，即如果我们将整个数列看作一个波峰图，如下图所示：</p><p><img src="https://violeteternal.github.io/blog/post-images/1646537618216.png" alt=""></p><p>那么我们就需要找到所有类似于开口向上的二次函数的个数。不难发现：当我们第一次找到 $A_p \leq A_j$ 时，$p$ 到 $j$ 之间的任意位置都是满足要求的。</p><p>然而，当第一次：</p><blockquote><p>当 $A_p = A_j$ 时，对于 $j$ 之后下一个满足要求的位置 $k$ 时，$j$ 与 $k$ 之间的任意位置也是可以取的。</p><p>而当 $A_p &lt; A_j$ 时，对于 $j$ 之后下一个满足要求的位置 $k$ 时，就仅仅只能取 $k$ 位置了。</p></blockquote><p>其缘由读者可自行思考。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p><del>又是线段树打爆的一天</del></p><p>使用一种类似分块但胜似分块的神奇思路。</p><p>将整个数列分成 $\sqrt n$ 段：</p><ol><li>对于每一段，维护其向左向右的递增序列；</li><li>对于相邻的段，维护其向左向右的递增序列。</li></ol><p><del>虽然我觉得这题解类似没写又胜似没写</del></p><p>用 $L_i$ 存储第 $i$ 段的左坐标，$R_i$ 存储第 $i$ 段的右坐标。数组 $Bel_i$ 存储 $i$ 位置所属的段编号。</p><h4 id="初始化-修改操作"><a href="#初始化-修改操作" class="headerlink" title="初始化/修改操作"></a>初始化/修改操作</h4><p>对于每一段都有一个数 $top$ 和一个数组 $st_i$ 。$st$ 数组存储的是该区间内的最长不下降子序列，而 $top$ 则是 $st$ 数组的长度。然后求就完事儿了，复杂度 $O(\sqrt n)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> st[],<span class="type">int</span> &amp;top)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;=l;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(top&amp;&amp;Num[st[top]]&lt;Num[i]) --top;</span><br><span class="line">st[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><p>暴力求本区间，复杂度 $O(\sqrt n )$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> bl=Bel[p],Max=Num[p];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=p+<span class="number">1</span>;i&lt;=R[bl];++i)</span><br><span class="line">&#123;</span><br><span class="line">    Max=<span class="built_in">underMax</span>(Max,Num[i]);</span><br><span class="line">    <span class="keyword">if</span>(Max&lt;=<span class="built_in">underMax</span>(Num[p],Num[i])) ++ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记查询点为 $p$ ,则对于 $Bel_p+1$ 到 $Bel_n$ 的区间操作为：</p><p>二分该区间的 $st$ 数组，找到第一个 $l$ 位置满足 $A_p \leq A_l$ ，如果当前 $Max$ 与 $A_p$ 是相等的，则可以计算该区间 $l$ 之前的任意位置；反之，计算 $l$ 之后的个数和（不比 $A_p$ 小的个数），当然，$Max=A_p$ 时也要计算该区间。</p><p>然后更改 $Max$ 值，查找下一区间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=bl+<span class="number">1</span>;i&lt;=num;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=Top[i];</span><br><span class="line">    <span class="keyword">if</span>(Max==Num[p])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Num[St[i][mid]]&gt;Max) l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="number">0</span>) ans+=R[i]-L[i]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans+=St[i][l]<span class="number">-1</span>-L[i]+<span class="number">1</span>;</span><br><span class="line">            ans+=l<span class="number">-1</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Num[St[i][mid]]&gt;=Max) l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=l<span class="number">-1</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Max=<span class="built_in">underMax</span>(Max,Num[St[i][<span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure><h3 id="另话-1"><a href="#另话-1" class="headerlink" title="另话"></a>另话</h3><p>这道题题意很简单，主要原因还是时间复杂度的问题。我使用线段树二分查找的复杂度不稳定，<del>所以很氢凇被卡了</del></p><h3 id="Task-Two-Ac-Code"><a href="#Task-Two-Ac-Code" class="headerlink" title="Task Two Ac Code"></a>Task Two Ac Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">50001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">101</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXB=<span class="number">1001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Num[MAXN],Qi,Qx;</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="type">int</span> Bel[MAXN],L[MAXM],R[MAXM],St[MAXM][MAXB],Top[MAXM];</span><br><span class="line"><span class="comment">/*struct SegmentTree</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int l,r,dat;</span></span><br><span class="line"><span class="comment">&#125;Tree[MAXN&lt;&lt;2];*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underMax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a&gt;b?a:b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underMin</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a&lt;b?a:b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*inline void underPushUp(int p)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Tree[p].dat=underMax(Tree[p&lt;&lt;1].dat,Tree[p&lt;&lt;1|1].dat);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline bool underCheck(int p)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(Tree[p].dat==Num[Tree[p].l]||Tree[p].dat==Num[Tree[p].r]) return 1;</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underBuild(int p,int l,int r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Tree[p].l=l,Tree[p].r=r;</span></span><br><span class="line"><span class="comment">if(l==r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Tree[p].dat=Num[l];</span></span><br><span class="line"><span class="comment">return ;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int mid=(l+r)&gt;&gt;1;</span></span><br><span class="line"><span class="comment">underBuild(p&lt;&lt;1,l,mid),underBuild(p&lt;&lt;1|1,mid+1,r);</span></span><br><span class="line"><span class="comment">underPushUp(p);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underModify(int p,int d,int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(Tree[p].l==d&amp;&amp;Tree[p].r==d)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Tree[p].dat=x;</span></span><br><span class="line"><span class="comment">return ;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int mid=(Tree[p].l+Tree[p].r)&gt;&gt;1;</span></span><br><span class="line"><span class="comment">if(d&lt;=mid) underModify(p&lt;&lt;1,d,x);</span></span><br><span class="line"><span class="comment">if(mid&lt;d) underModify(p&lt;&lt;1|1,d,x);</span></span><br><span class="line"><span class="comment">underPushUp(p);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline int underQueryMax(int p,int l,int r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r) return Tree[p].dat;</span></span><br><span class="line"><span class="comment">int mid=(Tree[p].l+Tree[p].r)&gt;&gt;1;</span></span><br><span class="line"><span class="comment">int val=-INF;</span></span><br><span class="line"><span class="comment">if(l&lt;=mid) val=underMax(val,underQueryMax(p&lt;&lt;1,l,r));</span></span><br><span class="line"><span class="comment">if(mid&lt;r) val=underMax(val,underQueryMax(p&lt;&lt;1|1,l,r));</span></span><br><span class="line"><span class="comment">return val;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underNeverGonnaGiveYouUp()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">for(int i=1;i&lt;=M;++i)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">scanf(&quot;%c&quot;,&amp;op);</span></span><br><span class="line"><span class="comment">if(op==&#x27;Q&#x27;)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">underRead(Qi);</span></span><br><span class="line"><span class="comment">int Ans=0,Maxn=Num[Qi];</span></span><br><span class="line"><span class="comment">for(int j=Qi+1;j&lt;=N;++j)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Maxn=underMax(Maxn,Num[j]);</span></span><br><span class="line"><span class="comment">if(Maxn&lt;=Num[Qi]||Maxn&lt;=Num[j]) ++Ans;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf(&quot;%d\n&quot;,Ans);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">underRead(Qi),underRead(Qx);</span></span><br><span class="line"><span class="comment">Num[Qi]=Qx;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">exit(0);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline int underExpr(int p,int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(x==N) return 0;</span></span><br><span class="line"><span class="comment">if(underQueryMax(1,x+1,N)&lt;Num[x])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(p&gt;1) return 0;</span></span><br><span class="line"><span class="comment">else return N-x;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int l=x+1,r=N;</span></span><br><span class="line"><span class="comment">while(l&lt;r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int mid=(l+r)&gt;&gt;1;</span></span><br><span class="line"><span class="comment">int val=underQueryMax(1,x+1,mid);</span></span><br><span class="line"><span class="comment">if(val&lt;Num[x]) l=mid+1;</span></span><br><span class="line"><span class="comment">else r=mid;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;[%d,%d] &quot;,x,l);</span></span><br><span class="line"><span class="comment">if(p&gt;1) return 1+underExpr(p,l);</span></span><br><span class="line"><span class="comment">else if(Num[l]==Num[x]) return l-x+underExpr(p,l);</span></span><br><span class="line"><span class="comment">else return l-x+underExpr(p+1,l);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> st[],<span class="type">int</span> &amp;top)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;=l;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(top&amp;&amp;Num[st[top]]&lt;Num[i]) --top;</span><br><span class="line">st[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQuery</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> bl=Bel[p],Max=Num[p];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=p+<span class="number">1</span>;i&lt;=R[bl];++i)</span><br><span class="line">&#123;</span><br><span class="line">Max=<span class="built_in">underMax</span>(Max,Num[i]);</span><br><span class="line"><span class="keyword">if</span>(Max&lt;=<span class="built_in">underMax</span>(Num[p],Num[i])) ++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=bl+<span class="number">1</span>;i&lt;=num;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=Top[i];</span><br><span class="line"><span class="keyword">if</span>(Max==Num[p])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(Num[St[i][mid]]&gt;Max) l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">0</span>) ans+=R[i]-L[i]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans+=St[i][l]<span class="number">-1</span>-L[i]+<span class="number">1</span>;</span><br><span class="line">ans+=l<span class="number">-1</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(Num[St[i][mid]]&gt;=Max) l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=l<span class="number">-1</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Max=<span class="built_in">underMax</span>(Max,Num[St[i][<span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;seq.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;seq.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line"><span class="type">int</span> siz=<span class="built_in">sqrt</span>(N*<span class="built_in">log2</span>(N)),num=(N+siz<span class="number">-1</span>)/siz;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Num[i]),Bel[i]=(i+siz<span class="number">-1</span>)/siz;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)</span><br><span class="line">&#123;</span><br><span class="line">L[i]=R[i<span class="number">-1</span>]+<span class="number">1</span>,R[i]=<span class="built_in">underMin</span>(i*siz,N);</span><br><span class="line"><span class="built_in">underModify</span>(L[i],R[i],St[i],Top[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if(N&lt;=5000) underNeverGonnaGiveYouUp();</span></span><br><span class="line">    <span class="comment">/*underBuild(1,1,N);*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> T=<span class="number">1</span>;T&lt;=M;++T)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;op;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Qi);</span><br><span class="line"><span class="comment">/*if(underQueryMax(1,Qi,N)==Num[Qi]) printf(&quot;%d\n&quot;,N-Qi);</span></span><br><span class="line"><span class="comment">else if(Tree[1].dat==Num[Qi])printf(&quot;%d\n&quot;,N-Qi);</span></span><br><span class="line"><span class="comment">else printf(&quot;%d\n&quot;,underExpr(1,Qi));</span></span><br><span class="line"><span class="comment">printf(&quot;%d\n&quot;,underQuery(1,Qi-1,Qi+1));*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underQuery</span>(Qi,num));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;Qi,&amp;Qx);</span><br><span class="line">Num[Qi]=Qx;</span><br><span class="line"><span class="type">int</span> bl=Bel[Qi];</span><br><span class="line"><span class="built_in">underModify</span>(L[bl],R[bl],St[bl],Top[bl]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 3</span></span><br><span class="line"><span class="comment">1 3 2 3 2</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 1 3</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">10 12</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 1 10</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 2 11</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 3 11</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 4 10</span></span><br><span class="line"><span class="comment">C 5 11</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 1 11</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1 5 3 6 3 3 6</span></span><br><span class="line"><span class="comment">st[1]=6 top=1 i=7</span></span><br><span class="line"><span class="comment">st[2]=6,3 top=2 i=6</span></span><br><span class="line"><span class="comment">st[3]=6,3,3 top=3 i=5</span></span><br><span class="line"><span class="comment">st[2]=6,6 top=2 i=4</span></span><br><span class="line"><span class="comment">st[3]=6,6,3 top=3 i=3</span></span><br><span class="line"><span class="comment">st[3]=6,6,5 top=3 i=2</span></span><br><span class="line"><span class="comment">st[4]=6,6,5,1 top=4 i=1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> RMQ </tag>
            
            <tag> 数论 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 图论 </tag>
            
            <tag> SPFA </tag>
            
            <tag> 二分 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 面积并 </tag>
            
            <tag> 几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF19B Checkout Assistant</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/cf19b/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/cf19b/</url>
      
        <content type="html"><![CDATA[<p>$01$ 背包变形<br><span id="more"></span><br><a href="https://www.luogu.com.cn/problem/CF19B">题目传送门</a></p><p><del>虽然我也不知道为什么被卡了反正就是听取WA声一片</del></p><p>扫描第$i$件物品能够得到$t_i+1$件物品，则将题目转化为：</p><p>一共有$n$件物品，第$i$件物品的体积为$t_i+1$，价值为$c_i$。</p><p>$AC\ Code$：</p><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">2005</span>,N=<span class="number">4005</span>;</span><br><span class="line"><span class="type">int</span> n,t[M],v;</span><br><span class="line">ll c[M],dp[N],ans=<span class="number">2e12</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>,&amp;t[i],&amp;c[i]);</span><br><span class="line">t[i]++;</span><br><span class="line">v=<span class="built_in">max</span>(v,t[i]);</span><br><span class="line">&#125;</span><br><span class="line">v+=n;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0x7f</span>,<span class="built_in">sizeof</span>(dp));dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=v;j&gt;=t[i];j--)</span><br><span class="line">dp[j]=<span class="built_in">min</span>(dp[j],dp[j-t[i]]+c[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&lt;=v;i++)</span><br><span class="line">ans=<span class="built_in">min</span>(ans,dp[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ST表（Sparse Table，稀疏表）</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/sparse-table/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/sparse-table/</url>
      
        <content type="html"><![CDATA[<p>“聚二为一”</p><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>$ST$ 表是一种用来求 $RMQ$ ，即区间最值问题的数据结构。其速度极快，可以做到 $O(n \log n)$ 的预处理以及 $O(1)$ 的查询时，且可以在线查询。</p><p>$ST$ 表运用到了倍增的思想，将整个数列存储在一个二维数组 $f$ 中。其中：</p><blockquote><p>$f_{i,j}$ 表示区间 $[f_{i,j},f_{i,i+2^j-1}]$ 的最值。</p></blockquote><p>而查询的思路便是将区间分成左右两部分并取出两部分的最值。</p><p>对于区间 $[l,r]$ 的最大值，则是 $\max\{f_{l,k},f_{r-k+1,k}\}$，其中 $k$ 表示 $\log(r-l+1)$ 。</p><p>初始状态： $f_{i,0}=a_i$ ，然后外层遍历 $i$ ，内层遍历 $j$ 处理 $f$ 即可。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://www.luogu.com.cn/problem/P3865">【模板】ST表</a></p><p>区间最大值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,a[<span class="number">100001</span>],f[<span class="number">100001</span>][<span class="number">64</span>],k[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underGet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) k[i]=<span class="built_in">log2</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i][<span class="number">0</span>]=a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&lt;=n;++j)</span><br><span class="line">f[j][i]=<span class="built_in">underMax</span>(f[j][i<span class="number">-1</span>],f[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;st.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;st.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">underRead</span>(n),<span class="built_in">underRead</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">underRead</span>(a[i]);</span><br><span class="line"><span class="built_in">underGet</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l,r;m;--m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">underRead</span>(l),<span class="built_in">underRead</span>(r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underMax</span>(f[l][k[r-l+<span class="number">1</span>]],f[r-(<span class="number">1</span>&lt;&lt;(k[r-l+<span class="number">1</span>]))+<span class="number">1</span>][k[r-l+<span class="number">1</span>]]));</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8 8</span></span><br><span class="line"><span class="comment">9 3 1 7 5 6 0 8</span></span><br><span class="line"><span class="comment">1 6</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">2 7</span></span><br><span class="line"><span class="comment">2 6</span></span><br><span class="line"><span class="comment">1 8</span></span><br><span class="line"><span class="comment">4 8</span></span><br><span class="line"><span class="comment">3 7</span></span><br><span class="line"><span class="comment">1 8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><a href="https://www.luogu.com.cn/problem/P2251">P2251 质量检测</a></p><p><a href="https://www.luogu.com.cn/problem/P1816">P1816 忠诚</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMQ </tag>
            
            <tag> ST表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扫描线</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/scan-line/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/scan-line/</url>
      
        <content type="html"><![CDATA[<p>“地毯式搜索”</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P5490">P5490 扫描线</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用线段树维护一个横区间内所有的矩形个数，对于每个不为 $0$ 的区间则计算答案。</p><p>因为坐标过大，所以线段树维护的是离散化之后的坐标。</p><p>在扫描线算法中，我们总共需要两次排序：将端点的横坐标排序和横线的纵坐标排序。在进行排序之后，我们还需要将端点横坐标离散化和去重，用 $STL$ 的 $unique$ 函数就可以了。</p><p>最后，扫描横边，查询每一个横边所在区间的竖边即可。</p><p><a href="https://2745518585.github.io/post/Scan%20line/">参考资料：赵悦岑’s blog’</a></p><h2 id="AC-Code："><a href="#AC-Code：" class="headerlink" title="AC Code："></a>AC Code：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,dat;</span><br><span class="line">    ll tag;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sort_Str</span></span><br><span class="line">&#123;</span><br><span class="line">    ll l,r,dat;</span><br><span class="line">    <span class="type">int</span> tag;</span><br><span class="line">&#125;Num[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll b[MAXN&lt;&lt;<span class="number">4</span>],l1,l2,r1,r2;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">underCmp</span><span class="params">(Sort_Str a,Sort_Str b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dat&lt;b.dat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].dat) Tree[p].tag=b[Tree[p].r+<span class="number">1</span>]-b[Tree[p].l];</span><br><span class="line">    <span class="keyword">else</span> Tree[p].tag=Tree[p&lt;&lt;<span class="number">1</span>].tag+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underBuild</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l,Tree[p].r=r,Tree[p].tag=Tree[p].dat=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAdd</span><span class="params">(<span class="type">int</span> p,ll l,ll r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b[Tree[p].l]&gt;=r||b[Tree[p].r+<span class="number">1</span>]&lt;=l) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(b[Tree[p].l]&gt;=l&amp;&amp;b[Tree[p].r+<span class="number">1</span>]&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].dat+=k;</span><br><span class="line">        <span class="built_in">underPushUp</span>(p);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underAdd</span>(p&lt;&lt;<span class="number">1</span>,l,r,k),<span class="built_in">underAdd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">    <span class="built_in">underPushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;segmenttree.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;segmenttree.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>,&amp;l1,&amp;r1,&amp;l2,&amp;r2);</span><br><span class="line">        Num[(i&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>]=(Sort_Str)&#123;l1,l2,r1,<span class="number">1</span>&#125;;</span><br><span class="line">        Num[i&lt;&lt;<span class="number">1</span>]=(Sort_Str)&#123;l1,l2,r2,<span class="number">-1</span>&#125;;</span><br><span class="line">        b[(i&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>]=l1,b[i&lt;&lt;<span class="number">1</span>]=l2;</span><br><span class="line">    &#125;</span><br><span class="line">    n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(Num+<span class="number">1</span>,Num+<span class="number">1</span>+n,underCmp);</span><br><span class="line">    <span class="built_in">sort</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line">    m=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-(b+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">underBuild</span>(<span class="number">1</span>,<span class="number">1</span>,m<span class="number">-1</span>);</span><br><span class="line">    ll s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underAdd</span>(<span class="number">1</span>,Num[i].l,Num[i].r,Num[i].tag);</span><br><span class="line">        s+=Tree[<span class="number">1</span>].tag*(Num[i+<span class="number">1</span>].dat-Num[i].dat);</span><br><span class="line">        <span class="comment">// printf(&quot;%d %d\n&quot;,Tree[1].tag,(Num[i+1].dat-Num[i].dat));</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">100 100 200 200</span></span><br><span class="line"><span class="comment">150 150 250 255</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散化 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 面积并 </tag>
            
            <tag> 几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列优化Dp</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-of-monotonous-queue/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-of-monotonous-queue/</url>
      
        <content type="html"><![CDATA[<p>“我永远对你保有最诚挚的热情。”</p><span id="more"></span><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><p>单调队列是一种<strong>队列内的元素有单调性</strong>（递增或递减）的队列。答案（最优解）存在队首。一般用于维护区间最值或者降低 $Dp$ 数组的维度来减少空间及时间的目的。</p><details>    <summary>单调队列的作用</summary>    1. 维护区间最值 <Br />    2. 优化 DP</details><hr><p>单调队列在队首和队尾都可以进行<strong>出队操作</strong>，但只有队尾可以进行<strong>入队</strong>操作。这样的操作类似于双端队列（$deque$）允许双端弹出。但一般来说，还是不建议使用 $STL$ 库，手写方便且比较节省时间。</p><p>总的来说，单调队列的实现有三步：</p><ol><li>将 $head$ 之前所有已在区间之外的答案删掉（ $++head$ ）</li><li>更新答案为 $Queue[head]$</li><li>将尾部的非最优答案排除（ $—tail$ ），并入队最新答案。</li></ol><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><p><a href="https://www.luogu.com.cn/problem/P1886">【模板】单调队列/滑动窗口</a></p><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>求出区间最大值和最小值，因为复杂度限制 $O(n \log n)$ 所以无法暴力。就使用单调队列的优化。</p><h4 id="AC-Code："><a href="#AC-Code：" class="headerlink" title="AC Code："></a>AC Code：</h4><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">int</span> N,K,A[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> Q[<span class="number">10000001</span>];</span><br><span class="line"><span class="type">int</span> P[<span class="number">10000001</span>],head,tail;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">head=<span class="number">1</span>;</span><br><span class="line">tail=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(head&lt;=tail&amp;&amp;Q[tail]&lt;=A[i])</span><br><span class="line">&#123;</span><br><span class="line">tail--;</span><br><span class="line">&#125;</span><br><span class="line">Q[++tail]=A[i];</span><br><span class="line">P[tail]=i;</span><br><span class="line"><span class="keyword">while</span>(P[head]&lt;=i-K)</span><br><span class="line">&#123;</span><br><span class="line">head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=K)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Q[head]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">head=<span class="number">1</span>;</span><br><span class="line">tail=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(head&lt;=tail&amp;&amp;Q[tail]&gt;=A[i])</span><br><span class="line">&#123;</span><br><span class="line">tail--;</span><br><span class="line">&#125;</span><br><span class="line">Q[++tail]=A[i];</span><br><span class="line">P[tail]=i;</span><br><span class="line"><span class="keyword">while</span>(P[head]&lt;=i-K)</span><br><span class="line">&#123;</span><br><span class="line">head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=K)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Q[head]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;K);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">underMin</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">underMax</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8 3</span></span><br><span class="line"><span class="comment">1 3 -1 -3 5 3 6 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="单调队列优化多重背包"><a href="#单调队列优化多重背包" class="headerlink" title="单调队列优化多重背包"></a>单调队列优化多重背包</h3><p><a href="https://2745518585.github.io/post/Monotone%20queue%20Knapsack/">巨佬的讲解</a></p><p><a href="https://www.acwing.com/problem/content/6/">Acwing 6 多重背包III</a></p><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">int</span> n,V;</span><br><span class="line"><span class="type">int</span> v,w,s;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">20001</span>],pre[<span class="number">20001</span>],q[<span class="number">20001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;V);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(pre, dp, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">        <span class="type">int</span> v, w, s;</span><br><span class="line">        cin &gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;v;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> head=<span class="number">0</span>, tail=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k=j;k&lt;=V;k+=v)</span><br><span class="line">            &#123;</span><br><span class="line">                        <span class="keyword">if</span> (head&lt;=tail&amp;&amp;k-s*v&gt;q[head]) ++head;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;=tail&amp;&amp;pre[q[tail]]-(q[tail]-j)/v*w&lt;=pre[k]-(k-j)/v*w) --tail;</span><br><span class="line">            <span class="keyword">if</span> (head&lt;=tail) dp[k]=<span class="built_in">max</span>(dp[k],pre[q[head]]+(k-q[head])/v*w);</span><br><span class="line">            q[++tail]=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[V]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></details><h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h3><p><a href="https://www.luogu.com.cn/problem/P2216">P2216 [HAOI2007]理想的正方形</a></p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>二维的滑动窗口，也就那样做就对了。</p><h4 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h4><details>    <summary>查看代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),tail=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) tail|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(tail) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,K;</span><br><span class="line"><span class="type">int</span> val[MAXN][MAXN],Row_max[MAXN][MAXN],Row_min[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> Que[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_min</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> b[],<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Que,<span class="number">0</span>,<span class="built_in">sizeof</span>(Que));</span><br><span class="line">    <span class="type">int</span> head=<span class="number">0</span>,tail=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(head&lt;=tail&amp;&amp;Que[head]&lt;=i-K) ++head;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;=tail&amp;&amp;a[Que[tail]]&gt;=a[i]) --tail;</span><br><span class="line">        Que[++tail]=i;</span><br><span class="line">        b[i]=a[Que[head]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> b[],<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Que,<span class="number">0</span>,<span class="built_in">sizeof</span>(Que));</span><br><span class="line">    <span class="type">int</span> head=<span class="number">0</span>,tail=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(head&lt;=tail&amp;&amp;Que[head]&lt;=i-K) ++head;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;=tail&amp;&amp;a[Que[tail]]&lt;=a[i]) --tail;</span><br><span class="line">        Que[++tail]=i;</span><br><span class="line">        b[i]=a[Que[head]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-deque.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-deque.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N,M,K);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;++j)</span><br><span class="line">            <span class="built_in">read</span>(val[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">get_min</span>(val[i],Row_min[i],M);</span><br><span class="line">        <span class="built_in">get_max</span>(val[i],Row_max[i],M);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=INF;</span><br><span class="line">    <span class="type">int</span> a[MAXN],b[MAXN],c[MAXN];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=K;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j) a[j]=Row_min[j][i];</span><br><span class="line">        <span class="built_in">get_min</span>(a,b,N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;++j) a[j]=Row_max[j][i];</span><br><span class="line">        <span class="built_in">get_max</span>(a,c,N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=K;j&lt;=N;++j) res=<span class="built_in">min</span>(res,c[j]-b[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 4 2</span></span><br><span class="line"><span class="comment">1 2 5 6</span></span><br><span class="line"><span class="comment">0 17 16 0</span></span><br><span class="line"><span class="comment">16 17 2 1</span></span><br><span class="line"><span class="comment">2 10 2 1</span></span><br><span class="line"><span class="comment">1 2 2 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><a href="https://www.luogu.com.cn/problem/P1440">P1440 求m区间内的最小值</a></p><p><a href="https://www.luogu.com.cn/problem/P2032">P2032 扫描</a></p><p><a href="https://www.luogu.com.cn/problem/P1725">P1725 琪露诺</a></p><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>同样的，表示一个栈 $S$ 中的元素满足单调递增或者单调递减的性质，可以用来维护 <code>RMQ</code> 问题。</p><p>栈是一种<strong>先进后出、后进先出</strong>的数据结构，栈和队列应该是最简单的两种数据结构了，其原理与实现非常简单。<strong>单调栈中的元素是严格单调递增或者递减的</strong>，也就是说：<strong>从栈底到栈顶，元素的值逐渐增大或者减小</strong>。虽然单调栈的性质很简单，但是其用处很大，可以<strong>用于求解元素的左右大小边界问题</strong>。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://www.luogu.com.cn/problem/P5788">单调栈模板</a></p><p>对于查询后继的题，具有后效性，对我而言不太好处理；所以我们考虑倒序枚举。将问题转化为查找前继中第一个比该数大的下标，以样例为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 4 2 3 5</span><br></pre></td></tr></table></figure><p>建立一个单调递减的栈 $S$ ，接下来我们来手动模拟：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入 5 </span><br><span class="line">栈为空，则 dp[5]=0 ，将 5 入栈，当前栈为 5 。</span><br><span class="line">输入 3</span><br><span class="line">栈数为 1 ，有 5&gt;3 ，则 dp[4]=5 ，入栈 3 ，当前栈为 5 3</span><br><span class="line">输入 2</span><br><span class="line">栈数为 2 ，有 3&gt;2 ，则 dp[3]=4 ，入栈 2 ，当前栈为 5 3 2</span><br><span class="line">输入 4</span><br><span class="line">栈数为 3 ，有 2&lt;4 ，维护单减性，出栈 2 ，同样出栈 3 ，更新答案为 dp[2]=5 ，入栈 4 ，当前栈为 5 4</span><br><span class="line">输入 1</span><br><span class="line">栈数为 2 ，有 4&gt;1 ，则 dp[1]=2 ，入栈 1 ，当前栈为 5 4 1</span><br><span class="line">结束，答案为 2 5 4 5 0</span><br></pre></td></tr></table></figure><p>一些小问题：</p><ol><li>关于栈空的处理，如果是使用 $STL$ 的话，要先判是否为空，否则会 $RE$ 。且对于栈空的情况，有些题目是需要特判的。</li><li>关于取不取等的情况，视题目而定，就这道题而言，因为我们查找的是最近的一个，所以对于有 $a_i=a_j,i&lt;j$ 的话，肯定有 $i$ 答案是更优的，所以在此题，相等情况下是需要出栈的。</li></ol><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">3e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,x[MAXN],Stk[MAXN&lt;&lt;<span class="number">1</span>],Top,dp[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;stack-monotonous.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;stack-monotonous.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(x[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=N;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(Top&amp;&amp;x[Stk[Top]]&lt;=x[i]) --Top;</span><br><span class="line">        <span class="keyword">if</span>(!Top) dp[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> dp[i]=Stk[Top];</span><br><span class="line">        Stk[++Top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dp[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 4 2 3 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><h3 id="巩固"><a href="#巩固" class="headerlink" title="巩固"></a>巩固</h3><p><a href="https://www.luogu.com.cn/problem/P6510">P6510 奶牛排队</a></p><p>考虑枚举右端点 $B$。根据题意，因为左端点 $A$ 一定是最矮的，所以 $A$ 一定是当前序列（从 $1$ 到 $B$）的后缀最小值所在的位置。</p><p>因为 $B$ 一定是最高的，所以 $A$ 到 $B$ 之间不能有任何元素比 $B$ 高，因此 $A$ 的右侧一定只有 $B$ 一个位置可以作为当前序列的后缀最大值。换句话说，我们要找到从后向前数第二个后缀最大值的位置 $k$，$A$ 一定在该位置的右侧。并且只要 $A$ 在 $k$ 右侧且 $A$ 是当前序列的后缀最小值，那么 $A$ 就是一个合法的左端点。</p><p>考虑用单调栈来维护当前序列的后缀最大最小值，每次新枚举到一个 $B$ 时，先不将新位置入栈，此时的最大值栈顶就是第二个后缀最大值的位置。而维护后缀最小值的单调栈中的下标也是单调的，因此直接在最小值栈上二分即可找到最靠左的对应 $A$ 的位置。更新答案即可。时间复杂度 $\mathcal O(n \log n)$。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,x[MAXN],dp[MAXN];</span><br><span class="line"><span class="type">int</span> Stk[<span class="number">2</span>][MAXN&lt;&lt;<span class="number">1</span>],Top[<span class="number">2</span>],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-mono.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-mono.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x[i]);</span><br><span class="line">        <span class="keyword">while</span>(Top[<span class="number">0</span>]&amp;&amp;x[Stk[<span class="number">0</span>][Top[<span class="number">0</span>]]]&gt;=x[i]) --Top[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(Top[<span class="number">1</span>]&amp;&amp;x[Stk[<span class="number">1</span>][Top[<span class="number">1</span>]]]&lt; x[i]) --Top[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> k=<span class="built_in">upper_bound</span>(Stk[<span class="number">0</span>]+<span class="number">1</span>,Stk[<span class="number">0</span>]+<span class="number">1</span>+Top[<span class="number">0</span>],Stk[<span class="number">1</span>][Top[<span class="number">1</span>]])-Stk[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(k!=(Top[<span class="number">0</span>]+<span class="number">1</span>)) ans=<span class="built_in">max</span>(ans,i-Stk[<span class="number">0</span>][k]+<span class="number">1</span>);</span><br><span class="line">        Stk[<span class="number">0</span>][++Top[<span class="number">0</span>]]=i;</span><br><span class="line">        Stk[<span class="number">1</span>][++Top[<span class="number">1</span>]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><hr><p><a href="https://www.luogu.com.cn/problem/P2422">P2422 良好的感觉</a></p><p>维护比第 $x$ 个数大的偏左和偏右下标，每一个点贡献的答案就是：</p><p>$ans=\max\limits_{1\le i\le n}\{x_i\times(s_{right_i}-s_{left_i-1})\}$</p><p>从前往后，从后往前各一次单调栈后统计答案，应该要开 <code>long long</code> ，没试过。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T,<span class="keyword">class</span> ...T1&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x),<span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMax</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkMin</span><span class="params">(T &amp;x,T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,Stk[MAXN&lt;&lt;<span class="number">1</span>],Top;</span><br><span class="line"><span class="type">int</span> Le[MAXN],Ri[MAXN];</span><br><span class="line">ll s[MAXN],x[MAXN],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;stack-mono.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;stack-mono.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(x[i]),s[i]=s[i<span class="number">-1</span>]+x[i];</span><br><span class="line">    x[<span class="number">0</span>]=x[N+<span class="number">1</span>]=-INF;</span><br><span class="line">    Stk[++Top]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(Top&amp;&amp;x[Stk[Top]]&gt;x[i]) --Top;</span><br><span class="line">        Le[i]=Stk[Top]+<span class="number">1</span>;</span><br><span class="line">        Stk[++Top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(Stk,<span class="number">0</span>,<span class="built_in">sizeof</span>(Stk));</span><br><span class="line">    Stk[Top=<span class="number">1</span>]=N+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=N;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(Top&amp;&amp;x[Stk[Top]]&gt;x[i]) --Top;</span><br><span class="line">        Ri[i]=Stk[Top]<span class="number">-1</span>;</span><br><span class="line">        Stk[++Top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) ans=<span class="built_in">max</span>(ans,x[i]*(s[Ri[i]]-s[Le[i]<span class="number">-1</span>]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">3 1 6 4 5 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><p> —</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 优化 </tag>
            
            <tag> RMQ </tag>
            
            <tag> 队列 </tag>
            
            <tag> 背包 </tag>
            
            <tag> STL </tag>
            
            <tag> 分析法 </tag>
            
            <tag> 单调队列 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2022.02.12模拟赛</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220212/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220212/</url>
      
        <content type="html"><![CDATA[<p>还彳亍</p><span id="more"></span><h2 id="题目I——城墙（wall）"><a href="#题目I——城墙（wall）" class="headerlink" title="题目I——城墙（wall）"></a>题目I——城墙（wall）</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给出一个长度为 $n$ 的序列和一个数 $S$ ，求出最短的区间使得区间和大于等于 $S$ 。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为 $n \leq 1500000$ ，所以复杂度最大为 $O(n \log n)$ ，统计前缀和，二分统计长度是否能达到，每次暴力区间和。复杂度合适。</p><h3 id="Task-One-AC-Code"><a href="#Task-One-AC-Code" class="headerlink" title="Task One AC Code"></a>Task One AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1500001</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,S,num[MAXN];</span><br><span class="line">ll sum[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">underCheck</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=k;i&lt;=n;++i) <span class="keyword">if</span>(sum[i]-sum[i-k]&gt;=S) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;wall.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;wall.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(n),<span class="built_in">underRead</span>(S);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(num[i]);</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">    <span class="keyword">if</span>(sum[n]&lt;S)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">underCheck</span>(mid)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 15</span></span><br><span class="line"><span class="comment">5 1 3 5 10 7 4 9 2 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="题目II——岗哨（sentry）"><a href="#题目II——岗哨（sentry）" class="headerlink" title="题目II——岗哨（sentry）"></a>题目II——岗哨（sentry）</h2><h3 id="题目含义："><a href="#题目含义：" class="headerlink" title="题目含义："></a>题目含义：</h3><p>给出一个长度为 $n(n \leq 10^6)$ 的序列：</p><p>第一个答案求的是一段最长的，严格递增的，右端点最小的子区间，输出该子区间的右端点。</p><p>第二行答案求的是去掉一个区间后，一段最长的，严格递增的，右端点最小的子区间，输出该子区间的右端点和长度。</p><h3 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h3><p>洛谷有一道类似题目——<a href="https://www.luogu.com.cn/problem/UVA1471">UVA1471防线</a></p><p>根据<del>机房老大哥</del>的教导，这道题的方法多样：树状数组，线段树，$Dp$，离散化等。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><strong>注：本人的线段树写挂了，所以以下方法来自同机房巨佬<a href="https://www.luogu.com.cn/user/109659">_Live_</a>的题解</strong></p><p>对于第一个答案，用 $num_i$ 结构体统计每一个连续上升子区间的信息，得出最大的子区间长度，输出右端点即可。</p><p>对于第二个答案，用 $f_i$ 统计以 $i$ 为起点的最长上升子序列的大小， $g_i$ 来统计以 $i$ 结尾的最长上升子序列的大小。枚举 $a_i , i \in ( 1 , n )$ ，找到每一个 $k$ 使 $a_k &lt; a_i$ 时的 $g_k + f_i$ 最大。</p><p>这样子看来，这个模拟的过程类似于求 $LIS$ （最长上升子序列）的过程。以 $b_i$ 数组存储能够使 $g_i$ 的值为 $i$ 的最小的 $a_i$ 的值。最后我们求到的 $dp$ 位置是第二个区间的左端点，所以最后输出的应该是 $dp+f_{dp}-1$ 的位置。</p><h3 id="Task-Two-AC-Code"><a href="#Task-Two-AC-Code" class="headerlink" title="Task Two AC Code"></a>Task Two AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n,v[MAXN&lt;&lt;<span class="number">2</span>],a[MAXN],g[MAXN],f[MAXN],b[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underBuild</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v[p]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v[p]=<span class="built_in">underMax</span>(v[p],d);</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">underModify</span>(p&lt;&lt;<span class="number">1</span>,l,mid,x,d);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;x) <span class="built_in">underModify</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQuery</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> v[p];</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid&amp;&amp;y&gt;=l) ans=<span class="built_in">underQuery</span>(p&lt;&lt;<span class="number">1</span>,l,mid,x,y);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid&amp;&amp;x&lt;=r) ans=<span class="built_in">underMax</span>(ans,<span class="built_in">underQuery</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> h[MAXN],tot,Max,Dp,t[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">&#125;num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underWork</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// underRead(n);</span></span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0x7f7f7f7f</span>,<span class="built_in">sizeof</span>(b));</span><br><span class="line">    a[<span class="number">0</span>]=a[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// underRead(a[i]);</span></span><br><span class="line">        a[i]=h[i];</span><br><span class="line">        g[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>]) g[i]=g[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>,dp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[i+<span class="number">1</span>]) f[i]=f[i+<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;<span class="built_in">underMax</span>(f[i],g[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            ans=<span class="built_in">underMax</span>(f[i],g[i]);</span><br><span class="line">            dp=i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*sort(b+1,b+1+n);</span></span><br><span class="line"><span class="comment">    int cnt=unique(b+1,b+1+n)-b-1;</span></span><br><span class="line"><span class="comment">    underBuild(1,1,cnt+1);*/</span></span><br><span class="line">    b[<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n,a[i])-b<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(f[i]+k&gt;ans)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=f[i]+k;</span><br><span class="line">            dp=i;</span><br><span class="line">        &#125;</span><br><span class="line">        b[g[i]]=<span class="built_in">underMin</span>(b[g[i]],a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=n;++i)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int x=lower_bound(b+1,b+1+n,a[i])-b;</span></span><br><span class="line"><span class="comment">        ans=underMax(ans,f[i]+underQuery(1,1,cnt+1,1,x));</span></span><br><span class="line"><span class="comment">        underModify(1,1,cnt+1,x+1,g[i]);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,dp+f[dp]<span class="number">-1</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*inline int underDisc(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int l=1,r=tot;</span></span><br><span class="line"><span class="comment">    while(l&lt;r)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int mid=(l+r)&gt;&gt;1;</span></span><br><span class="line"><span class="comment">        if(num[mid].l&lt;=x&amp;&amp;x&lt;=num[mid].r) return mid;</span></span><br><span class="line"><span class="comment">        else if(num[mid].l&gt;x) r=mid;</span></span><br><span class="line"><span class="comment">        else if(num[mid].r&lt;x) l=mid+1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return l;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underCheck()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    for(int l=1;l&lt;n;++l)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if(Max&gt;=n-l) return ;</span></span><br><span class="line"><span class="comment">        for(int i=2;i&lt;=n-l;++i)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            //i ~ i+l-1</span></span><br><span class="line"><span class="comment">            int u1=i-1,u2=i+l;</span></span><br><span class="line"><span class="comment">            if(t[u1]==t[u2])</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                i=num[t[u2]].r-l;</span></span><br><span class="line"><span class="comment">                continue;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            //i+l=num[t[u2]].r</span></span><br><span class="line"><span class="comment">            if(h[u1]&lt;h[u2])</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                int len=(u1-num[t[u1]].l+1)+(num[t[u2]].r-u2+1);</span></span><br><span class="line"><span class="comment">                if(len&gt;Max) Max=len,Dp=num[t[u2]].r;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;sentry.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;sentry.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(n);</span><br><span class="line">    num[++tot].l=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(h[i]);</span><br><span class="line">        <span class="keyword">if</span>(h[i<span class="number">-1</span>]&gt;=h[i])</span><br><span class="line">        &#123;</span><br><span class="line">            num[tot].r=i<span class="number">-1</span>;</span><br><span class="line">            num[++tot].l=i;</span><br><span class="line">        &#125;</span><br><span class="line">        t[i]=tot;</span><br><span class="line">    &#125;</span><br><span class="line">    num[tot].r=n;</span><br><span class="line">    <span class="keyword">if</span>(tot==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d %d&quot;</span>,n,n,n);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tot==n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1\n1 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> maxn=<span class="number">0</span>,dp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k=num[i].r-num[i].l+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;maxn)</span><br><span class="line">        &#123;</span><br><span class="line">            maxn=k;</span><br><span class="line">            dp=num[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Max=maxn,Dp=dp;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dp);</span><br><span class="line">    <span class="built_in">underWork</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">1 2 3 7 6 4 5 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="题目III——黑客（Hack）"><a href="#题目III——黑客（Hack）" class="headerlink" title="题目III——黑客（Hack）"></a>题目III——黑客（Hack）</h2><h3 id="题目含义"><a href="#题目含义" class="headerlink" title="题目含义"></a>题目含义</h3><p>给定一个有向图，从任意一点出发遍历所有点，删除所有经过的边；再从任意一点出发遍历所有点，如果能达到，求出两次所需的最小权值和。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p><del>说实话，当看到 $n \leq 10 , m \leq 25$ 时我真的以为正解是爆搜</del>。然而测试数据有 $1000$ 套。</p><p>跑一遍最小生成树（建议 $Kruskal$ ），求出这棵树上的必要边（删掉会使原图最小生成树的总权值变大的边）。这些边必在第二棵最小生成树里。枚举必要边在 $A$ 和 $B$ 生成树里的情况，则 $ans = \min ( a + b )$ 。</p><p><del>可惜蒟蒻到最后也没打出来qwq</del></p><h3 id="Task-Three-AC-Code"><a href="#Task-Three-AC-Code" class="headerlink" title="Task Three AC Code"></a>Task Three AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">101</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">206</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> id[MAXN],b[MAXN],c[MAXN];</span><br><span class="line"><span class="type">int</span> f[MAXN],coun,cnt,num,n,m;</span><br><span class="line"><span class="type">bool</span> vis[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">underCmp</span><span class="params">(Node a,Node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underFind</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(id[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> id[x]=<span class="built_in">underFind</span>(id[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=num=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInPut</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">underRead</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;Edge[i].u,&amp;Edge[i].v,&amp;Edge[i].w);</span><br><span class="line">    <span class="built_in">sort</span>(Edge+<span class="number">1</span>,Edge+<span class="number">1</span>+m,underCmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underKruskal</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;++i) id[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p1=<span class="built_in">underFind</span>(Edge[i].u),p2=<span class="built_in">underFind</span>(Edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(p1!=p2&amp;!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">1</span>) b[cnt++]=i;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">3</span>) f[coun++]=i;</span><br><span class="line">            ret+=Edge[i].w;</span><br><span class="line">            id[p2]=p1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tp=<span class="built_in">underFind</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(<span class="built_in">underFind</span>(i)!=tp) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underDeal</span><span class="params">(<span class="type">int</span> cd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tp=<span class="number">0</span>,d[MAXN];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;num;++j) <span class="keyword">if</span>(cd&amp;(<span class="number">1</span>&lt;&lt;j)) d[tp++]=c[j];</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tp;++i) vis[d[i]]=<span class="number">1</span>;</span><br><span class="line">    coun=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x1=<span class="built_in">underKruskal</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;coun;++i) vis[f[i]]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tp;++i) vis[d[i]]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x2=<span class="built_in">underKruskal</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> x1+x2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAns</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=INF) <span class="built_in">printf</span>(<span class="string">&quot;Too young too simple,sometimes naive!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underWork</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=<span class="built_in">underKruskal</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        vis[b[i]]=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> tp=<span class="built_in">underKruskal</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret&lt;tp) c[num++]=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len=<span class="number">1</span>&lt;&lt;num,ans=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i) ans=<span class="built_in">underMin</span>(ans,<span class="built_in">underDeal</span>(i));</span><br><span class="line">    <span class="built_in">underAns</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;hack.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;hack.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">underInit</span>();</span><br><span class="line">        <span class="built_in">underInPut</span>();</span><br><span class="line">        <span class="built_in">underWork</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 2 10</span></span><br><span class="line"><span class="comment">2 1 20</span></span><br><span class="line"><span class="comment">1 2 30</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 2 10</span></span><br><span class="line"><span class="comment">1 2 20</span></span><br><span class="line"><span class="comment">2 3 50</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="题目IV——膜拜大会（fake）"><a href="#题目IV——膜拜大会（fake）" class="headerlink" title="题目IV——膜拜大会（fake）"></a>题目IV——膜拜大会（fake）</h2><p>过于毒瘤，不会qwq</p><p><a href="https://blog.csdn.net/qq_43649416/article/details/101123235">给一个链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 数论 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF451E Devus and Flowers</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/cf451e/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/cf451e/</url>
      
        <content type="html"><![CDATA[<p>数论</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/CF451E">题目传送门</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>用费马小定理推答案，记得卡常和开 $long\ long$ 。</p><h2 id="AC-Code："><a href="#AC-Code：" class="headerlink" title="AC Code："></a>AC Code：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">21</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll A[MAXN];</span><br><span class="line"><span class="type">int</span> down=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=(ll)res*a%p;</span><br><span class="line">        a=(ll)a*a%p;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underC</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> up=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=a;i&gt;a-b;--i) up=i%Mod*up%Mod;</span><br><span class="line">    <span class="keyword">return</span> (ll)up*down%Mod; <span class="comment">//费马小定理</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;DaF.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;DaF.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    ll n,m;</span><br><span class="line">    <span class="built_in">underRead</span>(n),<span class="built_in">underRead</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">underRead</span>(A[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;n;++j) down=(ll)j*down%Mod;</span><br><span class="line">    down=<span class="built_in">underQmi</span>(down,Mod<span class="number">-2</span>,Mod);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll a=n+m<span class="number">-1</span>,b=n<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> sign=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j)</span><br><span class="line">            <span class="keyword">if</span>(i&gt;&gt;j&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sign*=<span class="number">-1</span>;</span><br><span class="line">                a-=A[j]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        res=(res+<span class="built_in">underC</span>(a,b)*sign)%Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(res+Mod)%Mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">1 3 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 费马小定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闫氏DP分析法</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-yan-analysis/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/dp-yan-analysis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“所有的 $DP$ 问题，本质上都是有限集中的最值问题”——闫学灿</p></blockquote><span id="more"></span><p><a href="https://www.bilibili.com/video/BV1X741127ZM?from=search&amp;seid=1472099735408379551">原作指路</a></p><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>从<strong>集合</strong>的方式来考虑 $DP$ 的状态。</p><h2 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h2><p> $DP$ 的阶段：状态和状态转移。</p><p> 所以有：<strong>状态表示</strong>和<strong>状态计算</strong>。</p><h2 id="状态表示"><a href="#状态表示" class="headerlink" title="状态表示"></a>状态表示</h2><p>把几个具有相同点的元素合在一起考虑，成为一个状态</p><p>对于一个状态 $F_i$ ，考虑两个角度：</p><p>1.集合： $f(i)$ 表示什么集合</p><p>由于 $F_i$ 表示的是一堆东西(这也是 $DP$ 优于枚举的核心)，我们要考虑这一堆东西的共同特征，如：所有满足某个条件的元素集合。这一点请仔细考虑，到底是大于等于，大于，小于，小于等于，等于……这些的不同会导致状态计算方式的不同</p><p>2.属性： $f(i)$ 的属性</p><p>存的数与集合的关系：如 $max,min,count,sum$ 等。</p><p>很明显， $F_i$ 大多数时候是一个数，代表这个集合的某一个属性，多是最大值、最小值、数量、总和等。题目问什么，属性一般就是什么。</p><h2 id="状态计算"><a href="#状态计算" class="headerlink" title="状态计算"></a>状态计算</h2><p>对于 $F_i$ 所表示的集合，我们将其划分为多个子集。</p><ul><li><p>划分的依据——找最后一个不同点（依题而定，即关键决策）</p></li><li><p>划分之后，根据其子集求 $F_i$ 的值。 </p></li><li><p>举例：当属性为 $max$ 时， $F_i=max($ 子集的 $max)$ ，当属性为 $count$ 时， $F_i=\sum($ 子集的 $count)$ 等。</p></li></ul><h2 id="其他链接"><a href="#其他链接" class="headerlink" title="其他链接"></a>其他链接</h2><p><a href="https://www.cnblogs.com/IzayoiMiku/p/13635809.html">IzayoiMiku</a></p><p><a href="https://blog.csdn.net/weixin_44289697/article/details/105125613">XinyueRao</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/406072/">AcWing</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 数论 </tag>
            
            <tag> 分析法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/matrix/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/matrix/</url>
      
        <content type="html"><![CDATA[<p>“我们的结合，拥有着我们的一部分”</p><span id="more"></span><h2 id="矩阵："><a href="#矩阵：" class="headerlink" title="矩阵："></a>矩阵：</h2><p>矩阵(Matrix)是指一个按照长方阵列排列的集合。一个由 $n$ 行 $m$ 列个数字排列的列表称为“ $m$ 行 $n$ 列”的矩阵，简称 $n*m$ 矩阵，记作：<br>$\begin{Bmatrix}<br>a_1&amp;a_2&amp;a_3&amp;…&amp;a_m\\<br>a_{m+1}&amp;…&amp;…&amp;…&amp;a_{2m}\\<br>…&amp;…&amp;…&amp;…&amp;…\\<br>a_{m(n-1)+1}&amp;…&amp;…&amp;…&amp;a_{nm}<br>\end{Bmatrix}$</p><h2 id="矩阵加法-减法："><a href="#矩阵加法-减法：" class="headerlink" title="矩阵加法/减法："></a>矩阵加法/减法：</h2><p>令 $A,B$ 都是 $n*m$ 矩阵，则 $A+B=C$ ，满足：</p><p>$C=\begin{Bmatrix}<br>a_1+b_1&amp;a_2+b_2&amp;a_3+b_3&amp;…&amp;a_m+b_m\\<br>a_{m+1}+b_{m+1}&amp;…&amp;…&amp;…&amp;a_{2m}+b_{2m}\\<br>…&amp;…&amp;…&amp;…&amp;…\\<br>a_{m(n-1)+1}+b_{m(n-1)+1}&amp;…&amp;…&amp;…&amp;a_{nm}+b_{nm}<br>\end{Bmatrix}$</p><p>简单来说，即 $C_{i,j}=A_{i,j}+B_{i,j}$ ，减法同理。</p><h2 id="矩阵乘法："><a href="#矩阵乘法：" class="headerlink" title="矩阵乘法："></a>矩阵乘法：</h2><p>$A<em>B=C$ 满足 $C_{i,j}=\sum_{k=1}^{n}{A_{i,k}</em>B_{k,j}}$</p><p>矩阵乘法能够实现，仅当 $A$ 的行数与 $B$ 的列数相等时。</p><p><strong>举个栗子：</strong></p><p>$A=\begin{Bmatrix}1&amp;2&amp;3\\1&amp;2&amp;3\\\end{Bmatrix}$ ， $B=\begin{Bmatrix}3&amp;2\\1&amp;3\\2&amp;1\\\end{Bmatrix}$</p><p>那么对于 $C=A*B$ ，则</p><script type="math/tex; mode=display">C_{1,1} = A_{1,1} * B_{1,1} + A_{1,2} * B_{2,1} + A_{1,3} * B_{3,1}</script><p>简单来讲就是</p><p> $C_{1,1}=\sum_{k=1}^{n=3}{A_{1,k}}*\sum_{k=1}^{m=3}{B_{k,1}}$</p><p>那么矩阵乘法的代码实现即是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line">            c[i][j]+=a[i][k]*b[k][j];</span><br></pre></td></tr></table></figure><h2 id="矩阵快速幂："><a href="#矩阵快速幂：" class="headerlink" title="矩阵快速幂："></a>矩阵快速幂：</h2><p>对于一个矩阵 $G$ 来说， $G^k$ 中 $G_{i,j}$ 的含义为从 $i$ 走到 $j$ 步数为 $k$ 的方案数。</p><p>不用理解太多，就是用矩阵实现快速幂即可，将数乘换成矩阵乘法（<del>蒟蒻改了一下午，才发现把 $i$ 打成了 $j$</del>）</p><p><a href="https://www.luogu.com.cn/problem/P3390">LuoguP3390</a></p><h3 id="AC-Code："><a href="#AC-Code：" class="headerlink" title="AC Code："></a>AC Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> ll p=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">101</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll n,k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    ll m[N][N];             <span class="comment">// 记得开long long</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Matrix <span class="title">underCalc</span><span class="params">(Matrix a,Matrix b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix res;</span><br><span class="line">    <span class="built_in">memset</span>(res.m,<span class="number">0</span>,<span class="built_in">sizeof</span>(res.m));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=n;++l)</span><br><span class="line">                res.m[i][j]=(res.m[i][j]+(a.m[i][l]*b.m[l][j])%p)%p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">Matrix a;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underExpr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix temp;</span><br><span class="line">    <span class="built_in">memset</span>(temp.m,<span class="number">0</span>,<span class="built_in">sizeof</span>(temp.m));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) temp.m[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) temp=<span class="built_in">underCalc</span>(a,temp);</span><br><span class="line">        a=<span class="built_in">underCalc</span>(a,a);</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,temp.m[i][j]%p);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;matrix.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;matrix.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a.m[i][j]);</span><br><span class="line">    <span class="built_in">underExpr</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 矩阵快速幂，矩阵乘法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2022.01.26模拟赛</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220126/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220126/</url>
      
        <content type="html"><![CDATA[<p>无论哪个学科，最难的部分永远是数学</p><span id="more"></span><h2 id="题目I——集合均值-mos"><a href="#题目I——集合均值-mos" class="headerlink" title="题目I——集合均值(mos)"></a>题目I——集合均值(mos)</h2><blockquote><p>MOS=Mean Of Set</p></blockquote><p>一道完美的数学题，指不推公式你完全不知道它居然求的是**<del>（暂且保密）</del>。</p><p>因为每一次都需要从B中随机一个数，那么第一次取到了 $a_i$ 的话，求到的 $ans$ 应该加上 $\frac{a_i}{2}$ ，以此类推，当第二次取到了 $a_j$ 的时候，求到了 $ans$ 就取到 $\frac{a_i+a_j}{3}$ ，然后继续计算，我们会发现 $B$ 中的所有数对最终答案的贡献系数都是一样的，并且其贡献系数与其在 $B$ 中的位置没有关系，只会和 $B$ 的大小有关系，然后继续推算，答案就<del>显而易见</del>了：<br>$ans=f(|B|)\sum_{x\in B}{a_x}$</p><p>那么现在的问题就在于求出 $f(i)$ 了，我们可以模拟从 $B$ 移动到 $A$ 的过程，花费 $O{m}$ 的时间，这也是 $40pt$ 的做法。然而这道题的关键在于：我们最后求出的期望值是一个有理数 $frac{a}{b}$ ，所以我们需要进行<a href="https://www.luogu.com.cn/problem/P2613">有理数取余</a>，而进行<strong>逆元</strong>操作。（逆元便是这道题的正解）</p><h3 id="怎么想到使用逆元的："><a href="#怎么想到使用逆元的：" class="headerlink" title="怎么想到使用逆元的："></a>怎么想到使用逆元的：</h3><p>首先，我们已经推出了 $ans=f(|B|)\sum_{x\in B}{a}$ ，设 $i$ 为当前 $A$ ，即已经已过去了的数的个数，那么 $|B|=\frac{i-1}{i}$ 了。我们需要在计算的过程中取模，也就自然想到使用逆元了。<del>（虽然考的时候完全没有想到）</del></p><p>具体来说：</p><ul><li>暴力模拟求逆元可得 $70pt$</li><li>线性求逆元可得 $100pt$</li><li>事实上，我们需要的也是这些逆元的和即可，根据原作者的话来说，会有一种<del>强力的</del>的多项式<del>高科技</del>能使求逆元的复杂度达到 $O(\sqrt{nm}\log{nm})$ 。但在这道题来说($n<em>m ≦ 2</em>10^7$)，线性求逆元已经完全足够了。</li></ul><h2 id="Task-One-Ac-Code"><a href="#Task-One-Ac-Code" class="headerlink" title="Task One Ac Code:"></a>Task One Ac Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e7</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> ll Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,x,Num[MAXN],Sum,Inv[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;mos.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;mos.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(n),<span class="built_in">underRead</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">underRead</span>(Num[i]),Sum+=Num[i];</span><br><span class="line">    Sum%=Mod;</span><br><span class="line">    Sum=(Sum*m)%Mod;</span><br><span class="line">    Inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n*m+<span class="number">1</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Inv[i]=(Mod-Mod/i)*Inv[Mod%i]%Mod;</span><br><span class="line">        x=(x+(i<span class="number">-1</span>)*Inv[i])%Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    x=(x*Inv[n*m])%Mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Sum*x%Mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="题目II——聚烷撑乙二醇-pag"><a href="#题目II——聚烷撑乙二醇-pag" class="headerlink" title="题目II——聚烷撑乙二醇(pag)"></a>题目II——聚烷撑乙二醇(pag)</h2><blockquote><p>PAG=Play A Game</p></blockquote><p><del>做题最大的收获是知道了 $PAG$ 是聚烷撑乙二醇的意思</del></p><h3 id="题目含义："><a href="#题目含义：" class="headerlink" title="题目含义："></a>题目含义：</h3><p>鲁迅曾经说过，要多去尝试，才能最终发现最优的答案。</p><p>鲁迅也还说过，要珍惜当下，把握住眼前的机会。</p><p>有 $n$ 个随机数生成器，第 $i$ 个生成器可以均匀随机地生成 $[L_i,R_i]$ 内的一个实数。</p><p>现在你要玩个游戏，从第 $1$ 个生成器到第 $n$ 个生成器，每次当前生成器会生成一个数，你需要选择：</p><ul><li><p>相信鲁迅，拿走这个数，游戏结束。</p></li><li><p>相信鲁迅，放弃这个数和这个生成器，使用下一个生成器（前提是下一个生成器必须存在）。</p></li></ul><p>求使用使得期望答案最大的策略时，期望答案是多少。</p><p><del><strong>很玄学的题意和标题</strong></del></p><h3 id="思路详解："><a href="#思路详解：" class="headerlink" title="思路详解："></a>思路详解：</h3><p>其实想明白后十分简单，主要是想到这道题到底是怎样操作的。假设现在我们到了第 $i$ 的随机数生成器，第二个生成器产生的数的期望是 $Y=\frac{L_{i+1}+R_{i+1}}{2}$ 。如果第 $i$ 个生成器产生了 $X$ ，当 $X&lt;Y$ 时，我们当然放弃 $X$ 更优，反之则取出 $X$ 。</p><p>那我们将 $i$ 与 $i+1$ 扩展到 $1$ 到 $n$ 的思路。对于每一组来说，我们都这样来扩展答案，就可以得到下面的算式：</p><blockquote><p>当 $ans&lt;L_i$ 时 $ans=\frac{L_i+R_i}{2}$</p><p>当 $L_i&lt;ans&lt;R_i$ 时 $ans=\frac{ans<em>(ans-L_i)+\frac{ans+R_i}{2}</em>(R_i-ans)}{R_i-L_i}$</p><p>否则， $ans=ans$ ，当然，这步不用在代码里体现。</p></blockquote><p>明白这件事之后，还有一个需要注意的，那就是：</p><p><strong>我们在扩展答案是应该从 $N$ 到 $1$ 扩展：</strong></p><p>因为我们只有在知道了 $i+1$ 的区间之后才能知道第 $i$ 个到底取不取。</p><h2 id="Task-Two-Ac-Code："><a href="#Task-Two-Ac-Code：" class="headerlink" title="Task Two Ac Code："></a>Task Two Ac Code：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">double</span> ld;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,l[MAXN],r[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;pag.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;pag.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l[i],&amp;r[i]);</span><br><span class="line">ld ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L=l[i],R=r[i];</span><br><span class="line"><span class="keyword">if</span>(ans&lt;L) ans=<span class="built_in">ld</span>(L+R)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans&lt;R) ans=(ans*(ans-L)+(R+ans)/<span class="number">2</span>*(R-ans))/(R-L);</span><br><span class="line"><span class="comment">// else ans=ans;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.5Lf&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 质数 </tag>
            
            <tag> 费马小定理 </tag>
            
            <tag> 概率论 </tag>
            
            <tag> 期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1144 最短路计数</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p1144/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p1144/</url>
      
        <content type="html"><![CDATA[<p>最短路计数</p><span id="more"></span><h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p><a href="https://www.luogu.com.cn/problem/P1144">最短路计数</a></p><h3 id="题目概述-amp-解题思路："><a href="#题目概述-amp-解题思路：" class="headerlink" title="题目概述&amp;解题思路："></a>题目概述&amp;解题思路：</h3><p>字面意思，不多做解释。求出所有的最短路个数，对 $10^6+3$  取模。当然，如果起点到编号为 $i$ 的点不连通当然数目就为0啦。</p><p>对于简单的思路，那就是跑出最短路，再跑一遍遍历，看有多少种情况能够走到 $i$ 点，然后统计。但是这样是绝对会超时的</p><p>对于 $100%$ 的数据, $N ≦ 1000000,M ≦ 2000000$ .所以我们应该选择 <del>SPFA</del> ，啊对，就是选择SPFA，<del>有些算法死了，它还活着</del>。</p><p>我们可以用一个数组 $AnsL$ 来存储从 $1$ 号点到第 $i$ 号点的最短路个数，然后一边跑 $SPFA$ 一边修改 $AnsL$ 的值，即当我们当前从 $u$ 点跑到了 $v$ 点的话费与 $Dist_v$ 的值相同时，那么现在是一条目前找到的最短路（之后可能会存在更短路），那么就有：</p><blockquote><p>$Ans_v=Ans_u+1$</p></blockquote><p>的推导公式。</p><p>而如果我们找到了更短路，那就把当前点的计数清零。从 $u$ 点出发到的 $v$ 点的路即是最短路（目前），则传递答案为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dist[v]=Dist[u]+<span class="number">1</span>;</span><br><span class="line">Ans[v]=AnsL[v]=Ans[u];</span><br></pre></td></tr></table></figure><p>这就是两种传递的方式，也就是本题最关键的代码核心。</p><p>其他的注意事项则在代码里体现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">int</span> N,M,x,y,Cnt;</span><br><span class="line"><span class="type">int</span> Dis[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">bool</span> Vis[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> Ans[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> AnsL[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> First[<span class="number">1000001</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> To,Next;</span><br><span class="line">&#125;Edge[<span class="number">2000001</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">SPFA</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Dis[x]=<span class="number">0</span>;</span><br><span class="line">Vis[x]=<span class="number">1</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">Q.<span class="built_in">push</span>(x);</span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=Q.<span class="built_in">front</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> e=First[u];e;e=Edge[e].Next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Now=Edge[e].To;</span><br><span class="line"><span class="keyword">if</span>(Dis[Now]&gt;Dis[u]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Dis[Now]=Dis[u]+<span class="number">1</span>;</span><br><span class="line">Ans[Now]=AnsL[Now]=Ans[u]%<span class="number">100003</span>;</span><br><span class="line"><span class="keyword">if</span>(!Vis[Now])</span><br><span class="line">&#123;</span><br><span class="line">Vis[Now]=<span class="number">1</span>;</span><br><span class="line">Q.<span class="built_in">push</span>(Now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Dis[Now]==Dis[u]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">AnsL[Now]=(AnsL[Now]+Ans[u])%<span class="number">100003</span>;</span><br><span class="line">Ans[Now]=(Ans[Now]+Ans[u])%<span class="number">100003</span>;</span><br><span class="line"><span class="keyword">if</span>(!Vis[Now])</span><br><span class="line">&#123;</span><br><span class="line">Vis[Now]=<span class="number">1</span>;</span><br><span class="line">Q.<span class="built_in">push</span>(Now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Ans[u]=<span class="number">0</span>;</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">Vis[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">Edge[++Cnt].To=y;</span><br><span class="line">Edge[Cnt].Next=First[x];</span><br><span class="line">First[x]=Cnt;</span><br><span class="line">Edge[++Cnt].To=x;</span><br><span class="line">Edge[Cnt].Next=First[y];</span><br><span class="line">First[y]=Cnt;</span><br><span class="line">&#125;</span><br><span class="line">AnsL[<span class="number">1</span>]=Ans[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line">Dis[i]=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">SPFA</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,AnsL[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 7</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> 图论 </tag>
            
            <tag> SPFA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/segment-tree/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OI/segment-tree/</url>
      
        <content type="html"><![CDATA[<p>“我一步一步走向深处，寻找你的身影，又将你拉回——我们的起点”</p><span id="more"></span><p>线段树是用来维护区间权值的一种数据结构，根据同机房巨佬而言，一般需要使用线段树的题考点都不在线段树上，<del>不过线段树真滴好用</del></p><hr><h2 id="线段树的操作："><a href="#线段树的操作：" class="headerlink" title="线段树的操作："></a>线段树的操作：</h2><h2 id="Ⅰ-建树"><a href="#Ⅰ-建树" class="headerlink" title="Ⅰ.建树"></a>Ⅰ.建树</h2><p>我的习惯为使用结构体存储（就和链式前向星一样），也可以分开打：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,dat;</span><br><span class="line"><span class="comment">//int tag;</span></span><br><span class="line">&#125;Tree[N&lt;&lt;<span class="number">2</span>];</span><br></pre></td></tr></table></figure><br>一般来说，线段树的数组需要开四倍 $N$ 空间，因为他比线性结构要多一层，而开四倍一般不会爆。</p><h3 id="代码讲解："><a href="#代码讲解：" class="headerlink" title="代码讲解："></a>代码讲解：</h3><p>对于其中之一 $Tree[p]$ 中：</p><p>$l$ 表示第p个编号所表示的区域起点为原线性结构的 $A_l$ ；</p><p>$r$ 表示第p个编号所表示的区域终点为原线性结构的 $A_r$ ；</p><p>子节点保证： $l=r$ ；</p><p>$dat$ 表示该区域的一个数据，一般视题目而定，且 $dat$ 的个数也不定。</p><p>$tag$ 可有也可不有（如果是区间修改的题一般都有），表示“懒惰标记”，之后详解。</p><p>$p$ 结点的子结点为 $p<em>2$ 和 $p</em>2+1$ ，一般在代码中写为 $p&lt;&lt;1$ 和 $p&lt;&lt;1|1$ 来节约时间（因为位运算时间复杂度＜乘法复杂度）</p><h3 id="建树一般使用递归建树："><a href="#建树一般使用递归建树：" class="headerlink" title="建树一般使用递归建树："></a>建树一般使用递归建树：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underBuild</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l;</span><br><span class="line">    Tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="comment">//到达子结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].dat=Val[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    <span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">underPushUp</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ⅱ-查询"><a href="#Ⅱ-查询" class="headerlink" title="Ⅱ.查询"></a>Ⅱ.查询</h2><p><strong>以查询该区间权值和为例：</strong></p><p>如果该结点在需要查询的区间内，返回该点权值；</p><p>如果不在搜索子结点，如果需要的 $l$ 比该结点的 $mid$ 小，则搜索 $(l,mid)$；如果需要的 $r$ 比该结点的 $mid$ 大，则搜索$(mid+1,r)$。 </p><p>具体操作看函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">underQuery</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].l&gt;=l&amp;&amp;r&gt;=Tree[p].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Tree[p].dat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underSpread</span>(p);<span class="comment">//区间修改的操作，之后详解</span></span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=<span class="built_in">underQuery</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=<span class="built_in">underQuery</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ⅲ-单点修改"><a href="#Ⅲ-单点修改" class="headerlink" title="Ⅲ.单点修改"></a>Ⅲ.单点修改</h2><p>找到该点的编号，从下至上修改它的所有父结点直到，依然使用递归操作。</p><p><strong>$dat$ 存储该区间的区间和</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underChange</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> v,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].l==v&amp;&amp;Tree[p].r==v)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].dat=k;<span class="comment">//到达子结点后修改dat值</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(v&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underChange</span>(p&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underChange</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">    &#125;</span><br><span class="line">    Tree[p].dat=Tree[p&lt;&lt;<span class="number">1</span>].dat+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ⅳ-向上传递（pushup）"><a href="#Ⅳ-向上传递（pushup）" class="headerlink" title="Ⅳ.向上传递（pushup）"></a>Ⅳ.向上传递（pushup）</h2><p>即函数underPushUp，一般都是视题目而定。</p><p><strong>以区间和为例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Tree[p].dat=Tree[p&lt;&lt;<span class="number">1</span>].dat+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>似乎这个例子没什么说服力</del>，不过的确是这样的。</p><h2 id="Ⅴ-向下传递（pushdown-spread）"><a href="#Ⅴ-向下传递（pushdown-spread）" class="headerlink" title="Ⅴ.向下传递（pushdown/spread）"></a>Ⅴ.向下传递（pushdown/spread）</h2><p>只限于懒惰标记。当我们需要改变该区间中的子区间才会向下传递，这样可以优化时间，否则每一次区间修改都会花费 $O(N)$ 的时间复杂度。</p><p><strong>依然以区间和为例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underSpread</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].dat+=Tree[p].tag*(Tree[p&lt;&lt;<span class="number">1</span>].r-Tree[p&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat+=Tree[p].tag*(Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].tag+=Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=Tree[p].tag;</span><br><span class="line">        Tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ⅵ-区间修改"><a href="#Ⅵ-区间修改" class="headerlink" title="Ⅵ.区间修改"></a>Ⅵ.区间修改</h2><p>使用懒惰标记，可以让时间复杂度降到 $O(logN)$ 。</p><p><strong>依然以区间和为例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].dat+=k*(Tree[p].r-Tree[p].l+<span class="number">1</span>);</span><br><span class="line">        Tree[p].tag+=k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underSpread</span>(p);</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underModify</span>(p&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underModify</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">    &#125;</span><br><span class="line">    Tree[p].dat=Tree[p&lt;&lt;<span class="number">1</span>].dat+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些练习"><a href="#一些练习" class="headerlink" title="一些练习"></a>一些练习</h2><p><a href="https://www.luogu.com.cn/problem/P3372">区间修改区间查找模板题</a></p><p><a href="https://www.luogu.com.cn/problem/P4513">区间最大子段和模板题</a></p><p><a href="https://www.luogu.com.cn/problem/P2574">P2574 XOR的艺术</a></p><p><a href="https://www.luogu.com.cn/problem/P6327">区间求sin和，需要使用数学知识</a></p><p><a href="https://www.luogu.com.cn/problem/P5648">卡常卡码风的毒瘤题</a></p><p>头图来源：<br><a href="https://space.bilibili.com/53456/?spm_id_from=333.999.0.0">Warma</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMQ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
