<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随机100题</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/100-text/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/100-text/</url>
      
        <content type="html"><![CDATA[<p>“作为这一年的奋斗目标，难度：提高左右”</p><span id="more"></span><h3 id="1-P4170-CQOI2007-涂色"><a href="#1-P4170-CQOI2007-涂色" class="headerlink" title="1.P4170 [CQOI2007]涂色"></a>1.<a href="https://www.luogu.com.cn/problem/P4170">P4170 [CQOI2007]涂色</a></h3><p>$date: 2022.4.10$</p><p>区间 $dp$ 模板题，转移方程有三种：</p><ol><li>$dp_{l,r}=1,l=r$</li><li>$dp_{l,r}=\min\{dp_{l+1,r},dp_{l,r-1}\},op_l=op_r$</li><li>$dp_{l,r}=\min\{dp_{l,r},dp_{l,k}+dp_{k+1,r}\},op_l \neq op_r,k \in [l,r]$</li></ol><p>第一种，涂一块只需要一次即可；</p><p>而对于第二种，我们在涂的时候只需要再其子区间的时候多涂一块，不需要再涂一次，所以不用统计答案；</p><p>第三种，经典断点即可。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">51</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dp[MAXN][MAXN],n,op[MAXN];</span><br><span class="line"><span class="type">char</span> str[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">char</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;dp-section.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;dp-section.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) op[i]=<span class="built_in">change</span>(str[i]);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">1</span>;len&lt;=n;++len)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=n-len+<span class="number">1</span>;++l)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> r=l+len<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(l==r) dp[l][r]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op[l]==op[r])</span><br><span class="line">                dp[l][r]=<span class="built_in">min</span>(dp[l+<span class="number">1</span>][r],dp[l][r<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;r;++k)</span><br><span class="line">                    dp[l][r]=<span class="built_in">min</span>(dp[l][r],dp[l][k]+dp[k+<span class="number">1</span>][r]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[<span class="number">1</span>][n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">AAAAA</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="2-CF1109A-Sasha-and-a-Bit-of-Relax"><a href="#2-CF1109A-Sasha-and-a-Bit-of-Relax" class="headerlink" title="2.CF1109A Sasha and a Bit of Relax"></a>2.<a href="https://www.luogu.com.cn/problem/CF1109A">CF1109A Sasha and a Bit of Relax</a></h3><p>$date:2022.4.10$</p><p>区间数学题，详见<a href="https://www.luogu.com.cn/blog/FallenShadow/solution-cf1109a">题解</a></p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs ls|1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">3e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll n,val,sum[MAXN];</span><br><span class="line">ll res;</span><br><span class="line">map&lt;pair&lt;ll,ll&gt;,ll&gt;M;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;segment.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;segment.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    ++M[<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">1</span>)];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(val);</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]^val;</span><br><span class="line">        ll x=!(i&amp;<span class="number">1</span>);</span><br><span class="line">        res+=M[<span class="built_in">make_pair</span>(sum[i],x)];</span><br><span class="line">        ++M[<span class="built_in">make_pair</span>(sum[i],x)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 2 3 4 5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">3 2 2 3 7 6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">x^x=0</span></span><br><span class="line"><span class="comment">x^0=x</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 区间dp </tag>
            
            <tag> 优化 </tag>
            
            <tag> RMQ </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 数论 </tag>
            
            <tag> String </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kmp字符串匹配算法</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/kmp/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/kmp/</url>
      
        <content type="html"><![CDATA[<p>“强大的并不是你在顺境中能多么快的前进，而是你能多快在逆流中找回你自己”</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> String </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态压缩dp</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-state-compression/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-state-compression/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>对于一类题而言，如果用 $dp$ 来做的话，会有 $m$ 个状态，而作为我们来讲，我们不可能去开一个数组 $dp[2][2][2][2][2][2][2]…[2]$ 来记录，因为空间是动态的。所以我们考虑将这 $m$ 个状态压缩成一个 $m$ 位的二进制数。存储为一位，则空间复杂度与时间复杂度都是 $O(2^m)$ 的话，枚举 $[0,2^m-1]$ ，而对于这个二进制数，它的第 $k$ 位为 $1$ 则满足第 $k$ 个条件，判断语句为 <code>if(i&gt;&gt;k&amp;1)</code> 即可。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 优化 </tag>
            
            <tag> 状态压缩 </tag>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树型dp</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-tree/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-tree/</url>
      
        <content type="html"><![CDATA[<p>“父承子业”</p><span id="more"></span><p>简单来说就是在一棵树上进行 $dp$ 操作。一般是从子节点转移到父节点。初始化为叶节点。</p><p>其可扩展性十分高。所以没有固定模板而言。但一般实现方式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span><span class="comment">//当前节点以及其父节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[x]=<span class="comment">/*something*/</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;<span class="comment">//不可回溯</span></span><br><span class="line">        <span class="built_in">dp</span>(v,x);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        some Codes;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    some Code;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">dp</span>(Rt,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="求树的直径"><a href="#求树的直径" class="headerlink" title="求树的直径"></a>求树的直径</h3><p>两种方法</p><ol><li>两遍 $bfs$ 或 $dfs$ 。第一次从任意点开始，找到该点能到达的最远距离，第二次从找到的点出发，再次找最远点。这两点就是树的直径。复杂度 $O(2n)$ 。</li><li>考虑树型 $dp$ 。时间复杂度 $O(n)$ 。</li></ol><p>第一种方法不必多述，而对于第二种方法：我们用 $dp_{k,x},k \in \{0,1\},x \in n$ 来记录该点所能到达其子树的最远距离和次远距离。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="P3047-USACO12FEB-Nearby-Cows-G"><a href="#P3047-USACO12FEB-Nearby-Cows-G" class="headerlink" title="P3047 [USACO12FEB]Nearby Cows G"></a><a href="https://www.luogu.com.cn/problem/P3047">P3047 [USACO12FEB]Nearby Cows G</a></h3><p>对于一个点 $x$ ，与它相距不超过 $k$ 的点有两种情况：</p><ul><li>在 $x$ 的儿子之中。</li><li>在 $x$ 之上（或其父节点的另一棵子树）</li></ul><p>那么我们进行两次遍历，第一次查找每一个点向下查找能找到的点权值，记为 <code>dp[0][x][k]</code> ，第二次查找父节点满足条件的点权值，将两次计算相加即可。需要进行容斥。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXK=<span class="number">21</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,K,Val[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2</span>][MAXN][MAXK];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(Tree)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">    Edge[++Total]=(Tree)&#123;Head[v],u&#125;;Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=K;++i) dp[<span class="number">0</span>][x][i]=Val[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=K;++i) dp[<span class="number">0</span>][x][i]+=dp[<span class="number">0</span>][v][i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsSec</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        dp[<span class="number">1</span>][v][<span class="number">1</span>]+=dp[<span class="number">0</span>][x][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=K;++i) dp[<span class="number">1</span>][v][i]+=dp[<span class="number">1</span>][x][i<span class="number">-1</span>]-dp[<span class="number">0</span>][v][i<span class="number">-2</span>];</span><br><span class="line">        <span class="built_in">dfsSec</span>(v,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tredp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tredp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N),<span class="built_in">read</span>(K);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        <span class="built_in">read</span>(u),<span class="built_in">read</span>(v);</span><br><span class="line">        <span class="built_in">addEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">read</span>(Val[i]);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=K;++j)</span><br><span class="line">            dp[<span class="number">1</span>][i][j]=dp[<span class="number">0</span>][i][j];</span><br><span class="line">    <span class="built_in">dfsSec</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dp[<span class="number">1</span>][i][K]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 2 </span></span><br><span class="line"><span class="comment">5 1 </span></span><br><span class="line"><span class="comment">3 6 </span></span><br><span class="line"><span class="comment">2 4 </span></span><br><span class="line"><span class="comment">2 1 </span></span><br><span class="line"><span class="comment">3 2 </span></span><br><span class="line"><span class="comment">1 </span></span><br><span class="line"><span class="comment">2 </span></span><br><span class="line"><span class="comment">3 </span></span><br><span class="line"><span class="comment">4 </span></span><br><span class="line"><span class="comment">5 </span></span><br><span class="line"><span class="comment">6 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="P7103-「C-E-L-U-01」族谱树"><a href="#P7103-「C-E-L-U-01」族谱树" class="headerlink" title="P7103 「C.E.L.U-01」族谱树"></a><a href="https://www.luogu.com.cn/problem/P7103">P7103 「C.E.L.U-01」族谱树</a></h3><p>这道题其实并不是一道纯粹树型 $dp$ 。直接用 $Tarjan$ 求所有深度的 $lca$ 即可。复杂度 $O(n+q)$ 。据说 $O(n \log n)$ 会被卡。不清楚。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,K[MAXN],Q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="type">int</span> f[MAXN],dep[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(Tree)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dpTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[x]=dep[last]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x];e;e=Edge[e].next) <span class="built_in">dpTree</span>(Edge[e].to,x),f[Edge[e].to]=x;</span><br><span class="line">    K[dep[x]]=K[dep[x]]?<span class="built_in">find</span>(K[dep[x]]):x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tredp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tredp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N),<span class="built_in">read</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,fa;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(fa);f[i]=i;</span><br><span class="line">        <span class="built_in">addEdge</span>(fa,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dpTree</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">while</span>(M--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(Q);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,K[Q]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8 3</span></span><br><span class="line"><span class="comment">0 1 1 2 2 3 4 5</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="Loj-10155-「一本通-5-2-例-3」数字转换"><a href="#Loj-10155-「一本通-5-2-例-3」数字转换" class="headerlink" title="Loj#10155. 「一本通 5.2 例 3」数字转换"></a><a href="https://loj.ac/p/10155">Loj#10155. 「一本通 5.2 例 3」数字转换</a></h3><p>这题我还比较喜欢。不看标签我是绝对不会想到用树型 $dp$ 来解的。我们记数 $i$ 的约数和为 $f(i)$ 。而当 $f(i) \leq i$ 时，可以互相转换。如果将每一个数都看作一个节点，则我们连一条边 $c(i,f(i))$ 。然后对于这一个无向图。求出其直径即可。而对于线性求约数和。读者可以自行思考如何实现复杂度 $O(n \log n)$，或者看代码。</p><details>    <summary>AC Code</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Limit,f[MAXN],dp[<span class="number">3</span>][MAXN],ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;MAXN;++i) f[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;MAXN;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;i*j&lt;MAXN;++j)</span><br><span class="line">            f[i*j]+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(Tree)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">    Edge[++Total]=(Tree)&#123;Head[v],u&#125;;Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dpTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x];e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v==last||v==x) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dpTree</span>(v,x);</span><br><span class="line">        <span class="keyword">if</span>(dp[<span class="number">1</span>][x]&lt;dp[<span class="number">1</span>][v]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[<span class="number">2</span>][x]=dp[<span class="number">1</span>][x];</span><br><span class="line">            dp[<span class="number">1</span>][x]=dp[<span class="number">1</span>][v]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dp[<span class="number">2</span>][x]&lt;dp[<span class="number">1</span>][v]+<span class="number">1</span>) dp[<span class="number">2</span>][x]=dp[<span class="number">1</span>][v]+<span class="number">1</span>;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,dp[<span class="number">1</span>][x]+dp[<span class="number">2</span>][x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;tree-d.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;tree-d.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">read</span>(Limit);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Limit;++i) <span class="keyword">if</span>(i&gt;=f[i]) <span class="built_in">addEdge</span>(i,f[i]);</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=Limit;++i) cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;f[i]&lt;&lt;endl;</span></span><br><span class="line">    <span class="built_in">dpTree</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">79</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 优化 </tag>
            
            <tag> 图论 </tag>
            
            <tag> LCA </tag>
            
            <tag> 树型dp </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 换根dp </tag>
            
            <tag> 二次扫描与换根法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树上最近公共祖先(LCA)</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/lca/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/lca/</url>
      
        <content type="html"><![CDATA[<p>“你与我最初的缔结”</p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>LCA（Least Common Ancestors）</strong>：即最近公共祖先，是指在有根树中，找出某两个结点 $u$ 和 $v$ 最近的公共祖先。</p><p>对于下图（取自洛谷）：</p><p><img src="https://cdn.luogu.com.cn/upload/pic/61612.png" alt="LCA"></p><p>$lca(13,5)=3$</p><p>$lca(6,4)=4$</p><p>$lca(18,2)=2$</p><p>$lca(15,18)=5$</p><p>…</p><h2 id="朴素思路"><a href="#朴素思路" class="headerlink" title="朴素思路"></a>朴素思路</h2><p>从一个点开始，向上标记至根节点；然后将另一点向上搜索到第一个标记的点，该点则是两点的 $lca$ 。这样的复杂度是 $O(nq)$ ，$q$ 表示询问次数。<del>非常滴慢</del>。</p><h2 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h2><h3 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h3><h3 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h3><h3 id="Tarjan"><a href="#Tarjan" class="headerlink" title="Tarjan"></a>Tarjan</h3><h3 id="st表"><a href="#st表" class="headerlink" title="st表"></a>st表</h3><p>做到 $O(n \log n)$ 的预处理，$O(1)$ 的查询，算比较快的了。将整个树遍历，每遍历一个点将其加至序列末尾。记为数组 $id(x)$ 。无论是到达还是回溯都需要记录。可以证明该序列不会超过 $2n-1$ 。从 $x$ 到 $y$ 需要从 $lca$ 的一个子树走到另一个子树。则在区间 $[id(x),id(y)]$ 之间一定存在 $lca(x,y)$ 。</p><p>而 $lca(x,y)$ 就是其中深度最小的点。用 $st$ 表维护。</p><details>    <summary>ST表<summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Idx,Rt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total;</span><br><span class="line"><span class="type">int</span> Log[MAXN&lt;&lt;<span class="number">1</span>],St[MAXN&lt;&lt;<span class="number">1</span>][<span class="number">64</span>],Dep[MAXN],Id[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAddEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[v],u&#125;;Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underSwap</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x^=y^=x^=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underDfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    St[++Idx][<span class="number">0</span>]=x;Id[x]=Idx;Dep[x]=Dep[last]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x],v;e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((v=Edge[e].to)==last) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">underDfs</span>(v,x);</span><br><span class="line">        St[++Idx][<span class="number">0</span>]=x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underDepMin</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Dep[a]&lt;Dep[b]?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=Idx;++i) Log[i]=Log[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;k)&lt;=Idx;++k)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>&lt;=Idx;++i)</span><br><span class="line">            St[i][k]=<span class="built_in">underDepMin</span>(St[i][k<span class="number">-1</span>],St[i+(<span class="number">1</span>&lt;&lt;(k<span class="number">-1</span>))][k<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underLca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=Id[x],y=Id[y];</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) <span class="built_in">underSwap</span>(x,y);</span><br><span class="line">    <span class="type">int</span> k=Log[y-x+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">underDepMin</span>(St[x][k],St[y-(<span class="number">1</span>&lt;&lt;(k))+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;LCA.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;LCA.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M),<span class="built_in">underRead</span>(Rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(u),<span class="built_in">underRead</span>(v);</span><br><span class="line">        <span class="built_in">underAddEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underDfs</span>(Rt,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">underInit</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y;M;--M)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(x),<span class="built_in">underRead</span>(y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underLca</span>(x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5 4</span></span><br><span class="line"><span class="comment">3 1</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> Tarjan </tag>
            
            <tag> 树型结构 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> ST表 </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数位dp</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-digit/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-digit/</url>
      
        <content type="html"><![CDATA[<p>“聚小而大”</p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一种以位数为转移条件的 $dp$ ，一般是统计一个区间内满足一类条件的计数 $dp$ 。一般的初始转移有二维 $dp_{i,j}$ 表示有 $i$ 位且末位为 $j$ 的统计个数。一般满足差分性质（与<strong>树状数组</strong>类似），即 $[l,r]=[1,r]-[1,l-1]$ 的性质。</p><h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><h3 id="迭代式"><a href="#迭代式" class="headerlink" title="迭代式"></a>迭代式</h3><p>即使用 <code>for</code> 循环来遍历整个 <code>dp</code> 数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;Num;<span class="comment">//存储limit的每一位</span></span><br><span class="line">    <span class="keyword">while</span>(x) Num.<span class="built_in">push_back</span>(x%<span class="number">10</span>),x/=<span class="number">10</span>;</span><br><span class="line">    ll res=<span class="number">0</span>;<span class="comment">//存储答案</span></span><br><span class="line">    <span class="type">int</span> last=<span class="comment">/*init*/</span>;<span class="comment">//限制条件s</span></span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=Num.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=Num[i];</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;x;++j) <span class="keyword">if</span>(<span class="comment">/*some condition*/</span>) res+=dp[i+<span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span>(<span class="comment">/*some condition*/</span>) last=x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(!i) ++res;</span><br><span class="line">&#125;<span class="comment">//以limit=119547为例，这部分计算的是[100000,119547]的值</span></span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=Num.<span class="built_in">size</span>()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">            res+=dp[i+<span class="number">1</span>][j];</span><br><span class="line">    <span class="comment">//同上，这部分计算[1,99999]的总值</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="记忆化"><a href="#记忆化" class="headerlink" title="记忆化"></a>记忆化</h3><p>使用<code>dfs</code>遍历所有的情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> x<span class="comment">/*,bool con1,bool con2...bool conn*/</span>)</span><span class="comment">//一些限制条件，x表示位数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="comment">/*something*/</span>;</span><br><span class="line">    ll &amp;res=dp[x]<span class="comment">/*[some][conditions]...[]*/</span>;</span><br><span class="line">    <span class="keyword">if</span>(~res) <span class="keyword">return</span> res;<span class="comment">//该位置已达到</span></span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=cntN;++i)<span class="comment">//limit范围内</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="comment">/*some conditions*/</span>) <span class="comment">/*something*/</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="comment">/*some conditions*/</span>) <span class="comment">/*something*/</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">/*something*/</span>;</span><br><span class="line">        res+=<span class="built_in">dfs</span>(x<span class="number">-1</span><span class="comment">/*,...,...,...,*/</span>);<span class="comment">//查找下一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>将所有应算的都算出来， $dp$ 的过程只是在查找 $limit$ 范围之内的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i) dp[<span class="number">1</span>][i]=<span class="number">1</span>;<span class="comment">//处理[0,9]</span></span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;MAXN;++i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">            <span class="comment">/*for(re int l=?;?;?)*/</span></span><br><span class="line">            <span class="comment">/*some conditions*/</span>dp[i][j]=dp[i<span class="number">-1</span>][<span class="comment">/*some conditions*/</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="Luogu-P2657-windy数"><a href="#Luogu-P2657-windy数" class="headerlink" title="Luogu P2657 windy数"></a><a href="https://www.luogu.com.cn/problem/P2657">Luogu P2657 windy数</a></h3><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>数位 $dp$ 模板题，用 $dp_{i,j}$ 表示位数为 $i$ ，最高位是 $j$ 的计数，递推出在 $limit$ 内满足的个数，对于相邻的两位，只要其相差不到 $2$ 都可以相加。最终答案便是 <code>dp(r)-dp(l-1)</code> 。</p><h4 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h4><p>递推写法。</p><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">11</span>][<span class="number">11</span>],l,r;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underAbs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x&gt;<span class="number">0</span>?x:-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i) dp[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">10</span>;++i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">9</span>;++l)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">underAbs</span>(l-j)&gt;=<span class="number">2</span>)</span><br><span class="line">                    dp[i][l]+=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underDp</span><span class="params">(<span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!N) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;Num;</span><br><span class="line">    Num.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> n=N,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) Num.<span class="built_in">push_back</span>(n%<span class="number">10</span>),n/=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> last=<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=Num.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=Num[i];</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=i==Num.<span class="built_in">size</span>()<span class="number">-1</span>;j&lt;x;++j)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">underAbs</span>(j-last)&gt;=<span class="number">2</span>) res+=dp[i+<span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">underAbs</span>(x-last)&gt;=<span class="number">2</span>) last=x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(!i) ++res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=Num.<span class="built_in">size</span>()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">            res+=dp[i+<span class="number">1</span>][j];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(l),<span class="built_in">underRead</span>(r);</span><br><span class="line">    <span class="built_in">underInit</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">underDp</span>(r)-<span class="built_in">underDp</span>(l<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">25 50</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="Loj-10166-数字游戏"><a href="#Loj-10166-数字游戏" class="headerlink" title="Loj #10166 数字游戏"></a><a href="https://loj.ac/p/10166">Loj #10166 数字游戏</a></h3><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><p>与上一题差不了多少。预处理 $dp_{i,j,k}$ 表示 $i$ 位最高位为 $j$ 且模 $k$ 的计数即可。</p><h4 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC Code"></a>AC Code</h4><p>同样是迭代式写法。</p><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">21</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXMOD=<span class="number">101</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l,r,mod;</span><br><span class="line">ll dp[MAXN][<span class="number">10</span>][MAXMOD];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underMod</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i) dp[<span class="number">1</span>][i][i%mod]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;MAXN;++i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">9</span>;++k)</span><br><span class="line">                <span class="keyword">for</span>(re <span class="type">int</span> l=<span class="number">0</span>;l&lt;mod;++l)</span><br><span class="line">                    dp[i][j][l]+=dp[i<span class="number">-1</span>][k][<span class="built_in">underMod</span>(l-j)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">underDp</span><span class="params">(<span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!N) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;Num;</span><br><span class="line">    <span class="keyword">while</span>(N) Num.<span class="built_in">push_back</span>(N%<span class="number">10</span>),N/=<span class="number">10</span>;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> last=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=Num.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=Num[i];</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;x;++j) res+=dp[i+<span class="number">1</span>][j][<span class="built_in">underMod</span>(-last)];</span><br><span class="line">        last=<span class="built_in">underMod</span>(last+x);</span><br><span class="line">        <span class="keyword">if</span>(!i&amp;&amp;!last) ++res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;l&gt;&gt;r&gt;&gt;mod)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underInit</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">underDp</span>(r)-<span class="built_in">underDp</span>(l<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 19 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="Luogu-P6669-组合数问题"><a href="#Luogu-P6669-组合数问题" class="headerlink" title="Luogu P6669 组合数问题"></a><a href="https://www.luogu.com.cn/problem/P6669">Luogu P6669 组合数问题</a></h3><h4 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h4><p>其实这道题用记忆化要好些一些，一个五维数组记录位数，$n$ 数是否达到上限， $m$ 数是否达到上限，$n$和 $m$ 是否相同过以及 $n$ 是否小于过 $m$ 的情况。这里需要很多组合数的前置知识（比如<strong>卢卡斯定理</strong>）以优化。这里不多解释，有兴趣可以在洛谷上看题解。</p><h4 id="AC-Code-2"><a href="#AC-Code-2" class="headerlink" title="AC Code"></a>AC Code</h4><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">61</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,dp[MAXN][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>],N[MAXN],M[MAXN],k;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="function">ll <span class="title">underDfs</span><span class="params">(<span class="type">int</span> x,<span class="type">bool</span> qn,<span class="type">bool</span> qm,<span class="type">bool</span> dif,<span class="type">bool</span> sml)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> sml;</span><br><span class="line">    ll &amp;res=dp[x][qn][qm][dif][sml];</span><br><span class="line">    <span class="keyword">if</span>(~res) <span class="keyword">return</span> res;</span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cntN=qn?k<span class="number">-1</span>:N[x],cntM=qm?k<span class="number">-1</span>:M[x];</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=cntN;++i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;(j&lt;=i||dif)&amp;&amp;j&lt;=cntM;++j)</span><br><span class="line">            res=(res+<span class="built_in">underDfs</span>(x<span class="number">-1</span>,qn|(i&lt;cntN),qm|(j&lt;cntM),dif|(i!=j),sml|(i&lt;j)))%MOD;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;digit-dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(T),<span class="built_in">underRead</span>(k);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(n),<span class="built_in">underRead</span>(m);</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">        ll Max=<span class="built_in">underMax</span>(n,m),size=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(Max) Max/=k,++size;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=size;++i) N[i]=n%k,n/=k;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=size;++i) M[i]=m%k,m/=k;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">underDfs</span>(size,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 优化 </tag>
            
            <tag> 数位Dp </tag>
            
            <tag> Lucas定理 </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> 二项式定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI-Online 2022 提高组</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/noionline-senior-2022/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/noionline-senior-2022/</url>
      
        <content type="html"><![CDATA[<p>被单调队列了。</p><span id="more"></span><h2 id="T1-P8251-丹钓战"><a href="#T1-P8251-丹钓战" class="headerlink" title="T1 P8251 丹钓战"></a><a href="https://www.luogu.com.cn/problem/P8251">T1 P8251 丹钓战</a></h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>单调栈预处理出一个 $c$ 数组以记录每一个数对答案的贡献。然后将题意转化为求 $[l,r]$ 中小于 $l$ 的个数，每个元素对答案的贡献当且仅当其下的元素不在 $[l,r]$ 之间。用主席树维护即可。</p><p>官方时间复杂度 $O((n+q) \log n)$</p><p><del>考场没打出来，暴力30pt</del></p><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,T,Rt[MAXN],Idx,Ql,Qr;</span><br><span class="line"><span class="type">int</span> a[MAXN],b[MAXN],c[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PST</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,dat;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[x].dat=Tree[Tree[x].l].dat+Tree[Tree[x].r].dat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underBuild</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=++Idx;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">underBuild</span>(Tree[x].l,l,mid),<span class="built_in">underBuild</span>(Tree[x].r,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[++Idx]=Tree[x];</span><br><span class="line">    ++Tree[Idx].dat,x=Idx;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=mid) <span class="built_in">underModify</span>(Tree[x].l,l,mid,d);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">underModify</span>(Tree[x].r,mid+<span class="number">1</span>,r,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQuery</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==mid) <span class="keyword">return</span> Tree[Tree[x].l].dat;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;mid) <span class="keyword">return</span> <span class="built_in">underQuery</span>(Tree[x].l,l,mid,k);</span><br><span class="line">    <span class="keyword">return</span> Tree[Tree[x].l].dat+<span class="built_in">underQuery</span>(Tree[x].r,mid+<span class="number">1</span>,r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;stack.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;stack.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">underRead</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">underRead</span>(b[i]);</span><br><span class="line">    a[<span class="number">0</span>]=c[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    b[<span class="number">0</span>]=INF;</span><br><span class="line">    <span class="built_in">underBuild</span>(Rt[<span class="number">0</span>],<span class="number">0</span>,N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=T,mid;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(b[i]&lt;b[c[mid]]) l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(a[c[l]]==a[i]) --l;</span><br><span class="line">        T=l+<span class="number">1</span>;</span><br><span class="line">        c[T]=i;</span><br><span class="line">        Rt[i]=Rt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">underModify</span>(Rt[i],<span class="number">0</span>,N,c[l]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(Ql),<span class="built_in">underRead</span>(Qr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underQuery</span>(Rt[Qr],<span class="number">0</span>,N,Ql<span class="number">-1</span>)-<span class="built_in">underQuery</span>(Rt[Ql<span class="number">-1</span>],<span class="number">0</span>,N,Ql<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 4</span></span><br><span class="line"><span class="comment">3 1 3 1 2 3 3 2 1 1</span></span><br><span class="line"><span class="comment">10 10 2 9 7 5 4 7 6 1</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">7 8</span></span><br><span class="line"><span class="comment">7 10</span></span><br><span class="line"><span class="comment">1 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h2 id="T2-P8252-讨论"><a href="#T2-P8252-讨论" class="headerlink" title="T2 P8252 讨论"></a><a href="https://www.luogu.com.cn/problem/P8252">T2 P8252 讨论</a></h2><h2 id="T3-P8253-如何正确地排序"><a href="#T3-P8253-如何正确地排序" class="headerlink" title="T3 P8253 如何正确地排序"></a><a href="https://www.luogu.com.cn/problem/P8253">T3 P8253 如何正确地排序</a></h2>]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMQ </tag>
            
            <tag> 数论 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 分治 </tag>
            
            <tag> 单调栈 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
            <tag> 容斥原理 </tag>
            
            <tag> 三维偏序 </tag>
            
            <tag> CDQ分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构2022.03.20练习</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220320/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220320/</url>
      
        <content type="html"><![CDATA[<p>结果：C Accepted</p><p>改题进度：BC Accepted</p><span id="more"></span><h2 id="Task-One——Tree"><a href="#Task-One——Tree" class="headerlink" title="Task One——Tree"></a>Task One——Tree</h2><p>始终不得求解</p><h2 id="Task-Two——普通计算姬-common"><a href="#Task-Two——普通计算姬-common" class="headerlink" title="Task Two——普通计算姬(common)"></a>Task Two——普通计算姬(common)</h2><p><a href="https://hydro.ac/d/bzoj/p/4765">题目链接</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>求出该树的 $dfs$ 序。对于每一次询问，用树状数组或者线段树维护即可。对于修改，部分分做法即是对树状数组进行暴力修改。然而这样只能得 $90pt$ 。然后将整个 $dfs$ 序的序列进行分块，记录每一个点对每一个序列的贡献，修改序列和即可。最后一个点会爆 $long \ long$ ，需要开 $ull$ </p><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,u,v,op,Qf,Qs,Rt,Idx,Blo;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">&#125;Edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> Head[MAXN],Total,cnt[MAXN],pos[MAXN],r[MAXN][<span class="number">401</span>];</span><br><span class="line">ull Val[MAXN],Tre[MAXN],sum[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">&#125;Seg[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAddEdge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[u],v&#125;;Head[u]=Total;</span><br><span class="line">    Edge[++Total]=(edge)&#123;Head[v],u&#125;;Head[v]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underDfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Seg[x].l=++Idx;++cnt[pos[x]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Blo;++i) r[x][i]=cnt[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=Head[x];e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v!=last) <span class="built_in">underDfs</span>(v,x);</span><br><span class="line">    &#125;</span><br><span class="line">    Seg[x].r=Idx;--cnt[pos[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underLowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAdd</span><span class="params">(<span class="type">int</span> x,ull val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=N;x+=<span class="built_in">underLowbit</span>(x)) Tre[x]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">underQuery</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ull ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x&gt;=<span class="number">1</span>;x-=<span class="built_in">underLowbit</span>(x)) ans+=Tre[x];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">underCalc</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">underQuery</span>(r)-<span class="built_in">underQuery</span>(l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInitBlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> block=<span class="built_in">sqrt</span>(N);</span><br><span class="line">    Blo=(N%block)?(N/block+<span class="number">1</span>):(N/block);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) pos[i]=(i<span class="number">-1</span>)/Blo+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underUpdate</span><span class="params">(<span class="type">int</span> x,ull k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Blo;++i) sum[i]+=(ull)r[x][i]*k;</span><br><span class="line">    <span class="built_in">underAdd</span>(Seg[x].l,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">underAns</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ull res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos[r]-pos[l]&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i) res+=<span class="built_in">underCalc</span>(Seg[i].l,Seg[i].r);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=pos[l]*Blo;++i) res+=<span class="built_in">underCalc</span>(Seg[i].l,Seg[i].r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=pos[l]+<span class="number">1</span>;i&lt;=pos[r]<span class="number">-1</span>;++i) res+=sum[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=(pos[r]<span class="number">-1</span>)*Blo+<span class="number">1</span>;i&lt;=r;++i) res+=<span class="built_in">underCalc</span>(Seg[i].l,Seg[i].r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;common.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;common.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="built_in">underInitBlock</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">underRead</span>(Val[i]);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(u),<span class="built_in">underRead</span>(v);</span><br><span class="line">        <span class="keyword">if</span>(!u) Rt=v;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!u) Rt=u;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">underAddEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underDfs</span>(Rt,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">underUpdate</span>(i,Val[i]);</span><br><span class="line">    <span class="keyword">while</span>(M--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(op),<span class="built_in">underRead</span>(Qf),<span class="built_in">underRead</span>(Qs);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">underUpdate</span>(Qf,Qs-Val[Qf]);</span><br><span class="line">            Val[Qf]=Qs;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>,<span class="built_in">underAns</span>(Qf,Qs));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 4</span></span><br><span class="line"><span class="comment">0 0 3 4 0 1</span></span><br><span class="line"><span class="comment">0 1</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">2 1 2</span></span><br><span class="line"><span class="comment">1 1 1</span></span><br><span class="line"><span class="comment">2 3 6</span></span><br><span class="line"><span class="comment">2 3 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h2 id="Task-Three——文艺计算姬-art"><a href="#Task-Three——文艺计算姬-art" class="headerlink" title="Task Three——文艺计算姬(art)"></a>Task Three——文艺计算姬(art)</h2><p><a href="https://hydro.ac/d/bzoj/p/4766">题目链接</a></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>暴力取一些比较小的点，然后推公式。毕竟 $1 \leq n,m \leq 10^{18}$ 。</p><p>然后推得公式为 $ans=n^{m-1}m^{n-1}$ 。然后用快速幂即可。注意 $1e18*1e18$ 会爆 $long\ long$ 。所以需要快速乘。</p><h3 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll N,M,P,tot,ans;</span><br><span class="line"><span class="type">int</span> fa[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+m;++i) fa[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underFind</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">underFind</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underD</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> edge)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(edge==n+m<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++ans;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=n+<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">underFind</span>(i)!=<span class="built_in">underFind</span>(j))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> p1=<span class="built_in">underFind</span>(i),p2=<span class="built_in">underFind</span>(j);</span><br><span class="line">                fa[p1]=p2;</span><br><span class="line">                <span class="built_in">underD</span>(n,m,edge+<span class="number">1</span>);</span><br><span class="line">                fa[p1]=p1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">underSmi</span><span class="params">(ll a,ll b,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(res+a)%p;</span><br><span class="line">        a=(a+a)%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// printf(&quot;%lld %lld %lld\n&quot;,a,b,res);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">underQmi</span><span class="params">(ll a,ll b,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=<span class="built_in">underSmi</span>(res,a,p)%p;</span><br><span class="line">        a=<span class="built_in">underSmi</span>(a,a,p)%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;art.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;art.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M),<span class="built_in">underRead</span>(P);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">underSmi</span>(<span class="built_in">underQmi</span>(N,M<span class="number">-1</span>,P),<span class="built_in">underQmi</span>(M,N<span class="number">-1</span>,P),P));</span><br><span class="line">    <span class="comment">// printf(&quot;%lld %lld\n&quot;,N,M);</span></span><br><span class="line">    <span class="comment">/*for(re int i=1;i&lt;=N;++i)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for(re int j=1;j&lt;=M;++j)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            underInit(i,j);</span></span><br><span class="line"><span class="comment">            underD(i,j,0);</span></span><br><span class="line"><span class="comment">            printf(&quot;%d,%d=%lld\n&quot;,i,j,ans);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1,1=1</span></span><br><span class="line"><span class="comment">1,2=1</span></span><br><span class="line"><span class="comment">2,2=4</span></span><br><span class="line"><span class="comment">2,3=12</span></span><br><span class="line"><span class="comment">2,4=32</span></span><br><span class="line"><span class="comment">3,1=1</span></span><br><span class="line"><span class="comment">3,2=12</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">f(n,m)=n^(m-1)*m^(n-1)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> RMQ </tag>
            
            <tag> 数论 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 块状链表，块状数组，分块 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Dfs序 </tag>
            
            <tag> Prufer序 </tag>
            
            <tag> Matrix-Tree定理 </tag>
            
            <tag> LCA </tag>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3850书架</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p3850/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p3850/</url>
      
        <content type="html"><![CDATA[<p>“STL的妙用”</p><span id="more"></span><p>使用 $rope$ 轻松解决。</p><p><a href="https://violeteternal.github.io/Eternity/%E9%A2%98%E8%A7%A3/p4008">rope的使用</a></p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/rope&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,x;</span><br><span class="line">string t[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">rope&lt;<span class="type">int</span>&gt;R;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;rope.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;rope.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;t[R.<span class="built_in">size</span>()];</span><br><span class="line">        R.<span class="built_in">push_back</span>(R.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underRead</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;t[R.<span class="built_in">size</span>()];</span><br><span class="line">        <span class="built_in">underRead</span>(x);</span><br><span class="line">        R.<span class="built_in">insert</span>(x,R.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underRead</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(x);</span><br><span class="line">        cout&lt;&lt;t[R[x]]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
            <tag> STL </tag>
            
            <tag> rope </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dcoj2008 蜜雪冰城</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/dcoj2008/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/dcoj2008/</url>
      
        <content type="html"><![CDATA[<p>区间dp经典题</p><span id="more"></span><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定 $m$ 个三元组 $\{a_i,b_i,c_i\}$ ，表示第 $i$ 个人会选择区间 $[a_i,b_i]$ 中最便宜的值 $val_k$ 如果 $c_i \leq val_k$ 。设计一个长度为 $n$ 的数列 $val_i$ 使收益最大。</p><p>输出最大收益以及一种方案，含 $spj$ 。</p><p>样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#1 in:</span><br><span class="line">7 5</span><br><span class="line">1 4 7</span><br><span class="line">3 7 13</span><br><span class="line">5 6 20</span><br><span class="line">6 7 1</span><br><span class="line">1 2 5</span><br><span class="line"></span><br><span class="line">#1 out:</span><br><span class="line">43</span><br><span class="line">5 5 13 13 20 20 13</span><br><span class="line"></span><br><span class="line">#2 in:</span><br><span class="line">10 10</span><br><span class="line">1 7 3141</span><br><span class="line">2 8 5926</span><br><span class="line">3 5 5358</span><br><span class="line">1 9 9793</span><br><span class="line">5 10 2384</span><br><span class="line">4 7 6264</span><br><span class="line">5 9 3383</span><br><span class="line">9 10 27950</span><br><span class="line">3 8 2884</span><br><span class="line">1 7 1971</span><br><span class="line"></span><br><span class="line">#2 out:</span><br><span class="line">55021</span><br><span class="line">1971 2384 5358 6264 6264 6264 6264 2384 27950 27950</span><br></pre></td></tr></table></figure><p>数据范围：</p><p>$n \leq 50,m \leq 4000,1 \leq a_i \leq b_i \leq n,1 \leq c_i \leq 500000$</p><p>$subtask1:n=1$</p><p>$subtask2:n,m$</p><p>$subtask3:$无特殊限制</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先，我们必须明白：$val_k \in T,T=\{c_1,c_2…c_m\},k \in [1,n]$ 。这需要一些简单的证明，这里不多赘述。</p><h3 id="部分分"><a href="#部分分" class="headerlink" title="部分分"></a>部分分</h3><p>对于 $subtask1$ 而言，暴力枚举每一个价格，求出最大收益。期望得分： $30pt$</p><p>对于 $suntask2$ 而言，用 $O(2^m)$ 的时间暴力枚举每一个人是否会贡献答案。用线段树维护区间值，求出最大收益。时间复杂度 $O(2^m(n+m)\log n)$ ，期望得分： $60pt$ 。</p><p><del>这题确实良心</del></p><h3 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h3><p>首先离散化出有多少个不同的 $c_i$ ，用 $M$ 表示离散化之后的个数。我们设 $val_k$ 是区间 $[l,r]$ 之间的最小值。$(l \leq k \leq r)$ ，则对于任何一个 $l \leq a_i \leq b_i \leq r$  的人而言，他的答案贡献必定是 $val_k$ 。那么我们用 $dp_{l,r,v}$ 表示区间 $[l,r]$ 内最小值为 $v$ 已得到的最优解。$cnt_k$ 表示有多少个人对该点的答案有贡献。则转移方程为：</p><p>$dp_{l,r,v}=\max\{dp_{l,r,v},dp_{l,k-1,v_1}+dp_{k+1,r,v_2}+cnt_k*v\}(v \leq v_1,v_2 \leq c_M)$</p><p>也许你会直呼：<del>就这？</del></p><p>怎么可能！你算算复杂度：区间枚举 $O(n^3)$ 枚举价值 $O(m^3)$ 。加起来 $O(n^3m^3)$ 。过得了个寄！你说用四边形不等式优化到 $O(n^2m^3)$ ？开玩笑！？还不是过不了，何况这道题不能用四边形不等式优化。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>不能从 $n$ 入手，就优化 $m$ 。用一个数组 $g_{l,r,v}$ 预处理出 $\max\{dp_{l,r,v_1}\},v \leq v_1 \leq c_M$ 。直接优化成 $O(n^3m)$ 那过这道题就是氢氢忪忪了。</p><h3 id="输出方案"><a href="#输出方案" class="headerlink" title="输出方案"></a>输出方案</h3><p>记录每一种 $[l,r]$ 是从哪一个 $k$ 转移过来的即可。</p><h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">51</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">4001</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,a[MAXM],b[MAXM],c[MAXM],cnt[MAXM],ans;</span><br><span class="line"><span class="type">int</span> dp[MAXN][MAXN][MAXM],g[MAXN][MAXN][MAXM];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;V;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="built_in">sizeof</span>(cnt));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=a[i]&amp;&amp;b[i]&lt;=r&amp;&amp;a[i]&lt;=k&amp;&amp;k&lt;=b[i]) ++cnt[c[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num[MAXN][MAXN][MAXM],renum[MAXN][MAXN][MAXM];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPrint</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id=num[l][r][k];</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=id<span class="number">-1</span>) <span class="built_in">underPrint</span>(l,num[l][r][k]<span class="number">-1</span>,renum[l][id<span class="number">-1</span>][k]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,V[k<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(id+<span class="number">1</span>&lt;=r) <span class="built_in">underPrint</span>(id+<span class="number">1</span>,r,renum[id+<span class="number">1</span>][r][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;section-dp.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;section-dp.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(a[i]),<span class="built_in">underRead</span>(b[i]),<span class="built_in">underRead</span>(c[i]);</span><br><span class="line">        V.<span class="built_in">push_back</span>(c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>());</span><br><span class="line">    V.<span class="built_in">erase</span>(<span class="built_in">unique</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>()),V.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) c[i]=<span class="built_in">lower_bound</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>(),c[i])-V.<span class="built_in">begin</span>()+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=N;l&gt;=<span class="number">1</span>;--l)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r=l;r&lt;=N;++r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=l,sum;k&lt;=r;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">underInit</span>(l,r,k);</span><br><span class="line">                sum=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=V.<span class="built_in">size</span>();i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum+=cnt[i];</span><br><span class="line">                    ans=sum*V[i<span class="number">-1</span>]+g[l][k<span class="number">-1</span>][i]+g[k+<span class="number">1</span>][r][i];</span><br><span class="line">                    <span class="keyword">if</span>(ans&gt;dp[l][r][i]||!dp[l][r][i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[l][r][i]=ans;</span><br><span class="line">                        num[l][r][i]=k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=V.<span class="built_in">size</span>();k&gt;=<span class="number">1</span>;--k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[l][r][k]&gt;g[l][r][k+<span class="number">1</span>]||!g[l][r][k+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    g[l][r][k]=dp[l][r][k];</span><br><span class="line">                    renum[l][r][k]=k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    g[l][r][k]=g[l][r][k+<span class="number">1</span>];</span><br><span class="line">                    renum[l][r][k]=renum[l][r][k+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,g[<span class="number">1</span>][N][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">underPrint</span>(<span class="number">1</span>,N,renum[<span class="number">1</span>][N][<span class="number">1</span>]);</span><br><span class="line">    cerr&lt;&lt;endl&lt;&lt;<span class="string">&quot;time:&quot;</span>&lt;&lt;<span class="built_in">clock</span>()&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 5</span></span><br><span class="line"><span class="comment">1 4 7</span></span><br><span class="line"><span class="comment">3 7 13</span></span><br><span class="line"><span class="comment">5 6 20</span></span><br><span class="line"><span class="comment">6 7 1</span></span><br><span class="line"><span class="comment">1 2 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 区间dp </tag>
            
            <tag> 离散化 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间dp</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-of-section/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-of-section/</url>
      
        <content type="html"><![CDATA[<p>“随着方程推进，我对你的爱达到了最优解”</p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在区间上进行动态规划，从而求解一段区间上的最优解。通过合并小区间递推出大区间的 $dp$ 算法。</p><h2 id="思路-实现"><a href="#思路-实现" class="headerlink" title="思路/实现"></a>思路/实现</h2><p><strong>合并</strong>：即将两个或多个部分进行整合，当然也可以反过来；</p><p><strong>特征</strong>：能将问题分解为能两两合并的形式；</p><p><strong>求解</strong>：对整个问题设最优值，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值。</p><p>一般来说，其转移方程都与：</p><p>$dp_{i,j}=\max\{dp_{i,j},dp_{i,k}+dp_{k,j}+cost_k\},k \in [l,r]$</p><p>类似。注意，此处的 $\max$ 并不一定指数值上的较大值。</p><p>一般来说，能够达到 $O(n^3)$ 复杂度的题都要考虑区间 $dp$ 。对于小部分题而言，能够用<strong>四边形不等式</strong>优化到 $O(n^2)$ 。</p><h3 id="区间dp的三种写法"><a href="#区间dp的三种写法" class="headerlink" title="区间dp的三种写法"></a>区间dp的三种写法</h3><p>都可以证明出是从小区间到大区间。</p><p>$len$ 表示区间长度，$l$ 表示左端点， $r$ 表示右端点。$k$ 为枚举点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">1</span>;len&lt;=n;++len)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=n-len+<span class="number">1</span>;++l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> r=l+len<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;=r;++k)</span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=n;l&gt;=<span class="number">1</span>;--l)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> r=l;r&lt;=n;++r)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;=r;++k)</span><br><span class="line">            <span class="comment">//do something</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> r=<span class="number">1</span>;r&lt;=n;++r)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=r;l&gt;=<span class="number">1</span>;--l)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;=r;++k)</span><br><span class="line">            <span class="comment">//do something</span></span><br></pre></td></tr></table></figure><p>没什么太大区别，看自己习惯。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="Luogu-P1880-NOI1995-石子合并"><a href="#Luogu-P1880-NOI1995-石子合并" class="headerlink" title="Luogu P1880 [NOI1995] 石子合并"></a><a href="https://www.luogu.com.cn/problem/P1880">Luogu P1880 [NOI1995] 石子合并</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定 $n$ 个数，每次操作将相邻两堆合并。得分为两个数字的和。求最大得分和最小的分。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><strong>暴力</strong>：</p><p>暴力合并，时间复杂度 $O(n!)$</p><p><strong>区间dp</strong>：</p><p>对于每一个状态 $dp_{i,j}$ 都可由 $dp_{i,k}$ 与 $dp_{k+1,j}$ 转移而来。</p><p>$dp_{i,j}=\max\{dp_{i,j},dp_{i,k}+dp_{k+1,j}\},k \in [i,j]$</p><p>具体过程还需读者自行思考。</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">int</span> n,Stone[<span class="number">201</span>];</span><br><span class="line"><span class="type">int</span> StonePrime[<span class="number">201</span>];</span><br><span class="line"><span class="type">int</span> F[<span class="number">201</span>][<span class="number">201</span>],MaxG;</span><br><span class="line"><span class="type">int</span> G[<span class="number">201</span>][<span class="number">201</span>],MinF=<span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b?b:a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">F[i][i]=<span class="number">0</span>;</span><br><span class="line">G[i][i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">StonePrime[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Stone[i]);</span><br><span class="line">Stone[i+n]=Stone[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i)</span><br><span class="line">&#123;</span><br><span class="line">StonePrime[i]=Stone[i]+StonePrime[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">1</span>;p&lt;n;++p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=p+i;(i&lt;n*<span class="number">2</span>)&amp;&amp;(j&lt;<span class="number">2</span>*n);++i,j=p+i)</span><br><span class="line">&#123;</span><br><span class="line">F[i][j]=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;j;++k)</span><br><span class="line">&#123;</span><br><span class="line">F[i][j]=<span class="built_in">Min</span>(F[i][j],F[i][k]+F[k+<span class="number">1</span>][j]+StonePrime[j]-StonePrime[i<span class="number">-1</span>]);</span><br><span class="line">G[i][j]=<span class="built_in">Max</span>(G[i][j],G[i][k]+G[k+<span class="number">1</span>][j]+StonePrime[j]-StonePrime[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">MinF=<span class="built_in">Min</span>(MinF,F[i][i+n<span class="number">-1</span>]);</span><br><span class="line">MaxG=<span class="built_in">Max</span>(MaxG,G[i][i+n<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>,MinF,MaxG);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">4 5 9 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="Luogu-P1063-NOIP2006-提高组-能量项链"><a href="#Luogu-P1063-NOIP2006-提高组-能量项链" class="headerlink" title="Luogu P1063 [NOIP2006 提高组] 能量项链"></a><a href="https://www.luogu.com.cn/problem/P1063">Luogu P1063 [NOIP2006 提高组] 能量项链</a></h3><h4 id="转移方程"><a href="#转移方程" class="headerlink" title="转移方程"></a>转移方程</h4><p>$dp_{l,r}=\max\{dp_{l,r},dp{l,k}+dp{k,r}+val_l<em>val_k</em>val_r\},k \in [l,r]$</p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">int</span> n,Power[<span class="number">201</span>];</span><br><span class="line"><span class="type">int</span> G[<span class="number">201</span>][<span class="number">201</span>],MaxG;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b?b:a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Power[i]);</span><br><span class="line">Power[i+n]=Power[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n*<span class="number">2</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>;i-j&lt;n&amp;&amp;j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=j;k&lt;i;++k)</span><br><span class="line">&#123;</span><br><span class="line">G[j][i]=<span class="built_in">Max</span>(G[j][i],G[k+<span class="number">1</span>][i]+G[j][k]+Power[j]*Power[k+<span class="number">1</span>]*Power[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">MaxG=<span class="built_in">Max</span>(MaxG,G[j][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,MaxG);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">2 3 5 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="其他题目"><a href="#其他题目" class="headerlink" title="其他题目"></a>其他题目</h3><p><a href="https://violeteternal.github.io/Eternity/题解/dcoj2008">DCOJ#.2008蜜雪冰城</a></p><p><a href="">LuoguP1436棋盘分割</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 区间dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4008 [NOI2003]文本编辑器</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p4008/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p4008/</url>
      
        <content type="html"><![CDATA[<p>我愿称之为最强 $STL$ ！！！</p><span id="more"></span><script src="/js/mathjax.js"></script><h3 id="Rope"><a href="#Rope" class="headerlink" title="Rope"></a>Rope</h3><p>学习了一种超级强大的 $STL$ ，甚至于很多竞赛禁止使用。</p><blockquote><p>$rope$</p></blockquote><p>非标准 $STL$ ，仅能在 $C++11$ 以后使用。</p><p>需要头文件 <code>#include&lt;ext/rope&gt;</code></p><p>并需要 <code>using namespace __gnu_cxx;</code></p><p>定义为 <code>rope&lt;变量类型&gt;变量名</code> 或 <code>crope 变量名称</code></p><p><code>crope R</code> 其实就是 <code>rope&lt;char&gt;R</code></p><p>结合了<strong>链表</strong>和<strong>数组</strong>各自优点的块状链表。内部结构<strong>可持久化平衡树</strong>套<strong>红黑树</strong>。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><code>push_back(x)</code> : 在末尾添加 $x$  ( $x$ 是 <code>char</code> 类型的)。</p><p><code>insert(pos,x)</code>:在 $pos$ 插入 $x$  ( $x$ 是字符串, $x$ 后面加个 $int$ 参数可以只能 $x$ 中插入几个)。</p><p><code>erase(pos,x)</code>: 从 $pos$ 开始删除 $x$ 个。</p><p><code>replace(pos,x)</code>: 从 $pos$ 开始换成 $x$ ( $x$ 是字符串, $x$ 后面加个 $int$ 参数可以只能 $x$ 中的前几个)。</p><p><code>substr(pos,x)</code>提取 $pos$ 开始 $x$ 个。</p><p><code>copy(pos,len,x)</code>:从 $pos$ 到 $pos+len$ 替换成 $x$ 。</p><p>访问：同数组，用<code>R[x]</code>即可。大部分操作都是 $O(\log n)$ 的复杂度。</p><h2 id="该题"><a href="#该题" class="headerlink" title="该题"></a>该题</h2><p>当用上 $rope$ 后，可持久的紫题没有丝毫威严。</p><p>吸氧过：</p><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/rope&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,pos;</span><br><span class="line">string Str;</span><br><span class="line">rope&lt;<span class="type">char</span>&gt;R;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;rope.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;rope.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;Str;</span><br><span class="line">        <span class="keyword">if</span>(Str[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k;</span><br><span class="line">            <span class="built_in">underRead</span>(k);</span><br><span class="line">            pos=k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Str[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="built_in">underRead</span>(n);</span><br><span class="line">            <span class="type">char</span> ch;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                ch=<span class="built_in">gh</span>();</span><br><span class="line">                <span class="keyword">if</span>(ch&lt;<span class="number">32</span>||ch&gt;<span class="number">126</span>) --i;</span><br><span class="line">                <span class="keyword">else</span> R.<span class="built_in">insert</span>(pos+i,ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Str[<span class="number">0</span>]==<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="built_in">underRead</span>(n);</span><br><span class="line">            R.<span class="built_in">erase</span>(pos,n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Str[<span class="number">0</span>]==<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="built_in">underRead</span>(n);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) cout&lt;&lt;R[pos+i];</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Str[<span class="number">0</span>]==<span class="string">&#x27;P&#x27;</span>) --pos;</span><br><span class="line">        <span class="keyword">else</span> ++pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">Insert 26</span></span><br><span class="line"><span class="comment">abcdefghijklmnop</span></span><br><span class="line"><span class="comment">qrstuv wxy</span></span><br><span class="line"><span class="comment">Move 15</span></span><br><span class="line"><span class="comment">Delete 11</span></span><br><span class="line"><span class="comment">Move 5</span></span><br><span class="line"><span class="comment">Insert 1</span></span><br><span class="line"><span class="comment">^</span></span><br><span class="line"><span class="comment">Next</span></span><br><span class="line"><span class="comment">Insert 1</span></span><br><span class="line"><span class="comment">_</span></span><br><span class="line"><span class="comment">Next</span></span><br><span class="line"><span class="comment">Next</span></span><br><span class="line"><span class="comment">Insert 4</span></span><br><span class="line"><span class="comment">.\/.</span></span><br><span class="line"><span class="comment">Get 4</span></span><br><span class="line"><span class="comment">Prev</span></span><br><span class="line"><span class="comment">Insert 1</span></span><br><span class="line"><span class="comment">^</span></span><br><span class="line"><span class="comment">Move 0</span></span><br><span class="line"><span class="comment">Get 22</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">Insert 5 opres</span></span><br><span class="line"><span class="comment">Get 3</span></span><br><span class="line"><span class="comment">Next</span></span><br><span class="line"><span class="comment">Next</span></span><br><span class="line"><span class="comment">Get 3</span></span><br><span class="line"><span class="comment">Insert 10 undertales</span></span><br><span class="line"><span class="comment">Move 6</span></span><br><span class="line"><span class="comment">Get 10</span></span><br><span class="line"><span class="comment">Delete 1</span></span><br><span class="line"><span class="comment">Get 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 块状链表，块状数组，分块 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> STL </tag>
            
            <tag> 递归 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
            <tag> rope </tag>
            
            <tag> 可持久化平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1503 鬼子进村</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p1503/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p1503/</url>
      
        <content type="html"><![CDATA[<p>$Splay$</p><span id="more"></span><p>求前驱后继。</p><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Idx,Vis[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Splay</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> chi[<span class="number">2</span>],fa;</span><br><span class="line">    <span class="type">int</span> size,val;</span><br><span class="line">&#125;Tree[MAXN];</span><br><span class="line"><span class="type">int</span> Root,Qx;</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[x].size=Tree[Tree[x].chi[<span class="number">0</span>]].size+Tree[Tree[x].chi[<span class="number">1</span>]].size+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">    <span class="type">int</span> k=Tree[y].chi[<span class="number">1</span>]==x;</span><br><span class="line">    Tree[z].chi[Tree[z].chi[<span class="number">1</span>]==y]=x;</span><br><span class="line">    Tree[x].fa=z;</span><br><span class="line">    Tree[y].chi[k]=Tree[x].chi[k^<span class="number">1</span>];</span><br><span class="line">    Tree[Tree[x].chi[k^<span class="number">1</span>]].fa=y;</span><br><span class="line">    Tree[x].chi[k^<span class="number">1</span>]=y;</span><br><span class="line">    Tree[y].fa=x;</span><br><span class="line">    <span class="built_in">underPushUp</span>(y);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Tree[x].fa!=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">        <span class="keyword">if</span>(z!=k)</span><br><span class="line">            <span class="keyword">if</span>((Tree[y].chi[<span class="number">1</span>]==x)^(Tree[z].chi[<span class="number">1</span>]==y))</span><br><span class="line">                <span class="built_in">underRotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">underRotate</span>(y);</span><br><span class="line">        <span class="built_in">underRotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!k) Root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInsert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,p;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        p=u;</span><br><span class="line">        u=Tree[u].chi[x&gt;Tree[u].val];</span><br><span class="line">    &#125;</span><br><span class="line">    u=++Idx;</span><br><span class="line">    <span class="keyword">if</span>(p) Tree[p].chi[x&gt;Tree[p].val]=u;</span><br><span class="line">    Tree[u].val=x;</span><br><span class="line">    Tree[u].size=<span class="number">1</span>;</span><br><span class="line">    Tree[u].fa=p;</span><br><span class="line">    <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Root=++Idx;</span><br><span class="line">    Tree[Root].fa=<span class="number">0</span>;</span><br><span class="line">    Tree[Root].val=<span class="number">0</span>;</span><br><span class="line">    Tree[Root].size=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">underInsert</span>(N+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetPre</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].val&lt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetNxt</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].val&gt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underErase</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">underGetPre</span>(x),r=<span class="built_in">underGetNxt</span>(x);</span><br><span class="line">    <span class="built_in">Splay</span>(l,<span class="number">0</span>),<span class="built_in">Splay</span>(r,l);</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].size=<span class="number">0</span>;</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].fa=<span class="number">0</span>;</span><br><span class="line">    Tree[r].chi[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Splay</span>(r,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> top,S[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;splay.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;splay.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="built_in">underInit</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">underRead</span>(Qx);</span><br><span class="line">            <span class="built_in">underInsert</span>(Qx);</span><br><span class="line">            S[++top]=Qx;</span><br><span class="line">            Vis[Qx]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Vis[S[top]]=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">underErase</span>(S[top--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">underRead</span>(Qx);</span><br><span class="line">            <span class="keyword">if</span>(Vis[Qx]) <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Tree[<span class="built_in">underGetNxt</span>(Qx)].val-Tree[<span class="built_in">underGetPre</span>(Qx)].val<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 9</span></span><br><span class="line"><span class="comment">D 3</span></span><br><span class="line"><span class="comment">D 6</span></span><br><span class="line"><span class="comment">D 5</span></span><br><span class="line"><span class="comment">Q 4</span></span><br><span class="line"><span class="comment">Q 5</span></span><br><span class="line"><span class="comment">R</span></span><br><span class="line"><span class="comment">Q 4</span></span><br><span class="line"><span class="comment">R</span></span><br><span class="line"><span class="comment">Q 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
            <tag> Treap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2073 送花</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p2073/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p2073/</url>
      
        <content type="html"><![CDATA[<script src="/js/mathjax.js"></script><p>$STL\ yyds!$</p><span id="more"></span><p>敲了半天的 $Splay$ 无果后索性换 $stl$ ，没想到居然还跑进了最优解！？<del>顺便学了一下 $map$</del></p><details>    <summary>AC Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">map&lt;ll,ll&gt;M;</span><br><span class="line">ll op,w,c;</span><br><span class="line">ll res,ans;</span><br><span class="line"><span class="comment">/*int M,Idx,op;</span></span><br><span class="line"><span class="comment">struct Val</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int w,c;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">struct Splay</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int chi[2],fa;</span></span><br><span class="line"><span class="comment">    int num,size;</span></span><br><span class="line"><span class="comment">    Val val;</span></span><br><span class="line"><span class="comment">&#125;Tree[MAXN];</span></span><br><span class="line"><span class="comment">int Root;</span></span><br><span class="line"><span class="comment">int Vis[MAXN],ans;</span></span><br><span class="line"><span class="comment">inline void underPushUp(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    Tree[x].size=Tree[Tree[x].chi[0]].size+Tree[Tree[x].chi[1]].size+Tree[x].num;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underRotate(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int y=Tree[x].fa,z=Tree[y].fa;</span></span><br><span class="line"><span class="comment">    int k=Tree[y].chi[1]==x;</span></span><br><span class="line"><span class="comment">    Tree[z].chi[Tree[z].chi[1]==y]=x;</span></span><br><span class="line"><span class="comment">    Tree[x].fa=z;</span></span><br><span class="line"><span class="comment">    Tree[y].chi[k]=Tree[x].chi[k^1];</span></span><br><span class="line"><span class="comment">    Tree[Tree[x].chi[k^1]].fa=y;</span></span><br><span class="line"><span class="comment">    Tree[x].chi[k^1]=y;</span></span><br><span class="line"><span class="comment">    Tree[y].fa=x;</span></span><br><span class="line"><span class="comment">    underPushUp(y);</span></span><br><span class="line"><span class="comment">    underPushUp(x);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void Splay(int x,int k)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    while(Tree[x].fa!=k)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int y=Tree[x].fa,z=Tree[y].fa;</span></span><br><span class="line"><span class="comment">        if(z!=k)</span></span><br><span class="line"><span class="comment">            if((Tree[y].chi[1]==x)^(Tree[z].chi[1]==y))</span></span><br><span class="line"><span class="comment">                underRotate(x);</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">                underRotate(y);</span></span><br><span class="line"><span class="comment">        underRotate(x);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(!k) Root=x;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">bool f;</span></span><br><span class="line"><span class="comment">inline void underInsert(Val x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int u=Root,p;</span></span><br><span class="line"><span class="comment">    while(u)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if(Tree[u].val.c==x.c)</span></span><br><span class="line"><span class="comment">        &#123;  </span></span><br><span class="line"><span class="comment">            f=1;</span></span><br><span class="line"><span class="comment">            return ;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        p=u;</span></span><br><span class="line"><span class="comment">        u=Tree[u].chi[x.c&gt;Tree[u].val.c];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    u=++Idx;</span></span><br><span class="line"><span class="comment">    if(p) Tree[p].chi[x.c&gt;Tree[p].val.c]=u;</span></span><br><span class="line"><span class="comment">    Tree[u].val.c=x.c;</span></span><br><span class="line"><span class="comment">    Tree[u].val.w=x.w;</span></span><br><span class="line"><span class="comment">    Tree[u].size=1;</span></span><br><span class="line"><span class="comment">    Tree[u].fa=p;</span></span><br><span class="line"><span class="comment">    Tree[u].num=1;</span></span><br><span class="line"><span class="comment">    Splay(u,0);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underInit()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    Root=++Idx;</span></span><br><span class="line"><span class="comment">    Tree[Root].fa=0;</span></span><br><span class="line"><span class="comment">    Tree[Root].num=1;</span></span><br><span class="line"><span class="comment">    Tree[Root].size=1;</span></span><br><span class="line"><span class="comment">    Tree[Root].val.c=INF;</span></span><br><span class="line"><span class="comment">    Val u;</span></span><br><span class="line"><span class="comment">    u.w=0,u.c=-INF;</span></span><br><span class="line"><span class="comment">    underInsert(u);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline int underGetPre(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int u=Root,res,v=Root;</span></span><br><span class="line"><span class="comment">    while(u)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        v=u;</span></span><br><span class="line"><span class="comment">        if(Tree[u].val.c&lt;x)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            res=u;</span></span><br><span class="line"><span class="comment">            u=Tree[u].chi[1];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else u=Tree[u].chi[0];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Splay(v,0);</span></span><br><span class="line"><span class="comment">    return res;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline int underGetNxt(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int u=Root,res,v=Root;</span></span><br><span class="line"><span class="comment">    while(u)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        v=u;</span></span><br><span class="line"><span class="comment">        if(Tree[u].val.c&gt;x)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            res=u;</span></span><br><span class="line"><span class="comment">            u=Tree[u].chi[0];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else u=Tree[u].chi[1];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Splay(v,0);</span></span><br><span class="line"><span class="comment">    return res;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underErase(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int l=underGetPre(x),r=underGetNxt(x);</span></span><br><span class="line"><span class="comment">    Splay(l,0),Splay(r,l);</span></span><br><span class="line"><span class="comment">    Tree[Tree[r].chi[0]].fa=0;</span></span><br><span class="line"><span class="comment">    Tree[r].chi[0]=0;</span></span><br><span class="line"><span class="comment">    Splay(r,0);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;splay.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;splay.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">/*underInit();*/</span></span><br><span class="line">    map&lt;ll,ll&gt;::iterator it;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">underRead</span>(w),<span class="built_in">underRead</span>(c);</span><br><span class="line">            <span class="comment">// if(M.count(c)) continue;</span></span><br><span class="line">            M.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(c,w));</span><br><span class="line">            <span class="comment">/*Val Q;</span></span><br><span class="line"><span class="comment">            scanf(&quot;%d%d&quot;,&amp;Q.w,&amp;Q.c);</span></span><br><span class="line"><span class="comment">            f=0;</span></span><br><span class="line"><span class="comment">            underInsert(Q);</span></span><br><span class="line"><span class="comment">            if(f) Vis[Q.c]=Q.w;</span></span><br><span class="line"><span class="comment">            ans+=Q.w;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>&amp;&amp;!M.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            it=M.<span class="built_in">begin</span>();</span><br><span class="line">            M.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="comment">/*int x=underGetPre(INF);</span></span><br><span class="line"><span class="comment">            if(!Vis[Tree[x].val.c]) continue;</span></span><br><span class="line"><span class="comment">            underErase(Tree[x].val.c);</span></span><br><span class="line"><span class="comment">            ans-=Vis[Tree[x].val.c];</span></span><br><span class="line"><span class="comment">            Vis[Tree[x].val.c]=0;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>&amp;&amp;!M.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            it=M.<span class="built_in">end</span>();</span><br><span class="line">            M.<span class="built_in">erase</span>(--it);</span><br><span class="line">            <span class="comment">/*int x=underGetNxt(-INF);</span></span><br><span class="line"><span class="comment">            if(!Vis[Tree[x].val.c]) continue;</span></span><br><span class="line"><span class="comment">            underErase(Tree[x].val.c);</span></span><br><span class="line"><span class="comment">            ans-=Vis[Tree[x].val.c];</span></span><br><span class="line"><span class="comment">            Vis[Tree[x].val.c]=0;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(map&lt;ll,ll&gt;::iterator i=M.<span class="built_in">begin</span>();i!=M.<span class="built_in">end</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=(*i).second;</span><br><span class="line">        res+=(*i).first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld&quot;</span>,ans,res);</span><br><span class="line">    <span class="comment">/*printf(&quot;%d&quot;,ans);*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 1 1</span></span><br><span class="line"><span class="comment">1 2 5</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1 3 3</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 5 2</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
            <tag> STL </tag>
            
            <tag> 单调队列 </tag>
            
            <tag> map </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>S.H.A.D.O.W</title>
      <link href="/Eternity/Until-The-End/2022-middle/"/>
      <url>/Eternity/Until-The-End/2022-middle/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6fe7bb59d02c57babadc684c508b36cf70ed125f878b266a45b6ccc570beafca">14efcbdfd474efdf0e2e4c1faeb6cebe83378c12d0c7bf6977f3ab38867a6d7d7aa298b916287ea14250181d451aa6bf23a84f7f09995f535488ddd6d3d6aaa0dd3a0ca6e8b001976fa0a56f26f71ac4f7ac8f37c69adcf0610ba983c64b91240a1b202ac0e3c5daa38d5016e17808fc0703283a841c6c3221d2ad4fc489586656ea66d800ddea3a4b7736a0b50f2beff86316c9cf23f528007920a18e91d522ea1ef5eccf1f41fc01fc68c87bb23188a73c1c24697e67dff2a4ff42ff2cc1b11a938ee788e6ab04b989e661721dfa64f3e0d1a19e9a398dead2ead39f8436d7bd1212055c2a55b057c4fc1c8156168a07aa0277f5faf8d4f25b0b169c27f585122b3ef0acb4bb1a3f0161ffb98b30c2063610a935e676e4dc1faeb1df4574c76f4c0e6546a6542bcf9f2d182c1e7a23dbc7e93bc3d8cf3e1bbc863e1aa8c929dcd22c47d38372ed6dabc2bb51eee446b9da4b72449edcb1c7a33b3726a83fedebeb8313f8cd847a9c2f4870ce162935e5192c4e93e964eb5c8bf3924a6a41809979e34c857c2c968009da0a339df4213bbd52b6b66bcc26137f67c1dc385d63cd563fce905b71d01ebcc36c5f67f92bd3b267141ce07d16641ead98a99025c3bb47a584f3dac341254593e0d1a82061deb5f9907721e53d62fac3ecbb682320ca09f20e57ee708b7845d6d364f597c74761e50931df8de7a1f4b309a8176322f1ffa67b457ef9e50a786aeab470fd2037e4876535aa394455cc4f9c22dd06886c99eea8825d9cc261f388a9368502ad7b57275588b2b9390acc7f8294a42f1a75236f9d746d1ae47df568f0ea92c404ab51647c9ae100321194a392dccc98e6671094a6e2eedc8b623491855c46d7dd4eccb2d9e8e5491f51a318a877182e9b931fe80e2f819f224f90cadc6dd4e31b6d7a1ef5ab7f4c8c6375fef2941c1f449151effbff5e1b83848bfa0bc3779e911bf4e9738bda6d5c8882ae2ca78f1e2eb01dfa1edb3713722b60a87e8f73209ea64ca1d280e7c36cc7b5953f3ad5d7017e8b4e23c6d05e03a7e943d75a28748875b52ac72a439131420bbd4e2231c40b967a444411ad28ef44def4e4671ff3ee59da770766a787e302c531be1ccff3e3dc613898538cb65144fe85a94d3076069be7719a834184dcae0a9b4b7585a7e60f71de0ea0b64a16c5c379e6a576f36dde2c5e142d040780729b8753d065b552ff9930e0aefedf003da2f5f6dd1362aa6ec864993289a56d0737a377370e1c8523d2478293a506d5e4f9f25038915c458ca3886e88c775a9adb28affce0ca2c295c0b1148baa909d413f2e31ddd051f22420e4354861b80db453e5a834174f6790b5c9836b8de6cce7ec168771384c3ab8313126383dabb0f6deb47a2cbacc0b2811500a4541a8ba406b50102570b750c0707e86bd711c6162968f076677dccc2b354bb40e8842469366ff94b714ef313461f85ab0bb56db116267c4933305ae2ea7264ca3caf5644bb1bcb6a7489806542b0b75b1ff8246c6a59aac7c90f711c07b1891cb3d914390a84aad4e8989b7d28076970748d73edf85bc5a72e1610d884353cc556fe542de9b4c3915c5abb7f86d7cba611a4941b9763fc856fead19174e002e699b426bbdbd19362d6878d128f92a96eb815e93d2c5fcf9685488c5bd73e120d3daa7d3484c6dafae9391fe07631346e10521148ed8bb7bdb32aed126015c250fff0a6efbeffe90cfbb493b89fb13d50cc0a9760cfc1d244346b4c8793dd975c0f10423d1a3bce3ff8f9b6435191e72dc7861cda88468815c60258c7fed092b61ef3283a88182ee71612c4a4c64595964b922bbdd6c2938b261659b97366b73f6f8c900c60faeb04e40a1fcd4990d6f54e0d06ab84b2c22c1c7f2b62207bc590eb03a97a0ff6d4fb4b4a6b4832e47ed445956b569249509813f1ac7db7da80f558de38e6e5a5ab8b0f451abc4d5b795525e337f2488d5f1be96e1b6785d69b8925377cc2bbebcd4da6ff9586092decc483d7718e0e22dafc85283607f31920c499d5665f627f3da913e1ef749f8a54d9aa7474e690a2b5d2b24e140fa02679f6b8911fb5244a1f66165227043f374220a4a53919a20320a1eece517e3dcda850b460560f6213b38f5e1b1df510aaa913f5a7f3838717520e8c8f5ff9910c4dd455811b1fcbf8e53e85e60d349314df231790940885619c4e3a3eefd678b66f7fc1d256a61f4730adfd7214335cacace1d078194e765d3cad2a98ddf490fb389e6791eebe2845d2ffaa36d297a7bdcb211d92ff2a8efdd5d498fc41d08749d29597bc4d1b8a24f1035611dfb17f490582393478aefa94fdaccbc49abb16fc5933fee3485a761093a425d8ff45f00ff6bdd218281bab6cd2b04e407d336d80c459f94842d314c1941d4399b1ea9a5e6855a664bb0775e22d79f95538e8fbb88fa10f57bf7de01221f520aef347f14b1fc9145bd5906c29ee5959d96c6a46950cedf419e986e24663f8a7d3dbc7c0efb118e847a97dd449b2f63ef9b55f7bece68266e3f557900217c5e27a42ea0f0303d027ae8879e5eda77b7ae4c367591d2183d38cc1557e5a0985ed7b6e1f78e49cf188dbf5f6d53360f2986c948c12ebe14c6c5805031aa6a9339844e584e1fa8ece0de3978b42205668836c7079b0a386740ae12aea27485f1c44104e642c0d04bd5796aae42bd92c5a163f22ba2fe781f5de45de6139e2dc469e963d2e3c55e762b9ab12f61d982f541371e984b823d29f95a1926dc7da08b4909bb17528f55ffeacd41eeae9b15b58250b6a94b07bcc28e2cbc52cdd876033f71ba4773810f2130aed2b05b1fb5e1f5fc06d5d4a9c59033e37d25bee205d971653aeb0f21511b9945828ade13c9cc063bf2217c2d187f23ac0c1a4b4b0d13880353d5ee9728c78680470f834f3ceb812daf2b25bdcd194d983f2e3dc2ce968410a2d50c277c9bbd677db05cb5e3faa8674afa0c54433dd6d951f153aee39ec45ced0b10447251b6dfb5a27f822f1fbf10092c5dcb4b2ea0f31fe68c7acfa7bfe04cb34899e5df37b49b34d6d134e7b95ef0f53f7e12f600a7c851941d0f32a6d89b0443d65f46653b2f3d908d62db602f1d2dc801392d22aadd11bec2ef3b6a7e2e56cca74d1dccdfa20745af56f92f37d586d364d705c7145f2df77206d4c4a06d8ccde09e38ea2ff8bb9f1d72c60a080cde413cef26536d54bba889a7c8279b9b4c9ae6343ae459fb31c1b39923119638cbc7ef15a4382cc58b9519279020765a8ce5853640402fff77d8935fea4be69bee0c03393772705aaee7447ce9454c822efacc273e669864e031f130dcefec5b20502247f86e89cf9c2f4f2df347634e6dfca30edb64666355aecdf3ac62a6ffad94c0aaf6beaf4ad7fc008136a4921d8e3f30d2e6071f94a6d23e8adefdc9a7ea4c26214b995f36edb20b1d1d688d4c3f8df1cfec5a758e29991ee13c0b3c65c261f972c29c4535656bbeb34c19275d404592d66251934a31ea7cd1445474ff5926c36385df5ff0273fe1618cf0c80017918f08600887582e1c0e0f5193ea23820fe24f188730d54b44d2c34dec1b77f9c9511ea6be4545b308ed3da7fb6fb877ef836a918f1a5e166a57f0ee49ce36162f4a81d8bbd3555ae2ff9bc30c4f2f8bd027d71886a9244e8dd59bb7102220836123e1b46ffb03ca5f47f945ed6a3540b6cc271544ca5ed51002d25290b64d9ecb5e8b68ab135eee3033a56ced03d92e8a7ee8b82490f80ca1dbec734a81139d9e5193b30c6dbe198bc008749a99f92d090a63b83562549aec4fd8aedccb746fc233f14d96be039b2a0e67a8012a1ca549dda69dadbf2ecaafb04356937ba995a375e9c45babf743243529038bf6b63780c6b5d8845510aa1fde2e46d3432c48eddc128fb968bcae9c296234dff26e0213a871a8b5ac3b08feabcbad9e1ac15353abb4c4186b65d3667fd2c9eeb19bc70a3064fa3c30579518e69406b844e1e211c4070222f2b3d483149f8fe139612494547cc296a989916f2c89721616e1848d2cefa2b6b47ca6b6cf02ef1f44d33b9cd80caed4a76c37de7e468f80175a596b568a8d9dd8a2290423bc42b87da544c2488b1c6ad3fcb38727de0be1f26b96c40258e566c3a1ea31f84e3a42e9996c96b75a149e9888312edd3c71a163c4394215bc63b103f450cec3237c4523753429c424bfa88e0a60764e8a916de4591a7bf0497b73318a48b6930893c761686bb5890f838544394036c9490fdcdb52ddc748d722cd3f56d9d447852dd3d3392edc03422d271847820df88450cf7219cfb2f2e6f9bc6046e93c2f9fb522f2820d83e84f8030c56a60e6e8669fa9a239dcafbc1f5a1efd1210e3201f46cbe134c65eeec5e8cb9792a9d73aaa874951111487e2a7c7efb720fb72dd314e65acd230a3214eb3f0f0f4ea1f7e1d02c33736c3acead2bdb6c1560549b598ea239ae025c45656f5f10b552ef5760381804657507b4375933c21e6e985f84bb9909f4e6885cd0674e4b816c7d4c54d10422a1339f6fe61617e682154086bb9ee1ccbbcc8982e23d605283c905be7bb87b715c4c0d1821d73c32b6e5b4ec0871a535acb7be1b970c1813eba88468c9b8cda1c1d73cf98889393c0b9690024e1832e6afd1b74bf10885a4c4a9385c17c59100f0324182495c9f27af46bf76613ff1c0235f061708c105d9785671dd2c2aa156f0bd74da9020e3a9dbc1748704a11d7e12a80971f186e67e0b6bbbc99b4dfe6adb5ac04a8b24bf4efaf590dc96c4eb3f65b371e631ca9282752b292a901694b7fc372e78d71b0074423f6cc55f6d9c9389f61a0dfccb6c36763b5ed4a5d2a8833e82729c40417434b73a7648add61cd13f195981c8a6094fc56d88a63dc085f74865adf3c6799f818ba8eef513ea0e378caf842ebe095435217eeba13f97862a741a9945bb1fd292d45061fb59b2f61a5edfc23b2fceb9d8233ce0ab21fefd603af7744971140de42b27a689bb9e73c9461254a5243fba5f9a13469d75b93faa8c1ec9f03eaac0c10c210aa8c161c5bdd657466b0d7a44e3eb399f45baa84f53f8a6610b93653473219ced762190b577ba39c7fa7f598feba33a1abb80462731ca218d7b9c2724054b0c121f2ffbffa1271ff8fb6d8cdb6102b1ad1e2cf5017493199a834dab66764452e95a96c54d376c1da2fd51b80d0134cd362104a55a75c6738fd0e92b3609f8980a000f5be125adff7ae01d3c53c7d1cc81fff05c6127ae045dcd26c026cc4d7ad4856ae979f1bdde99e3a5a80b1331efdc8d1d6100976c0e95ab7e65ba1874c3aa47aec7ff4576c7c366c89c7ab7aa48b3cd7c07c233abec15b0e5a11353918687ea87484e809248a18b4e6f8318f4282a8a8f0e7a058533c68d092ba4d4ab5567685373e4f3fd68b905c0331ab905207864ccee3f3caf1af6b246a0e1101e32262a1f88a013919c43b9193e9c8c238a8c2110f3ae548daec66ab7cf044f82d93982a3122197d0e3a24796b6144fa006fad53c4cc7c1ea20a372c5542474c384813197a64bb44ac0d031b2a56a8c4ab119fd787db1073c71236b1d346e5b3200ec83985021f12ec4789a9802e0569db5f809c29a0663b3ef17fe93b1b49d44b73158d0b0029bb82058d9a4d9fc2ec5887da7a2f073f30c549b68032a6be7a578a43efc823189abfc7af29f2a1ee6469e2f40e25211a2884cdd098edba4a6a243d24d1b9eb699d590eae01f7f25cc1121907e20702afe7efba2d4a8dcb09b1651119f8552819fdac0c5ed6d6d176c9ced2483713bbd1b0ef6fc1cf7ba83f37060101d47e0da0be32b0a6baec2e6a7d368307f8716ebba0f2f474f7c2c7576ab977eb46636eae0b8796a5782e1b5c082eac70dfd23fcac76a6cc6707cb219005f9891302e99ada94941299c7ed43f1613e6fd4ac86bbc688e0b420d4be3d07cab8e6487e23e9256cdfe32aac04c808ab46a1a822ce8efa8218304bff6efc7cf37b3b86c65089ba4afec4ed68ade98ae871efb094963cd7b15aed8e065243f52285b44de129cc715f93d95746ea82481a51b7ea820ff120df4a257da39468b665f834b7ff2416bb959fb73aaa3793366f730451caa7cb5e43d4d1312f9f8dc075fdd40ce69169681c76c50aaf1f30aab0437fe202f72ac9d856e5d012e8f0deb66537c681b3b4704d78d7d3ee4069caaead4a010a8b7f177cfa1a5dbb96c55ed0ab9f2eaffcf9db9816da743d2531ee8e460e9846fd5a47a85490f3ce4fcc986700ab9bfb1fed1569bdf1394e7d8a05e85825c93c6a6a8f2f87108476353911776cad310790f19e50dd1e48036d78f97d8cc1ac0a5da200fe4974e1b4a413965ebba500498e48f7c3c09944f65a853173d7f4697f9624f573aa6fa6432a980d9cde7609c698c55cc81f029fad77ebff7d7aa4816e93de14507153d97f6e03db50b7d2766f88be66d9412ea78c70b4eb6f46a06bea0fe8625bb6a1f5f7ec6bfa05e43cac6b004bbcf86caa14b014128e33c77a3ca2c6ec4722d9f0b6f8e2799ceaeceb2c8022189d9bf33f13f309b110137cf647f3d18748ca5f9501890e7cc36ca4a2a6458bdd881b53cc00b78909a44e8a20794526b15156d18c8a32b02b602e85faa2c54dd78e258963ef64767ddd3867facd48104f54c20b17cae92ebccff4a2d3d42da055a26520ed32cd995d1c2392461df755738762aa58703ce436bce7948d930296b515effbb8c4df0e9426268b74f4412aabd25d6fdc32757b598ddc914ea211925bda7dcf28a4fba916c837ff4ebe2702f8a9f786c34545ef0776250a3a8ef811d1424ce18cc5a386ba1439750b7145078ca9bc484d25c134a185a1d07cd62b7879c7be54e62eafbe5c959b2f51bea6ab23edd33829747369d2a2783e27b6f0f777eb276466660240a7a6a436d3b5c9526028e494249979e142668c9e565e8f34cb02bc3a266d78cec52cfc39dcfde082859ca08600e73761e58d902b063e634a8cd3ccd060d8a39314977c7ab692f77cdb697cc670ab181d19308611ff0905d1e6e500e967047d8dea45f8b1db4013d8cf9a954ff611911ac500dbcb6ee686cbd5a399ffef037b9cbd6dc035d455e12e5935ae88175ea3976336ed80dac459f5a1508427dc07f1ce8788e0ffc65d4ffc261075452f5f4846b8f511f160059cd317eeb8bfecb035b406ac28b44ec1cca65a322e4a177d34bea7e6b026925f5b595672404232b075f5113d7170213baada31797651217aa292511c357e4e555b0cc9538aecdf727b835cd72bdb3b288cb88577b5f413cad566a9fa8a4faa3a786251253c60167ddd0b63c892c5230346a1651bf40f6f8c5ff1685b7353807e4f59f16a03f2700beab67df233155e5fc2e7a39f6648405ca684b7f1f674f4c2c2870c12ab1321ed3dd2443375916029a10401cf3d5ed749a76107d86510cac3343e9fb6d454f3e40e1ffa2af6ed8b2d660e469095ee4e6519ea80c7b35ac98ffc01bb10cb4a9f47d64a8178913d967fc3f8f38489023eb65b1272b0a4584cac892469a2f3fbd112543896fb4fc074e7bded1f5dba14d14934d47f04af7bec3ba031eb9738c37fc9a35e29ca348405405ea4afe30d541479da7b57aeec02bbd4bff26d6f9f3f591d6a261626584008a085a934b239abddb5f00e6641bcefd3d76cf0e82e84e112b3e2b780935c4835c5a35305dfec693d645e485c8db4ffb566f5b2202c7480b814cd8165bc9c469175961fbcf9fcab6720e0b443db1646419df059aa1cc4674c2c55a00d9dfcbe2d976e46444d0f64c9934f55a88a862157aa77d0f58326d2fe4c922e348b961dd672e01e208a2acd2e7bc2f09b13894e735ea159c9c8ccb30ea4f96b14f2cad5405b693ce8b151a7c13d91f0e2d7ced022f01336fc488c5fbca80396d018718c1494653664aa71dc64513a32a082fe199be69d86cea530e639b701399c56fd947623e180348f10087b3edd981a46aebbb9511f08c190cc7aee598ea31e037161786f38458e1df04f842a0a8a663d7e9961abbb2283baea077f4949f2cfd05c9663c8a9e85c17b70c83bf521bff46cf20a7bdf1cb56fe5aef7282783309d9e7a0383cd09c8c44bec31d7235a7b3d3aa37e290b20bbdebadf028543b0ca28d61157c702d7121f4fdb467d3b2f1b54f0c705bb0438064e8186bbd519e630ff98f4b3c09d79fec9bd3e2d8f1d450c16d03e9c7e141fcf096d8ef384bc5a8a2daab15c8c7de09e3e1fcca2b80279762a2b25e15f9b34c4607719928f16cd6778ef27027c04e7b724e3c7fb3726d2cf86d56eee36656819203c6198d02f2738f22076aefb80d91601c3f8e9f8778d9337c70bb07b70f4e33f82bae80f7f05f3d75b594f5f4e0f9315a135a9f90533eca05ab9234b455d8c9d55ad2101518bc6337508fcf6acf01ff7bcb846f6fc0797e651608bf349df5b48cc463d5dcb811cf862092d97b3eef2babba51b97427bd6c21146c103e809f348687b807ea18a820d09b3e1891e25e280af71ca02a0ef695ed366ceb8a35456eb31abb14d2bf5e83022c8e082f0ad3ff407c798c8596da802e0ce52229d31c0c0bd9cce4ba0b99d300e58aac88f3c50b6670944060d1e9511ec5951f0084fe3e65b6125b7d251398ec042b2772bfc697a5c79db09f8167b72fec70a94f33e32e51c28e7752d35ac356ef4a97d8f34d628b179b21b5f5a9fbafa84438cc533c7d37989cdc90d0c72cd632ea6c216283314d163a35012a508773dbb362c4ef2a3abd8752aac0b0d1f4cbc1694ac850b21a0a3e49bc6df62f6f8ee1bb71e59abebc9fd30b5e56bd7c7845f26ffd57475ecb30c0078e4a1103d4728b31efaf77c5fd463be93f7a41e909f27dd421ec2629d572345ea7d7d7497711ff65629e0ebac96bd954b00334ef23b7af1a291600712acc432ab2a224cea949446c09c2f41f38a0f02120a943b74611a0a679f8be274394140e417470c86b5d90d75293fe0d5f65fe98f5f82e7a8394840bb79aa27e740e82fcbc4168d16ea6f3ba173dcb6c39068b08da4446b9a41a1e6b25bc06de6fd16e2e4ed58a032c12f1410a7aeaaf10a6e517219ef2394d7e014f926f1becd93e27aee64430a5324d95c604ab2eab5849c5aa558f32c340de4c9fb86efc1a7893547defd3561211e5b0179181d2cfcf448206ac3b30e179daa7cf7c1fc941dab15f09c8706e6a749b1eb50d1133f13940afad6e62c03923d156f8f51f32fc51466be41fa1f73e4dd26fa55c2bb5ca72c844169a20c9eb8d92bdfd64dc1a11eb59eb87c347c9d8dab8a90d351dbe2f47192855563838f273a1f960672b811bc632f107c71d4cb8656a2029a57e66a12f9b572317ceb00533998cbbc4c3928a4a97d95f9b965b7e37553540b6ecff11b24bafde0fc36eeea5f0945c438f7efa0058ad7fd47d1a1a421ebf4a947697ff0e366e5e58a9faf13413d0eb88fd4f227848474a464a7d99a05c77acfcafd4fa4eb011e864e599fe871030c67b7ef8bca291730ef428637945e719e6c74fc8a3c2d22adc984f473405ac7b3b14a733db51e9250f9c4b310c2c260553f0aa46ae0200023ad63bed41d443a9030d1e24a2b53b02749976c6158bdba87b4f5fa5a572d9ece5599d6cf10592b03b20baac7a34aba01ff09cd23f89cdc46f27eb2fb27f02b9f60eced3031c447acc4d94f7fc5710defffcbe2801b5c0573cffc9e6bc21e8f0defefb5792d949e5a8e1f6c8b370d93209a659a0c051c184129cb3093eca4dba4e22676bc340ae875903bfbafcb02dd09a4ba04df48bb873d1779612c9fc385f1930a0b2e1407d6a9e0cce708886d73e12f3916fe697dbc1a62188e9162ee16dc38006fb2f9aa46e8328b3b15683d755aa38752b64542ce4fc0e915a65da29303b02e782ba8ff965e8f76dc86119cc8827a8fbab7dbe147b10e5666f47928deee34f5ed06f96d7e42bf60420b0381879cbad5a91110ea40604909a9902026b67a794285695e93a9b51ff706ac50eda327dfa1828c2f31afea33a5bd6ae3b8cff77adacb5bd53462bec77c8a62477c095697235d289a8bf22130672266759d48cc55b65e985c5e045c99921e2f10fa357e21ffd497c6b3a894f81175cdab6c352b58135be75f94661e516659c7cf0745f68476a1574e461d05491360337ec7dedb4f4435e398cb17ce4cd1c709e0978d7ba1b579abb3f68af949a6335aeee9426c0308c6bb230d4e7f7df36c35dbd99c8c30993da31f793bfb401acceca47aefeae3577abfabcbd7ac7706f24d1b2c4c5abf99464d5b6ef7061c1f62e4840e785eecb315baefdcd4ff7195cdf777ae3d7ab82bdd68f85277cb7c3cb970ac6d2b68f10ff7d1a44580e7633097cf832ac3f480f8f00e2e185aab7ad4cd9df3de1043c7ddf33eac66db72e6014bc5504045a85d48ae5ce9d4f50ca1cf03a030d498d0787714d405b827fc4c5ff041da28836c06efd767b81a2b19bf93ddda3a0802f0dc8b572ad5cbb0d8bee65675341b3eb6d9790ef7696b57d0e61940b282c211257160355fac415abb4a4d418fd430a53ce4450897b06ae6e997f24eab16bf097ef8011821d8926b21b40752e77ab665512cef4a918b63902fa7e8d6101bada105cbed0828836743df7ef7198e1247de7c469a482e42ce0f4437b264e03332dc46c5589577ae2560295b23d0009bb6d9b207d9edf3b4aa771cced030497ca998e4c3e72dd98405525dbbf63a6a410660ef8af07cb5e8c792c7421c58d07c418898baf671a6f3c8ba677139c2ff6a813d1bdf</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">密码：我初三的班级号</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/Eternity/lib/hbe.js"></script><link href="/Eternity/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Until-The-End </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>平衡树</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/bst-treap-splay/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/bst-treap-splay/</url>
      
        <content type="html"><![CDATA[<p>“平衡的旋转，亦是世上最美的舞蹈”</p><span id="more"></span><h2 id="二叉搜索树-Binary-Search-Tree"><a href="#二叉搜索树-Binary-Search-Tree" class="headerlink" title="二叉搜索树(Binary Search Tree)"></a>二叉搜索树(Binary Search Tree)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>顾名思义，一棵二叉树，满足左子点的值小于父节点，右子点的值大于父节点。所有节点都满足该性质。当然，空节点不算。</p><h3 id="性质-特点"><a href="#性质-特点" class="headerlink" title="性质/特点"></a>性质/特点</h3><p>能够高效地完成：</p><ul><li>插入</li><li>查询</li><li>删除</li></ul><p>若 $x$ 是其中节点，而 $y$ 和 $z$ 分别是其左子点与右子点。那么它们满足：</p><blockquote><p>$y.key \leq x.key \leq z.key$</p></blockquote><h3 id="复杂度-代码实现"><a href="#复杂度-代码实现" class="headerlink" title="复杂度/代码实现"></a>复杂度/代码实现</h3><p>均摊 $O(\log n)$</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>从根节点开始，按性质向下查找即可</p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>根据性质查找直到空节点，并新建节点。</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h5 id="叶节点"><a href="#叶节点" class="headerlink" title="叶节点"></a>叶节点</h5><p>直接删除</p><h5 id="仅有一个子节点的父节点"><a href="#仅有一个子节点的父节点" class="headerlink" title="仅有一个子节点的父节点"></a>仅有一个子节点的父节点</h5><p>上移其子节点，删除其本身</p><h5 id="双子节点的父节点"><a href="#双子节点的父节点" class="headerlink" title="双子节点的父节点"></a>双子节点的父节点</h5><p>找到需要删除的节点 $p$ 的直接前驱（或后驱） $s$ ，用 $s$ 代替 $p$ ，并删除 $s$</p><h3 id="另话"><a href="#另话" class="headerlink" title="另话"></a>另话</h3><p>然而，二叉查找树虽然均摊 $O(\log n)$ ，但实际上，当树作为一条链时，其任何操作都是 $O(n)$ ，<del>那做个P啊</del>，所以就会有了<strong>平衡树</strong>这种东西</p><h2 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h2><p>有两位巨佬告诉我， $Treap$ 这东西不需要学。所以我也就简单提提。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>$Treap$ 实际上是一个合成词，$Tree+Heap$ 的合成。也顾名思义，给每一个节点加入一个随机值 $rand()$ 使其基本达到平衡。从而保证树的深度在 $\log n$ 左右。当这棵树的深度达到平衡极限时，进行<strong>左旋</strong>和<strong>右旋</strong>操作使深度降低。</p><h4 id="旋转-rotate"><a href="#旋转-rotate" class="headerlink" title="旋转(rotate)"></a>旋转(rotate)</h4><p>旋转分为<strong>左旋(zig)</strong>和<strong>右旋(zag)</strong>。其目的是使子节点转到根节点处。因为平衡树的操作众多，所以这里重点讲旋转，其他的因题而异即可。</p><p>$rotate(\&amp;p,d)$ 中，以 $p$ 为初始根节点旋转，$d=0$ 时左旋，$d=1$ 时右旋。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k=Tree.son[p][d^<span class="number">1</span>];</span><br><span class="line">Tree.son[p][d^<span class="number">1</span>]=Tree.son[k][d];</span><br><span class="line">Tree.son[k][d]=p;</span><br><span class="line"><span class="built_in">underPushUp</span>(p);</span><br><span class="line"><span class="built_in">underPushUp</span>(k);</span><br><span class="line">p=k;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以左旋为例：</p><p>将右子点保存为 $k$ ，将 $p$ 的右子点变成 $k$ 的左子点。再将 $k$ 的左子点变成 $p$ 。然后将 $p$ 和 $k$ 都进行 $pushup$ 。（如果你不知道 $pushup$ 是啥请看<a href="">线段树学习笔记</a>）</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>建立一个极小点($-\inf$)和一个极大点($\inf$)防止越界</p><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> M,Idx,Rt,op,x;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Treap</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> son[<span class="number">2</span>],val,rd,cnt,size;</span><br><span class="line">&#125;Tree[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underNew</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[++Idx].val=val;</span><br><span class="line">    Tree[Idx].rd=<span class="built_in">rand</span>();</span><br><span class="line">    Tree[Idx].cnt=Tree[Idx].size=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> Idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].size=Tree[Tree[p].son[<span class="number">0</span>]].size+Tree[Tree[p].son[<span class="number">1</span>]].size+Tree[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underBuild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">underNew</span>(-INF),<span class="built_in">underNew</span>(INF);</span><br><span class="line">    Rt=<span class="number">1</span>,Tree[<span class="number">1</span>].son[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">underPushUp</span>(Rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k=Tree[p].son[d^<span class="number">1</span>];</span><br><span class="line">    Tree[p].son[d^<span class="number">1</span>]=Tree[k].son[d];</span><br><span class="line">    Tree[k].son[d]=p;</span><br><span class="line">    p=k;</span><br><span class="line">    <span class="built_in">underPushUp</span>(Tree[p].son[d]);</span><br><span class="line">    <span class="built_in">underPushUp</span>(p);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;   <span class="comment">//d=0 -&gt; zag</span></span><br><span class="line">    <span class="comment">//d=1 -&gt; zig</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInsert</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=<span class="built_in">underNew</span>(val);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val==Tree[p].val)</span><br><span class="line">    &#123;</span><br><span class="line">        ++Tree[p].cnt,<span class="built_in">underPushUp</span>(p);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val&lt;Tree[p].val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underInsert</span>(Tree[p].son[<span class="number">0</span>],val);</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].rd&lt;Tree[Tree[p].son[<span class="number">0</span>]].rd) <span class="built_in">underRotate</span>(p,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underInsert</span>(Tree[p].son[<span class="number">1</span>],val);</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].rd&lt;Tree[Tree[p].son[<span class="number">1</span>]].rd) <span class="built_in">underRotate</span>(p,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underPushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetRankByVal</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(val==Tree[p].val) <span class="keyword">return</span> Tree[Tree[p].son[<span class="number">0</span>]].size+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(val&lt;Tree[p].val) <span class="keyword">return</span> <span class="built_in">underGetRankByVal</span>(Tree[p].son[<span class="number">0</span>],val);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">underGetRankByVal</span>(Tree[p].son[<span class="number">1</span>],val)+Tree[Tree[p].son[<span class="number">0</span>]].size+Tree[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetValByRank</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span>(Tree[Tree[p].son[<span class="number">0</span>]].size&gt;=rank) <span class="keyword">return</span> <span class="built_in">underGetValByRank</span>(Tree[p].son[<span class="number">0</span>],rank);</span><br><span class="line">    <span class="keyword">if</span>(Tree[Tree[p].son[<span class="number">0</span>]].size+Tree[p].cnt&gt;=rank) <span class="keyword">return</span> Tree[p].val;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">underGetValByRank</span>(Tree[p].son[<span class="number">1</span>],rank-Tree[Tree[p].son[<span class="number">0</span>]].size-Tree[p].cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetPre</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>,p=Rt;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val==Tree[p].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Tree[p].son[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                p=Tree[p].son[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">while</span>(Tree[p].son[<span class="number">1</span>]) p=Tree[p].son[<span class="number">1</span>];</span><br><span class="line">                ans=p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].val&lt;val&amp;&amp;Tree[p].val&gt;Tree[ans].val) ans=p;</span><br><span class="line">        p=(val&lt;Tree[p].val?Tree[p].son[<span class="number">0</span>]:Tree[p].son[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Tree[ans].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetNxt</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">2</span>,p=Rt;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val==Tree[p].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Tree[p].son[<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                p=Tree[p].son[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">while</span>(Tree[p].son[<span class="number">0</span>]) p=Tree[p].son[<span class="number">0</span>];</span><br><span class="line">                ans=p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].val&gt;val&amp;&amp;Tree[p].val&lt;Tree[ans].val) ans=p;</span><br><span class="line">        p=(val&lt;Tree[p].val?Tree[p].son[<span class="number">0</span>]:Tree[p].son[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Tree[ans].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underErase</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(val==Tree[p].val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].cnt&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            --Tree[p].cnt,<span class="built_in">underPushUp</span>(p);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Tree[p].son[<span class="number">0</span>]||Tree[p].son[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!Tree[p].son[<span class="number">1</span>]||Tree[Tree[p].son[<span class="number">0</span>]].rd&gt;Tree[Tree[p].son[<span class="number">1</span>]].rd) <span class="built_in">underRotate</span>(p,<span class="number">1</span>),<span class="built_in">underErase</span>(Tree[p].son[<span class="number">1</span>],val);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">underRotate</span>(p,<span class="number">0</span>),<span class="built_in">underErase</span>(Tree[p].son[<span class="number">0</span>],val);</span><br><span class="line">            <span class="built_in">underPushUp</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    val&lt;Tree[p].val?<span class="built_in">underErase</span>(Tree[p].son[<span class="number">0</span>],val):<span class="built_in">underErase</span>(Tree[p].son[<span class="number">1</span>],val);</span><br><span class="line">    <span class="built_in">underPushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;splay.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;splay.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underBuild</span>();</span><br><span class="line">    <span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">while</span>(M--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(op),<span class="built_in">underRead</span>(x);</span><br><span class="line">        <span class="keyword">switch</span>(op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">underInsert</span>(Rt,x);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">underErase</span>(Rt,x);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underGetRankByVal</span>(Rt,x)<span class="number">-1</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underGetValByRank</span>(Rt,x+<span class="number">1</span>));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underGetPre</span>(x));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underGetNxt</span>(x));<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">1 106465</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">1 317721</span></span><br><span class="line"><span class="comment">1 460929</span></span><br><span class="line"><span class="comment">1 644985</span></span><br><span class="line"><span class="comment">1 84185</span></span><br><span class="line"><span class="comment">1 89851</span></span><br><span class="line"><span class="comment">6 81968</span></span><br><span class="line"><span class="comment">1 492737</span></span><br><span class="line"><span class="comment">5 493598</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h2 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>俗称<strong>伸展树</strong>。也是一种二叉排序树，为了使整个查找时间变小，将被查频率高的那些节点转到靠近根节点的位置。每次查找节点之后对树进行重构，把被查找的节点搬移到树根。</p><p>为了将当前被访问节点旋转到树根，我们通常将节点自底向上旋转，直至该节点成为树根为止。“旋转”的巧妙之处就是在不打乱数列中数据大小关系（指中序遍历结果是全序的）情况下，所有基本操作的平摊复杂度仍为 $O(\log n)$。</p><p>一般来说， $Splay$ 的节点维护信息为：</p><div class="table-container"><table><thead><tr><th style="text-align:center">$fa$</th><th style="text-align:center">$chi[0/1]$</th><th style="text-align:center">$dat$</th><th style="text-align:center">$cnt$</th><th style="text-align:center">$size$</th></tr></thead><tbody><tr><td style="text-align:center">父节点编号</td><td style="text-align:center">子节点编号（一般 $0$ 为左子点，$1$ 为右子点）</td><td style="text-align:center">节点权值</td><td style="text-align:center">该节点权值出现的个数</td><td style="text-align:center">子树大小</td></tr></tbody></table></div><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h4><p>与 $Treap$ 的旋转类似。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">    <span class="type">int</span> k=Tree[y].chi[<span class="number">1</span>]==x;</span><br><span class="line">    Tree[z].chi[Tree[z].chi[<span class="number">1</span>]==y]=x;</span><br><span class="line">    Tree[x].fa=z;</span><br><span class="line">    Tree[y].chi[k]=Tree[x].chi[k^<span class="number">1</span>];</span><br><span class="line">    Tree[Tree[x].chi[k^<span class="number">1</span>]].fa=y;</span><br><span class="line">    Tree[x].chi[k^<span class="number">1</span>]=y;</span><br><span class="line">    Tree[y].fa=x;</span><br><span class="line">    <span class="built_in">underPushUp</span>(y);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Splay操作"><a href="#Splay操作" class="headerlink" title="Splay操作"></a>Splay操作</h4><p>传递两个参数 $x$ 和 $k$ 表示将编号为 $x$ 的节点旋转到 $k$ 处，当 $k=0$ 时旋转到根节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Tree[x].fa!=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">        <span class="keyword">if</span>(z!=k)</span><br><span class="line">            <span class="keyword">if</span>((Tree[y].chi[<span class="number">1</span>]==x)^(Tree[z].chi[<span class="number">1</span>]==y))</span><br><span class="line">                <span class="built_in">underRotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">underRotate</span>(y);</span><br><span class="line">        <span class="built_in">underRotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!k) Root=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的说其实就上面两句，但实际上还是要讨论很多情况的。<del>背板子就完事儿了</del>。</p><p>其他的就根据题目而定了。这里给出一些比较常用的操作：</p><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInsert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,p;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat==x)</span><br><span class="line">        &#123;</span><br><span class="line">            ++Tree[u].cnt;</span><br><span class="line">            ++Tree[u].size;</span><br><span class="line">            <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        p=u;</span><br><span class="line">        u=Tree[u].chi[x&gt;Tree[u].dat];</span><br><span class="line">    &#125;</span><br><span class="line">    u=++Idx;</span><br><span class="line">    <span class="keyword">if</span>(p) Tree[p].chi[x&gt;Tree[p].dat]=u;</span><br><span class="line">    Tree[u].dat=x;</span><br><span class="line">    Tree[u].size=<span class="number">1</span>;</span><br><span class="line">    Tree[u].fa=p;</span><br><span class="line">    Tree[u].cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underErase</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">underGetPre</span>(x),r=<span class="built_in">underGetNxt</span>(x);</span><br><span class="line">    <span class="built_in">Splay</span>(l,<span class="number">0</span>),<span class="built_in">Splay</span>(r,l);</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].cnt--;</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].size--;</span><br><span class="line">    <span class="keyword">if</span>(!Tree[Tree[r].chi[<span class="number">0</span>]].cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[Tree[r].chi[<span class="number">0</span>]].fa=<span class="number">0</span>;</span><br><span class="line">        Tree[r].chi[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(r,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找前驱操作"><a href="#查找前驱操作" class="headerlink" title="查找前驱操作"></a>查找前驱操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetPre</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat&lt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找后驱操作"><a href="#查找后驱操作" class="headerlink" title="查找后驱操作"></a>查找后驱操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetNxt</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat&gt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找排名操作"><a href="#查找排名操作" class="headerlink" title="查找排名操作"></a>查找排名操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underNum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[Tree[u].chi[<span class="number">0</span>]].size&gt;=x) u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&lt;=Tree[Tree[u].chi[<span class="number">0</span>]].size+Tree[u].cnt&amp;&amp;x&gt;=Tree[Tree[u].chi[<span class="number">0</span>]].size+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x-=Tree[Tree[u].chi[<span class="number">0</span>]].size+Tree[u].cnt;</span><br><span class="line">            u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC Code"></a>AC Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> M,Idx;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Splay</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> chi[<span class="number">2</span>],fa;</span><br><span class="line">    <span class="type">int</span> cnt,size,dat;</span><br><span class="line">&#125;Tree[MAXN];</span><br><span class="line"><span class="type">int</span> Root;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[x].size=Tree[Tree[x].chi[<span class="number">0</span>]].size+Tree[Tree[x].chi[<span class="number">1</span>]].size+Tree[x].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">    <span class="type">int</span> k=Tree[y].chi[<span class="number">1</span>]==x;</span><br><span class="line">    Tree[z].chi[Tree[z].chi[<span class="number">1</span>]==y]=x;</span><br><span class="line">    Tree[x].fa=z;</span><br><span class="line">    Tree[y].chi[k]=Tree[x].chi[k^<span class="number">1</span>];</span><br><span class="line">    Tree[Tree[x].chi[k^<span class="number">1</span>]].fa=y;</span><br><span class="line">    Tree[x].chi[k^<span class="number">1</span>]=y;</span><br><span class="line">    Tree[y].fa=x;</span><br><span class="line">    <span class="built_in">underPushUp</span>(y);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Tree[x].fa!=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">        <span class="keyword">if</span>(z!=k)</span><br><span class="line">            <span class="keyword">if</span>((Tree[y].chi[<span class="number">1</span>]==x)^(Tree[z].chi[<span class="number">1</span>]==y))</span><br><span class="line">                <span class="built_in">underRotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">underRotate</span>(y);</span><br><span class="line">        <span class="built_in">underRotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!k) Root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInsert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,p;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat==x)</span><br><span class="line">        &#123;</span><br><span class="line">            ++Tree[u].cnt;</span><br><span class="line">            ++Tree[u].size;</span><br><span class="line">            <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        p=u;</span><br><span class="line">        u=Tree[u].chi[x&gt;Tree[u].dat];</span><br><span class="line">    &#125;</span><br><span class="line">    u=++Idx;</span><br><span class="line">    <span class="keyword">if</span>(p) Tree[p].chi[x&gt;Tree[p].dat]=u;</span><br><span class="line">    Tree[u].dat=x;</span><br><span class="line">    Tree[u].size=<span class="number">1</span>;</span><br><span class="line">    Tree[u].fa=p;</span><br><span class="line">    Tree[u].cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Root=++Idx;</span><br><span class="line">    Tree[Root].fa=<span class="number">0</span>;</span><br><span class="line">    Tree[Root].cnt=<span class="number">1</span>;</span><br><span class="line">    Tree[Root].size=<span class="number">1</span>;</span><br><span class="line">    Tree[Root].dat=INF;</span><br><span class="line">    <span class="built_in">underInsert</span>(-INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetPre</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat&lt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underGetNxt</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,res,v=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        v=u;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat&gt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            res=u;</span><br><span class="line">            u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(v,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underErase</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">underGetPre</span>(x),r=<span class="built_in">underGetNxt</span>(x);</span><br><span class="line">    <span class="built_in">Splay</span>(l,<span class="number">0</span>),<span class="built_in">Splay</span>(r,l);</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].cnt--;</span><br><span class="line">    Tree[Tree[r].chi[<span class="number">0</span>]].size--;</span><br><span class="line">    <span class="keyword">if</span>(!Tree[Tree[r].chi[<span class="number">0</span>]].cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[Tree[r].chi[<span class="number">0</span>]].fa=<span class="number">0</span>;</span><br><span class="line">        Tree[r].chi[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Splay</span>(r,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underNum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[Tree[u].chi[<span class="number">0</span>]].size&gt;=x) u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&lt;=Tree[Tree[u].chi[<span class="number">0</span>]].size+Tree[u].cnt&amp;&amp;x&gt;=Tree[Tree[u].chi[<span class="number">0</span>]].size+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x-=Tree[Tree[u].chi[<span class="number">0</span>]].size+Tree[u].cnt;</span><br><span class="line">            u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;splay.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;splay.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underInit</span>();</span><br><span class="line">    <span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op,x;</span><br><span class="line">        <span class="built_in">underRead</span>(op),<span class="built_in">underRead</span>(x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) <span class="built_in">underInsert</span>(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>) <span class="built_in">underErase</span>(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Splay</span>(<span class="built_in">underGetPre</span>(x),<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Tree[Tree[Root].chi[<span class="number">0</span>]].size+Tree[Root].cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Tree[<span class="built_in">underNum</span>(x+<span class="number">1</span>)].dat);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Tree[<span class="built_in">underGetPre</span>(x)].dat);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Tree[<span class="built_in">underGetNxt</span>(x)].dat);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">1 106465</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">1 317721</span></span><br><span class="line"><span class="comment">1 460929</span></span><br><span class="line"><span class="comment">1 644985</span></span><br><span class="line"><span class="comment">1 84185</span></span><br><span class="line"><span class="comment">1 89851</span></span><br><span class="line"><span class="comment">6 81968</span></span><br><span class="line"><span class="comment">1 492737</span></span><br><span class="line"><span class="comment">5 493598</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h3 id="文艺平衡树"><a href="#文艺平衡树" class="headerlink" title="文艺平衡树"></a>文艺平衡树</h3><p><a href="https://www.luogu.com.cn/problem/P3391">例题</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们已知，平衡树的中序遍历永远满足全序。我们又会发现（<del>其实要推一下</del>），当我们把区间 $[l,r]$ 反转时，就是将其两个子节点指针交换。将 $l$ 转到根节点，将 $r$ 转为 $l$ 的子节点。然后交换其子树编号即可。</p><h4 id="AC-Code-2"><a href="#AC-Code-2" class="headerlink" title="AC Code"></a>AC Code</h4><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Idx;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Splay</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> chi[<span class="number">2</span>],fa,tag;</span><br><span class="line">    <span class="type">int</span> cnt,size,dat;</span><br><span class="line">&#125;Tree[MAXN];</span><br><span class="line"><span class="type">int</span> Root;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[x].size=Tree[Tree[x].chi[<span class="number">0</span>]].size+Tree[Tree[x].chi[<span class="number">1</span>]].size+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushDown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree[x].tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(Tree[x].chi[<span class="number">0</span>],Tree[x].chi[<span class="number">1</span>]);</span><br><span class="line">Tree[Tree[x].chi[<span class="number">0</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">Tree[Tree[x].chi[<span class="number">1</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">Tree[x].tag^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRotate</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">    <span class="type">int</span> k=Tree[y].chi[<span class="number">1</span>]==x;</span><br><span class="line">    Tree[z].chi[Tree[z].chi[<span class="number">1</span>]==y]=x;</span><br><span class="line">    Tree[x].fa=z;</span><br><span class="line">    Tree[y].chi[k]=Tree[x].chi[k^<span class="number">1</span>];</span><br><span class="line">    Tree[Tree[x].chi[k^<span class="number">1</span>]].fa=y;</span><br><span class="line">    Tree[x].chi[k^<span class="number">1</span>]=y;</span><br><span class="line">    Tree[y].fa=x;</span><br><span class="line">    <span class="built_in">underPushUp</span>(y);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(Tree[x].fa!=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y=Tree[x].fa,z=Tree[y].fa;</span><br><span class="line">        <span class="keyword">if</span>(z!=k)</span><br><span class="line">            <span class="keyword">if</span>((Tree[y].chi[<span class="number">1</span>]==x)^(Tree[z].chi[<span class="number">1</span>]==y)) <span class="built_in">underRotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">underRotate</span>(y);</span><br><span class="line">        <span class="built_in">underRotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!k) Root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInsert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=Root,p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tree[u].dat==x)</span><br><span class="line">        &#123;</span><br><span class="line">            ++Tree[u].cnt;</span><br><span class="line">            ++Tree[u].size;</span><br><span class="line">            <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        p=u;</span><br><span class="line">        u=Tree[u].chi[x&gt;Tree[u].dat];</span><br><span class="line">    &#125;</span><br><span class="line">    u=++Idx;</span><br><span class="line">    <span class="keyword">if</span>(p) Tree[p].chi[x&gt;Tree[p].dat]=u;</span><br><span class="line">    Tree[u].dat=x;</span><br><span class="line">    Tree[u].size=<span class="number">1</span>;</span><br><span class="line">    Tree[u].fa=p;</span><br><span class="line">    Tree[u].cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Splay</span>(u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underWrite</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">underPushDown</span>(rt);</span><br><span class="line"><span class="keyword">if</span>(Tree[rt].chi[<span class="number">0</span>]) <span class="built_in">underWrite</span>(Tree[rt].chi[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(Tree[rt].dat&gt;<span class="number">1</span>&amp;&amp;Tree[rt].dat&lt;N+<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Tree[rt].dat<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(Tree[rt].chi[<span class="number">1</span>]) <span class="built_in">underWrite</span>(Tree[rt].chi[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underKth</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> u=Root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">underPushDown</span>(u);</span><br><span class="line"><span class="keyword">if</span>(Tree[Tree[u].chi[<span class="number">0</span>]].size&gt;=k) u=Tree[u].chi[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Tree[Tree[u].chi[<span class="number">0</span>]].size+<span class="number">1</span>==k) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">else</span> k-=Tree[Tree[u].chi[<span class="number">0</span>]].size+<span class="number">1</span>,u=Tree[u].chi[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underSwap</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">l=<span class="built_in">underKth</span>(l);</span><br><span class="line">r=<span class="built_in">underKth</span>(r+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">Splay</span>(l,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">Splay</span>(r,l);</span><br><span class="line">Tree[Tree[Tree[Root].chi[<span class="number">1</span>]].chi[<span class="number">0</span>]].tag^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Root=++Idx;</span><br><span class="line">    Tree[Root].fa=<span class="number">0</span>;</span><br><span class="line">    Tree[Root].cnt=<span class="number">1</span>;</span><br><span class="line">    Tree[Root].size=<span class="number">1</span>;</span><br><span class="line">    Tree[Root].dat=INF;</span><br><span class="line">    <span class="built_in">underInsert</span>(-INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;splay.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;splay.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N+<span class="number">2</span>;++i) <span class="built_in">underInsert</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> Ql,Qr;</span><br><span class="line">        <span class="built_in">underRead</span>(Ql),<span class="built_in">underRead</span>(Qr);</span><br><span class="line">        <span class="built_in">underSwap</span>(Ql,Qr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underWrite</span>(Root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="Fhq-Treap"><a href="#Fhq-Treap" class="headerlink" title="Fhq-Treap"></a>Fhq-Treap</h2><p>暂代补充</p><h2 id="AVL数"><a href="#AVL数" class="headerlink" title="AVL数"></a>AVL数</h2><p>暂代补充</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>估计不会有了</p><hr><p>没有更多了</p><p>首次更新：$date\ 2022.3.14$</p><p>最后更新：$date\ 2022.3.19$</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> Splay </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可持久化线段树(主席树)</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/persistent-segment-tree/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/persistent-segment-tree/</url>
      
        <content type="html"><![CDATA[<p>”即使离开了多远，我的心中依然是最初的你“</p><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>主席树</strong>全称<strong>可持久化权值线段树</strong>，用于维护区间最值与一些奇奇怪怪的东西。支持历史询问与修改（目前不会），似乎与普通线段树的时间复杂度是一样的，但空间会减少很多消耗。</p><p>在算法执行的过程中，会发现在更新一个动态集合时，需要维护其过去的版本。这样的集合称为是<strong>可持久</strong>的。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="建树-build"><a href="#建树-build" class="headerlink" title="建树(build)"></a>建树(build)</h3><p>首先，建立起<strong>亘古树</strong>，即一开始的整棵线段树。但是根本不需要。对于主席树而言，改掉了我的一个习惯：即线段树的左区间与右区间是存于 $Tree$ 内的。这样可能会消耗一些空间。但对于主席树而言，其儿子节点并不满足 <code>Tree[p].l=p&lt;&lt;1</code> 与 <code>Tree[p].r=p&lt;&lt;1|1</code> 的关系，所以对于建树而言，每一个节点的 $l$ 和 $r$ 存储的是其左右儿子的点编号。每输入一个数，就动态修改即可，根本不需要进行 $build$ 操作。<del>一般不建</del></p><h3 id="修改-插入-modify"><a href="#修改-插入-modify" class="headerlink" title="修改/插入(modify)"></a>修改/插入(modify)</h3><p>每输入一个值……其实这句话是不对的。对于部分主席树的题而言，是需要<strong>离散化</strong>的。所以插入（修改）操作都是在输入完并离散化之后才一次性完成的。</p><p>以洛谷的<a href="https://www.luogu.com.cn/problem/P3834">模板题</a>为例，我们需要求区间 $[l,r]$ 的第 $k$ 小值。则对于这道题的历史版本 $v_i$ ，处理的其实是<strong>前缀和</strong>的信息。即我们建的第 $i$ 个树存储的是区间 $[1,i]$ 的 $Val$ 信息。而叶节点存储的则是第 $i$ 个数的个数。</p><p>对于每一次的插入操作，我们就在原来基础上插入一条链直达叶节点，表示我们在该位置插入了一个数。然后自下而上更新区间值 $dat$ ，这与线段树是一样的。而不同的是，在插入过程中，其节点编号 $p$ 是动态的。因为当一个地方没有被修改时，我们会指向其历史编号，只有当修改时才会新建编号，而我们新建了编号后，其父节点所指的子节点也是会更改的。所以就会有 <code>int &amp;x</code> 的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[++Idx]=Tree[x];</span><br><span class="line">    x=Idx;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ++Tree[x].dat;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=mid) <span class="built_in">underModify</span>(Tree[x].l,l,mid,d);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">underModify</span>(Tree[x].r,mid+<span class="number">1</span>,r,d);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询-query"><a href="#查询-query" class="headerlink" title="查询(query)"></a>查询(query)</h3><p>其意义并非真正的线段树查询。因为用了二分的思想又与线段树相似而称之为查询。对于查询第 $k$ 小数而言，因为我们已经离散化排了序的，则：</p><ol><li>当该节点的左儿子存储的数的个数大于 $k$ ，则查询左儿子；</li><li>当该节点的左儿子存储的数的个数小于 $k$ ，则查询右儿子的第 $k-ls$ 小值。</li></ol><p>这就因题而异了，只是提一句。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h4><p>因题而异。可以有，也可以没有。</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>因题而异。可以有，也可以没有。</p><h4 id="修改根节点-root"><a href="#修改根节点-root" class="headerlink" title="修改根节点(root)"></a>修改根节点(root)</h4><p>每一个历史线段树的根节点在一开始的时候都是空的，其会在插入操作里不断更新。这也是为什么 <code>int &amp;x</code> 的原因（<del>二次重提</del>）</p><h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Val[MAXN&lt;&lt;<span class="number">1</span>],Root[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PersistentSegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> dat,l,r;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> Idx;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].dat=Tree[Tree[p].l].dat+Tree[Tree[p].r].dat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[++Idx]=Tree[x];</span><br><span class="line">    x=Idx;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ++Tree[x].dat;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=mid) <span class="built_in">underModify</span>(Tree[x].l,l,mid,d);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">underModify</span>(Tree[x].r,mid+<span class="number">1</span>,r,d);</span><br><span class="line">    <span class="built_in">underPushUp</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQuery</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> x2,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ls=Tree[Tree[x2].l].dat-Tree[Tree[x1].l].dat;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=ls) <span class="keyword">return</span> <span class="built_in">underQuery</span>(Tree[x1].l,Tree[x2].l,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">underQuery</span>(Tree[x1].r,Tree[x2].r,mid+<span class="number">1</span>,r,k-ls);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;PST.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;PST.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;V;</span><br><span class="line">    <span class="built_in">underRead</span>(N),<span class="built_in">underRead</span>(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(Val[i]);</span><br><span class="line">        V.<span class="built_in">push_back</span>(Val[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> len=V.<span class="built_in">erase</span>(<span class="built_in">unique</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>()),V.<span class="built_in">end</span>())-V.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Root[i]=Root[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">underModify</span>(Root[i],<span class="number">1</span>,len,<span class="built_in">lower_bound</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>(),Val[i])-V.<span class="built_in">begin</span>()+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> Ql,Qr,Qk;M;M--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(Ql),<span class="built_in">underRead</span>(Qr),<span class="built_in">underRead</span>(Qk);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,V[<span class="built_in">underQuery</span>(Root[Ql<span class="number">-1</span>],Root[Qr],<span class="number">1</span>,len,Qk)<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">25957 6405 15770 26287 26465 </span></span><br><span class="line"><span class="comment">2 2 1</span></span><br><span class="line"><span class="comment">3 4 1</span></span><br><span class="line"><span class="comment">4 5 1</span></span><br><span class="line"><span class="comment">1 2 2</span></span><br><span class="line"><span class="comment">4 4 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉函数</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/euler-function/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/euler-function/</url>
      
        <content type="html"><![CDATA[<p>“下一个就是你了，承太郎“</p><span id="more"></span><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><blockquote><p>指的是满足小于等于$N$且与$N$互质的数目和。</p></blockquote><h2 id="欧拉公式求解公式："><a href="#欧拉公式求解公式：" class="headerlink" title="欧拉公式求解公式："></a>欧拉公式求解公式：</h2><p>对于一个正整数$N$满足：</p><blockquote><p>$\varphi(x)=\sum_{k}[(k, n)=1][k \in N][k&lt;n]$</p></blockquote><p>则有</p><blockquote><p>$\varphi(n)=n\left(1-\frac{1}{p_{1}}\right)\left(1-\frac{1}{p_{2}}\right)\left(1-\frac{1}{p_{3}}\right) \cdots\left(1-\frac{1}{p_{k}}\right)$</p></blockquote><h2 id="欧拉函数的性质："><a href="#欧拉函数的性质：" class="headerlink" title="欧拉函数的性质："></a>欧拉函数的性质：</h2><h3 id="当-N-0-时："><a href="#当-N-0-时：" class="headerlink" title="当$N=0$时："></a>当$N=0$时：</h3><blockquote><p>$\varphi(0)=0$.</p></blockquote><h3 id="当-N-1-时："><a href="#当-N-1-时：" class="headerlink" title="当$N=1$时："></a>当$N=1$时：</h3><blockquote><p>$\varphi(1)=1$.因为1与自身互质。</p></blockquote><h3 id="当-N-为质数时："><a href="#当-N-为质数时：" class="headerlink" title="当$N$为质数时："></a>当$N$为质数时：</h3><blockquote><p>$\varphi(N)=N-1$.</p></blockquote><h3 id="如果-P-是质数，而-N-是-P-的正整数次方："><a href="#如果-P-是质数，而-N-是-P-的正整数次方：" class="headerlink" title="如果$P$是质数，而$N$是$P$的正整数次方："></a>如果$P$是质数，而$N$是$P$的正整数次方：</h3><blockquote><p>$\varphi(P^N)=P^N(1-\frac{1}{p})$</p></blockquote><h2 id="欧拉定理："><a href="#欧拉定理：" class="headerlink" title="欧拉定理："></a>欧拉定理：</h2><p>设$a,m \in N^+$，且$(a,m)=1$，那么则有</p><blockquote><p>$a^{\varphi(m)} \equiv 1 \pmod m$</p><p>且$a$对模$m$的阶$\delta_m(a)$必须整除$\varphi(a)$.</p></blockquote><p>证明：</p><blockquote><p>取模$m$的缩系，$a_1,a_2,a_3……a_{\varphi(m)}$，</p><p>则$aa_1,aa_2,aa_3……aa_{\varphi(m)}$也是$m$的缩系.</p><p>故有$\prod_{i=1}^{\varphi(m)}a_i \equiv \prod_{i=1}^{\varphi(m)}aa_i \equiv a^{\varphi(m)}\prod_{i=1}^{\varphi(m)}a_i \pmod m$</p><p>则可以推出$a^{\varphi(m)} \equiv 1 \pmod m$. </p></blockquote><p>证毕</p><p>欧拉定理可以推出<strong>费马小定理</strong>：</p><blockquote><p>如果p是一个质数，而整数$a$不是$p$的倍数，</p><p>则有$a^{(p-1)} \equiv 1 \pmod p$。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同余</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/congruence/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/congruence/</url>
      
        <content type="html"><![CDATA[<p>“虽然我们相差甚远，但至少初心是一致的”</p><span id="more"></span><h2 id="同余："><a href="#同余：" class="headerlink" title="同余："></a>同余：</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>$a$ 与 $b$ 同余，当且仅当 $a$ 与 $b$ 除以 $p$ 的余数相同，记作 $a$ 与 $b$ 模 $p$ 同余，写作 $a \equiv b \pmod p$。</p><h3 id="同余的性质："><a href="#同余的性质：" class="headerlink" title="同余的性质："></a>同余的性质：</h3><ul><li><p>若 $a \equiv b \pmod p$ ，则有 $a+c \equiv b+c \pmod p$</p></li><li><p>若 $a \equiv b \pmod p$ ，则有 $ac \equiv bc \pmod p$</p></li><li><p>若 $a \equiv b \pmod p$ ，且 $c \equiv d \pmod p$ ，则有 $a \pm c \equiv b \pm d \pmod p$</p></li><li><p>若 $ac \equiv bc \pmod p$ ，且 $(c,m)=1$ ，那么 $a \equiv b \pmod p$</p></li><li><p>若 $a \equiv b \pmod p$ ，且 $c \equiv d \pmod p$ ，则有 $ac \equiv bd \pmod p$</p></li><li><p>若 $a \equiv b \pmod p$ ，则有 $ac \equiv bc \pmod {pc}$</p></li><li><p>若 $a$ 和 $b$ 都是整数，且 $d$ 和 $m$ 都是正整数， $d$ 是 $a,b,m$ 中任一公因数，则如果 $a \equiv b \pmod m$ 成立时，则有 $\frac{a}{d} \equiv \frac{b}{d} \pmod {\frac{p}{d}}$</p></li><li><p>若 $a$ 和 $b$ 都是整数，且 $d$ 和 $m$ 都是正整数，且 $d|m$，则如果 $a \equiv b \pmod m$ 成立时，则有 $a \equiv b \pmod d$ 。</p></li><li><p>若 $a$ 和 $b$ 都是整数，且 $d$ 和 $m$ 都是正整数，如果 $a \equiv b \pmod m$ 成立时，则有 $(a,m)=(b,m)$ ，且若如果 $d$ 能够整除 $a,b,m$ 中的任意一个， $d$ 也就能整除 $a,b$ 中的另一个。</p></li></ul><h2 id="扩展欧几里得算法："><a href="#扩展欧几里得算法：" class="headerlink" title="扩展欧几里得算法："></a>扩展欧几里得算法：</h2><p>若 $(a,b)=d$ ，那么对于方程 $ax+by=d$ 的解有一组特殊解为 $x=x_0,y=y_0$ ，那么该方程的通解为 $x=x_0+\frac{b}{d}<em>t,y=y_0-\frac{a}{d}</em>t$ ，而我们用这个通解来逆向推出 $gcd$ ，因为我们有<strong>欧几里得定理</strong>：</p><blockquote><p>$(a,b)=d$ ，则有 $(b,a \bmod b)=d$</p></blockquote><p>那么就会推出： $d=a<em>y_1+b</em>(x_1-y_1*\frac{a}{b})$ </p><p>在这个算式中满足： $x=y_1,y=x_1-\frac{a}{b}*y_1$</p><h3 id="扩欧解同余方程："><a href="#扩欧解同余方程：" class="headerlink" title="扩欧解同余方程："></a>扩欧解同余方程：</h3><p>对于方程 $ax \equiv 1 \pmod b$ ，已知 $a$ 与 $b$ ，求出最小的 $x$ 。</p><p><a href="https://www.luogu.com.cn/problem/P1082">LuoguP1082</a></p><p>妥妥的扩欧模板题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">LL a,b,x,y;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underExgcd</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">7</span>;            <span class="comment">//一对特殊解</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underExgcd</span>(b,a%b);</span><br><span class="line">    LL tx=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=tx-a/b*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;exgcd.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;exgcd.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(a),<span class="built_in">underRead</span>(b);</span><br><span class="line">    <span class="built_in">underExgcd</span>(a,b);</span><br><span class="line">    x=(x%b+b)%b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="中国剩余定理："><a href="#中国剩余定理：" class="headerlink" title="中国剩余定理："></a>中国剩余定理：</h2><p><a href="https://www.luogu.com.cn/problem/P1495">LuoguP1495曹冲养猪</a></p><p>有一个同余方程组满足 </p><script type="math/tex; mode=display">\left\{\begin{matrix}x \equiv a_1 \pmod {m_1} \\x \equiv a_2 \pmod {m_2} \\x \equiv a_3 \pmod {m_3} \\x \equiv a_4 \pmod {m_4} \\x \equiv a_5 \pmod {m_5} \\...... \\x \equiv a_k \pmod {m_k}\end{matrix}\right.</script><p> ，求出最小的 $x$ 。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>设 $M=m_1m_2m_3…m_k$ ，令 $M_i=\frac{M}{m_i}$ ，$t_i$ 是 $M_i$  的逆元，有 $M_it_i \equiv 1 \pmod m_i$</p><p>则 $x=\sum_{i=1}^{k}{a_iM_it_i}$</p><p>则可构造特殊解 $x_0=x+k*M$</p><p>最小正整数解即为 $x_{min}=x_0 \bmod M$</p><h3 id="P3868-AC-Code"><a href="#P3868-AC-Code" class="headerlink" title="P3868 AC Code:"></a>P3868 AC Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    LL type,mod;</span><br><span class="line">&#125;Num[MAXN];</span><br><span class="line">LL M[MAXN],Mul=<span class="number">1</span>,Mi[MAXN],X;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underExgcd</span><span class="params">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underExgcd</span>(b,a%b,x,y);</span><br><span class="line">    LL z=x;x=y;y=z-y*(a/b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;china.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;china.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(Num[i].type),<span class="built_in">underRead</span>(Num[i].mod);</span><br><span class="line">        Mul*=Num[i].type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">1</span>;t&lt;=N;++t)</span><br><span class="line">    &#123;</span><br><span class="line">        Mi[t]=Mul/Num[t].type;</span><br><span class="line">        LL x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">underExgcd</span>(Mi[t],Num[t].type,x,y);</span><br><span class="line">        X+=Num[t].mod*Mi[t]*(x&lt;<span class="number">0</span>?x+Num[t].type:x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,X%Mul);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3 1</span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">7 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 同余 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数列与极限 #2</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/analytical-mathematics-series-limits-2/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/analytical-mathematics-series-limits-2/</url>
      
        <content type="html"><![CDATA[<p>“当我趋近于你，我们之间的感情便成为了确值”</p><span id="more"></span><h2 id="实数的完备性定理（部分）"><a href="#实数的完备性定理（部分）" class="headerlink" title="实数的完备性定理（部分）"></a>实数的完备性定理（部分）</h2><h3 id="单调有界定理"><a href="#单调有界定理" class="headerlink" title="单调有界定理"></a>单调有界定理</h3><ol><li><p>若数列 $\{ x_n \}$ 递增且有上界，则</p><script type="math/tex; mode=display">\lim \limits_{n \to +\infty} x_n = \sup \{ x_n | n \in N \}</script></li><li><p>若数列 $\{ x_n \}$ 递减且有下界，则</p><script type="math/tex; mode=display">\lim \limits_{n \to +\infty} x_n = \inf \{ x_n | n \in N\}</script></li></ol><h3 id="柯西收敛原理"><a href="#柯西收敛原理" class="headerlink" title="柯西收敛原理"></a>柯西收敛原理</h3><p>设 $ \{ x_n \} $ 是一个数列，如果对于任意一个 $\epsilon &gt; 0$ ，存在 $N \in \mathbb{Z^<em>}$ ，只要 $n$ 满足 $n &gt; N$ ，则对于任意正整数 $p$ 而言，都有 $| x_{n+p}-x_n | &lt; \epsilon$ ，这样的数列 $\{ x_n \}$ 便称为<em>*柯西数列</em></em>。</p><p>这样的<strong>渐进稳定性</strong>和<strong>收敛性</strong>是等价的，即为<strong>充分必要条件</strong>。</p><p>简单来说：</p><script type="math/tex; mode=display">数列 \{ x_n \} 收敛的充要条件是 \forall \epsilon \in \mathbb{R^+} , \exists N \in \mathbb{Z^+} , \forall n,m > N ( | x_m - x_n | < \epsilon )</script><h3 id="戴德金原理"><a href="#戴德金原理" class="headerlink" title="戴德金原理"></a>戴德金原理</h3><p>如果 $\mathbb{R}$ 的两个子集 $A$ 和 $B$ 满足：</p><script type="math/tex; mode=display">\begin{aligned}&1. A \neq \emptyset \wedge B \neq \emptyset \\&2. A \cup B = \mathbb{R}\\&3. \forall x \in A , \forall y \in B ( x < y ) \\\end{aligned}</script><p>那么， $\exists c \in \mathbb{R} ( \forall a \in A , \forall b \in B ( a  \leq c \leq b) )$ 。</p><h3 id="闭区间套定理"><a href="#闭区间套定理" class="headerlink" title="闭区间套定理"></a>闭区间套定理</h3><p>如果数列 $\{ a_n \}$ 和 $\{ b_n \}$ 满足：</p><script type="math/tex; mode=display">\begin{aligned}&1. \forall n \in \mathbb{Z^+} ( a_n \leq a_{n+1} < b_{n+1} \leq b_n ) \\&2. \lim \limits_{n \to +\infty} ( b_n - a_n ) = 0 \\\end{aligned}</script><p>那么以下结论成立：</p><script type="math/tex; mode=display">\begin{aligned}&1. \lim \limits_{n \to +\infty} a_n = \lim \limits =_{n \to +\infty} b_n (该极限值记为 c )\\&2. 上述 c 是满足 \forall n \in \mathbb{Z^+} ( a_n \leq c \leq b_n ) 的唯一实数\end{aligned}</script><h3 id="确界存在原理"><a href="#确界存在原理" class="headerlink" title="确界存在原理"></a>确界存在原理</h3><p>对于 $\mathbb{R}$ 的任何非空子集 $S$ ，若 $S$ 在 $\mathbb{R}$ 内有上界，则 $S$ 在 $\mathbb{R}$ 内有上确界。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 微积分 </tag>
            
            <tag> 分析数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数列与极限</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/analytical-mathematics-series-limits/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/analytical-mathematics-series-limits/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数学不能凭 $sense$ ，必须要追求<strong>严谨</strong>。—— $Zq$</p></blockquote><span id="more"></span><h2 id="数列定义"><a href="#数列定义" class="headerlink" title="数列定义"></a>数列定义</h2><p>一种从自然数（或正整数）到实数（或其它域）的映射 $f : \mathbb{N} \to \mathbb{R}$ ，这便是一个<strong>数列</strong>。一般来说，设 $a_n=f(n)$ ，则该数列记作 $\{ a_n \}_{n=0}^{+ \infty}$</p><p>定义一个数列 $f : \mathbb{N} \to \mathbb{R}$ 的子数列为一个数列 $g : L \to \mathbb{R}$ 满足 $L \subseteq \mathbb{N} \wedge \forall n \in L , g(n) = f(n) \wedge \mid L \mid = + \infty$ 。</p><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><p>对于一个数列 ${a_n\}_{n = 1}^{+ \infty }$ ，若 $\exists \delta \in R, s.t. \forall \epsilon &gt; 0, \exists N &gt; 0 \wedge N \in \mathbb{N}^+, s.t. \forall n &gt; N , \mid a_n - \delta \mid &lt; \epsilon$ ，我们就称 $\delta$ 为数列的极限，记作 $\lim\limits _{n \to + \infty} a_n = \delta$ ，或者 $a_n \to \delta(n \to + \infty)$ ，有时候括号内的可以省略。（上面的 $s.t$ 指 “使得”）</p><p>对于一个数列，如果它存在极限，我们就称这个数列<strong>收敛</strong>，否则就称其<strong>发散</strong>。</p><h2 id="数列极限的几何意义"><a href="#数列极限的几何意义" class="headerlink" title="数列极限的几何意义"></a>数列极限的几何意义</h2><p>对于一个数列满足：</p><script type="math/tex; mode=display">\begin{aligned}当 n > N 时，均有不等式 | x_n - a | < \epsilon\end{aligned}</script><p>即表示：</p><script type="math/tex; mode=display">\begin{aligned}\\所有下标大于 N 的 x_n 都落在 ( a - \epsilon , a + \epsilon ) 内，\\且落在 ( a - \epsilon , a + \epsilon ) 之外的点至多有 N 个（有限）\end{aligned}</script><p>如果存在某个值 $\epsilon_0$ 使得数列 ${x_n}$ 中有无穷个项落在 $( a - \epsilon_0 , a+ \epsilon_0)$ 之外，则 ${x_n}$ 一定不以 $a$ 为极限。</p><h2 id="数列极限的性质："><a href="#数列极限的性质：" class="headerlink" title="数列极限的性质："></a>数列极限的性质：</h2><h3 id="唯一性"><a href="#唯一性" class="headerlink" title="唯一性"></a>唯一性</h3><p>若一个数列的极限存在，则极限值是唯一的，且它的任何子列的极限与原数列相等。</p><p>证明，即：若 $a_n \to b, a_n \to c$ 则 $b = c$</p><p>有：</p><script type="math/tex; mode=display">\begin{aligned}\forall \epsilon > 0, \exists N_b > 0, s.t. \forall n > N_b, \mid a_n - b \mid < \epsilon \\\forall \epsilon > 0, \exists N_c > 0, s.t. \forall n > N_c, \mid a_n - c \mid < \epsilon \\\end{aligned}</script><p>记 $N = \max(N_b, N_c)$ 有：</p><script type="math/tex; mode=display">\forall n > N, \mid a_n - c \mid + \mid a_n - b \mid < 2 \epsilon</script><p>由三角不等式 $\mid a \mid - \mid b \mid \le \mid a \pm b \mid \le \mid a \mid + \mid b \mid$ 得：</p><script type="math/tex; mode=display">\mid b - c \mid < 2 \epsilon</script><p>由于 $\epsilon$ 可以无限小，故有 $b = c$</p><p>QED</p><h3 id="有界性"><a href="#有界性" class="headerlink" title="有界性"></a>有界性</h3><p>如果一个数列收敛，则这个数列一定有界。</p><p><strong>但如果一个数列有界，它不一定收敛</strong> $e.g. {x_n}=(-1)^n$</p><h3 id="保号性"><a href="#保号性" class="headerlink" title="保号性"></a>保号性</h3><p>若 $\lim \limits_{n \to +\infty} x_n = a &gt; 0$ （或 $<0$ ） ，则对任何 $m \in ( 0 , a )( a < 0$ 时则是 $m \in ( a , 0 )$ ，存在 $N > 0$ ，使 $n &gt; N$ 时有 $x_n &gt; M$ （相应的是 $x_n&lt;m$ ）</p><h3 id="基本运算法则"><a href="#基本运算法则" class="headerlink" title="基本运算法则"></a>基本运算法则</h3><ul><li>若 $C$ 为常数，则 $\lim \limits_{n \to + \infty} C = C$</li><li>若 $C$ 为常数，则 $\lim \limits_{n \to + \infty} \frac{C}{n} = 0$</li><li>若 $| a | &lt; 1$ ，则 $\lim \limits_{n \to +\infty} a^n = 0$</li><li>如果 $\lim \limits_{n \to +\infty} a_n = A , \lim \limits_{n \to + \infty} b_n =B$ 且 $C$ 为常数。则：</li></ul><script type="math/tex; mode=display">\begin{aligned}\\ \lim \limits_{n \to +\infty} (a_n \pm b_n) = A \pm B\\ \lim \limits_{n \to +\infty} (a_n · b_n) = A · B\end{aligned}</script><h2 id="子数列的极限"><a href="#子数列的极限" class="headerlink" title="子数列的极限"></a>子数列的极限</h2><p>对于一个数列 $\{a_n\}{n = 1}^{+ \infty}$ 的子数列 $\{a{n_k}\}{k = 1}^{+ \infty}$ ，若 $a_n \to \delta$ ，则 $a{n_k} \to \delta$</p><p>证明：</p><p>对于所有 $k$ ，有 $n_k \ge k$ ，又因为 $\forall \epsilon &gt; 0, \exists N &gt; 0, s.t. \forall n &gt; N, \mid a_n - b \mid &lt; \epsilon$</p><p>故 $\forall \epsilon &gt; 0$ ，取 $K = N$ ，有 $\forall k &gt; K, n_k \ge k &gt; K = N$ ，故 $\mid a_{n_k} - b \mid &lt; \epsilon$ ，即 $a_{n_k} \to \delta$</p><p>QED</p><h2 id="级数"><a href="#级数" class="headerlink" title="级数"></a>级数</h2><p>级数是指将数列的项依次用加号连接起来的函数，用 $OIer$ 的话来说就是数列的前缀和，即对于数列 $\{s _n\} _{n = 1}^{+ \infty}$ ，有 $s _n = \sum _{i = 1}^n a _i$ </p><h2 id="数列的和"><a href="#数列的和" class="headerlink" title="数列的和"></a>数列的和</h2><p>对于数列 $\{a _n\} _{n = 1}^{+ \infty}$ ，它的和 $\sum _{n = 1}^{+ \infty} a _n$ 有意义，当且仅当它的级数数列 $\{s _n\} _{n = 1}^{+ \infty}$ 收敛</p><p>正确性显然</p><p>这里补充一个等比数列求和公式（设公比为 $q$ ）： $(1 - q)(1 + q + q^2 + … + q^n) = 1 - q^{n + 1}$</p><h2 id="极限的线性可加性"><a href="#极限的线性可加性" class="headerlink" title="极限的线性可加性"></a>极限的线性可加性</h2><p>设 $a_n \to a, b_m \to b$ ，则 $\lim \limits _{n \to + \infty} (\alpha a_n + \beta b_n) = \alpha a + \beta b$</p><p>证明：</p><script type="math/tex; mode=display">\begin{aligned}& \mid \alpha a _n + \beta b _n - (\alpha a + \beta b) \mid \\\le & \mid \alpha \mid \mid a _n - a \mid + \mid \beta \mid \mid b _n - b \mid \\& = \mid \alpha \mid \epsilon ‘ + \mid \beta \mid \epsilon ‘\end{aligned}</script><h2 id="夹逼定理"><a href="#夹逼定理" class="headerlink" title="夹逼定理"></a>夹逼定理</h2><p>设 $a_n \le b_n \le c_n$ ，且 $\lim \limits _{n \to + \infty} a_n = \lim \limits _{n \to + \infty} c_n$ ，则 $\lim \limits _{n \to + \infty} a_n = \lim \limits _{n \to + \infty} b_n$ </p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 微积分 </tag>
            
            <tag> 分析数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数与极限</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/analytical-mathematics-limits-of-functions/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/analytical-mathematics-limits-of-functions/</url>
      
        <content type="html"><![CDATA[<p>“一步一步向前，直到终点”</p><span id="more"></span><p>在了解函数极限之前，我们需要知道一些概念。</p><p><a href="https://dyd-true.github.io/2022/02/12/%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E9%99%90/#more">资料参考：Dyd巨佬</a></p><h2 id="拓扑空间"><a href="#拓扑空间" class="headerlink" title="拓扑空间"></a>拓扑空间</h2><h3 id="拓扑空间的邻域定义"><a href="#拓扑空间的邻域定义" class="headerlink" title="拓扑空间的邻域定义"></a>拓扑空间的邻域定义</h3><p>设 $X$ 是一个集合， $\mathfrak{U}_x$ 为其子集族，其元称为 $x$ 的<strong>邻域</strong>，令 $\mathfrak{U} = \{ \mathfrak{U}_x \}_{x \in X}$ ，则 $( X , \mathfrak{U})$ 被称为一个<strong>拓扑空间</strong>。</p><h2 id="邻域"><a href="#邻域" class="headerlink" title="邻域"></a>邻域</h2><p>邻域，是指集合上的一种基础的拓扑结构。</p><p>对于实数 $\alpha , \delta$  ：</p><p>定义数集 $\{x \in R \mid a - \delta &lt; x &lt; a + \delta\}$ 为 $a$ 以 $\delta$ 为半径的<strong>邻域</strong>，记做 $U(a, \delta)$ </p><p>定义数集 $\{x \in R \mid a - \delta &lt; x &lt; a 或 a &lt; x &lt; a + \delta\}$ 为 $a$ 以 $\delta$ 为半径的<strong>去心邻域</strong>，记做 $\mathring{U}(a, \delta)$ </p><p> 定义数集 $\{x \in R \mid a - \delta &lt; x &lt; a\}$ 为 $a$ 以 $\delta$ 为半径的<strong>去心左邻域</strong>，记做 $\mathring{U} _- (a, \delta)$ </p><p> 定义数集 $\{x \in R \mid a &lt; x &lt; a + \delta\}$ 为 $a$ 以 $\delta$ 为半径的<strong>去心右邻域</strong>，记做 $\mathring{U} _+ (a, \delta)$ </p><p>函数的左极限和右极限统称为<strong>侧边极限</strong></p><p>明显， $\lim \limits _{x \to {x _0} _+} f(x) = a$ 且 $\lim \limits _{x  \to {x _0} _-} f(x) = a$ 与 $\lim \limits _{x \to x _0} f(x) = a$ 互为充要条件</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><h3 id="唯一性"><a href="#唯一性" class="headerlink" title="唯一性"></a>唯一性</h3><p>若 $f(x) \to a(x \to r)$ 且 $f(x) \to b (x \to r)$ ，则 $a = b$</p><h3 id="局部有界"><a href="#局部有界" class="headerlink" title="局部有界"></a>局部有界</h3><p>若在某一个过程时 $f(x)$ 有极限，则存在一个时刻以后 $f(x)$ 有界。</p><p>即若极限 $\lim \limits_{x \to x_0} f(x)$ 存在，则函数 $f(x)$ 在 $x_0$ 的某一空心邻域上有界。</p><h3 id="局部保号性"><a href="#局部保号性" class="headerlink" title="局部保号性"></a>局部保号性</h3><p>若 $\lim \limits_{x \to x_0} f(x) = A$ ，且 $A &gt; 0$ ，则 $\exists \delta &gt; 0$ ，当 $x \in U^0 ( x_0 , \delta )$ 时， $ f(x)&gt;0 $ 。</p><h3 id="迫敛性"><a href="#迫敛性" class="headerlink" title="迫敛性"></a>迫敛性</h3><p>如果函数 $f(x),g(x),h(x)$ 满足：</p><ol><li>$g(x) \leq f(x) \leq h(x)$ </li><li>$\lim g(x) = A , \lim h(x) = A$ </li></ol><p>那么 $\lim f(x)$ 存在且为 $A$ 。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 微积分 </tag>
            
            <tag> 分析数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OIP2022.03.05模拟赛</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220305/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220305/</url>
      
        <content type="html"><![CDATA[<p>“<del>提高模拟能考出省选题来</del>“</p><span id="more"></span><h2 id="题目I——最短路径-path"><a href="#题目I——最短路径-path" class="headerlink" title="题目I——最短路径(path)"></a>题目I——最短路径(path)</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一个 $N$ 个点，$M$ 条边的有向权值图，求全源最短路中每条边被经过的次数。</p><p><strong>最短路径</strong>：从 $a$ 到 $b$ 的最短路径是指一条路径当且仅当不存在另一条从 $a -&gt; b$ 的路径比该路径更短。</p><blockquote><p>意思是<strong>两点之间的最短路径不止一条</strong></p></blockquote><p>求每条边通过的最短路径的个数。取模 $10^9+7$。</p><h3 id="思路I"><a href="#思路I" class="headerlink" title="思路I"></a>思路I</h3><p>用 $Spfa$ 跑 $n$ 遍最短路，跑完之后枚举每条边，记录所有满足 $val_i+c_{i,j}=val_j$ 的边。再以此对于每一遍 $Spfa$ 跑一遍 $Topo$ 排序。</p><h3 id="思路II"><a href="#思路II" class="headerlink" title="思路II"></a>思路II</h3><p>依然是跑 $n$ 遍最短路，求出<strong>最短路径图</strong>，即只含最短路的边。用 $f_i$ 表示从 $1$ 点至 $i$ 点有多少条路径， $g_i$ 表示从 $i$ 号点往后走有多少条路径。则以 $i$ 为起点的所有最短路中，经过 $c_j(u,v)$ 边的路径条数为 $f_u*g_v$</p><h3 id="另话"><a href="#另话" class="headerlink" title="另话"></a>另话</h3><p>这道题在洛谷上是双倍经验。一道紫一道灰。<del>这样做 $NOIp$ 模拟的第一题真的好吗</del></p><h3 id="Task-One-Ac-Code"><a href="#Task-One-Ac-Code" class="headerlink" title="Task One Ac Code"></a>Task One Ac Code</h3><details>    <summary>思路I</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1501</span>,MAXM=<span class="number">5001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=x*<span class="number">10</span>+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,u,v,w;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from,to,next,val;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> First[MAXN],Total,Dist[MAXN],Que[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> Vis[MAXN],Is[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAdd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(Node)&#123;x,y,First[x],z&#125;;First[x]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underSPFA</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dist,<span class="number">0x7f7f7f7f</span>,<span class="built_in">sizeof</span>(Dist));</span><br><span class="line">    <span class="built_in">memset</span>(Is,<span class="number">0</span>,<span class="built_in">sizeof</span>(Is));</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> len;</span><br><span class="line">    Dist[Que[len=<span class="number">1</span>]=x]=<span class="number">0</span>,Vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u=Que[i];Vis[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=First[u],v;e;e=Edge[e].next)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Dist[u]+Edge[e].val&lt;Dist[v=Edge[e].to])</span><br><span class="line">&#123;</span><br><span class="line">    Dist[v]=Dist[u]+Edge[e].val;</span><br><span class="line">    <span class="keyword">if</span>(!Vis[v]) Vis[Que[++len]=v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Dist[Edge[i].from]+Edge[i].val==Dist[Edge[i].to])</span><br><span class="line">&#123;</span><br><span class="line">    Is[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Deg[MAXN],Cnt[<span class="number">3</span>][MAXN],Ord[MAXN],len,Ans[MAXM];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underTopo</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>()) Q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">memset</span>(Deg,<span class="number">0</span>,<span class="built_in">sizeof</span>(Deg));</span><br><span class="line">    <span class="built_in">memset</span>(Cnt,<span class="number">0</span>,<span class="built_in">sizeof</span>(Cnt));</span><br><span class="line">    len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) <span class="keyword">if</span>(Is[i]) ++Deg[Edge[i].to];</span><br><span class="line">    Q.<span class="built_in">push</span>(s); Cnt[<span class="number">1</span>][s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">    Ord[++len]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=First[u];e;e=Edge[e].next)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!Is[e]) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">int</span> v=Edge[e].to;</span><br><span class="line">    Cnt[<span class="number">1</span>][v]=(Cnt[<span class="number">1</span>][v]+Cnt[<span class="number">1</span>][u])%Mod;</span><br><span class="line">    <span class="keyword">if</span>(--Deg[v]==<span class="number">0</span>) Q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=len;j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x=Ord[j];++Cnt[<span class="number">2</span>][x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=First[x];e;e=Edge[e].next)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!Is[e]) <span class="keyword">continue</span>;</span><br><span class="line">    Cnt[<span class="number">2</span>][x]=(Cnt[<span class="number">2</span>][x]+Cnt[<span class="number">2</span>][Edge[e].to])%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;path.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;path.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">    <span class="built_in">underAdd</span>(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">underSPFA</span>(i);<span class="built_in">underTopo</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=M;++j)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Is[j]) Ans[j]=(Ans[j]+<span class="number">1ll</span>*Cnt[<span class="number">1</span>][Edge[j].from]*Cnt[<span class="number">2</span>][Edge[j].to]%Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 4</span></span><br><span class="line"><span class="comment">1 2 5</span></span><br><span class="line"><span class="comment">2 3 5</span></span><br><span class="line"><span class="comment">3 4 5</span></span><br><span class="line"><span class="comment">1 4 8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><details>    <summary>思路II</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y, w, next, ans;</span><br><span class="line">    <span class="type">bool</span> flag;</span><br><span class="line">&#125; map[<span class="number">5101</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, st, ed;</span><br><span class="line"><span class="type">int</span> d[<span class="number">1510</span>], r[<span class="number">1510</span>], dis[<span class="number">1510</span>], f[<span class="number">1510</span>], g[<span class="number">1510</span>], head[<span class="number">1510</span>];</span><br><span class="line"><span class="type">bool</span> flag[<span class="number">1510</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dis[a] &lt; dis[b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> w, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    map[c].x = x;</span><br><span class="line">    map[c].y = y;</span><br><span class="line">    map[c].w = w;</span><br><span class="line">    map[c].ans = <span class="number">0</span>;</span><br><span class="line">    map[c].next = head[x];</span><br><span class="line">    head[x] = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;path.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;path.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);</span><br><span class="line">        x --; y --;</span><br><span class="line">        <span class="built_in">add_edge</span>(x, y, w, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) r[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> start=<span class="number">0</span>; start&lt;n; start++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) dis[i] = <span class="number">99999999</span>;</span><br><span class="line">        dis[start] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) flag[i] = <span class="literal">true</span>;</span><br><span class="line">        flag[start] = <span class="literal">false</span>;</span><br><span class="line">        st = ed = <span class="number">0</span>;</span><br><span class="line">        d[ed++] = start;</span><br><span class="line">        <span class="keyword">while</span> (st &lt; ed) &#123;</span><br><span class="line">            <span class="type">int</span> i = d[(st++) % n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=head[i]; j&gt;<span class="number">-1</span>; j=map[j].next)</span><br><span class="line">                <span class="keyword">if</span> (dis[i] + map[j].w &lt; dis[map[j].y]) &#123;</span><br><span class="line">                    dis[map[j].y] = dis[i] + map[j].w;</span><br><span class="line">                    <span class="keyword">if</span> (flag[map[j].y]) &#123;</span><br><span class="line">                        flag[map[j].y] = <span class="literal">false</span>;</span><br><span class="line">                        d[(ed++) % n] = map[j].y;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            flag[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int i=0; i&lt;n; i++)</span></span><br><span class="line">        <span class="comment">//    printf(&quot;%d--&gt;%d: %d\n&quot;, start, i, dis[i]);</span></span><br><span class="line">        <span class="comment">//printf(&quot;start: %d\n&quot;, start);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">            <span class="keyword">if</span> (dis[map[i].x] + map[i].w == dis[map[i].y]) &#123;</span><br><span class="line">                map[i].flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//        printf(&quot;%d--&gt;%d(%d)  &quot;, map[i].x, map[i].y, map[i].w);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                map[i].flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">        <span class="built_in">sort</span>(r, r+n, cmp);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) f[i] = <span class="number">0</span>;</span><br><span class="line">        f[start] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=head[r[i]]; j&gt;<span class="number">-1</span>; j=map[j].next)</span><br><span class="line">                <span class="keyword">if</span> (map[j].flag)</span><br><span class="line">                    f[map[j].y] = (f[map[j].y] + f[r[i]]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int i=0; i&lt;n; i++)</span></span><br><span class="line">        <span class="comment">//    printf(&quot;f[%d]=%d  &quot;, i, f[i]);</span></span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=n<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">            g[r[i]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=head[r[i]]; j&gt;<span class="number">-1</span>; j=map[j].next)</span><br><span class="line">                <span class="keyword">if</span> (map[j].flag)</span><br><span class="line">                    g[r[i]] = (g[r[i]] + g[map[j].y]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int i=0; i&lt;n; i++)</span></span><br><span class="line">        <span class="comment">//    printf(&quot;g[%d]=%d  &quot;, i, g[i]);</span></span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">            <span class="keyword">if</span> (map[i].flag) &#123;</span><br><span class="line">                <span class="comment">//printf(&quot;%d--&gt;%d  &quot;, map[i].x, map[i].y);</span></span><br><span class="line">                map[i].ans = (map[i].ans + g[map[i].y] * (<span class="type">long</span> <span class="type">long</span>)(f[map[i].x])) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, map[i].ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="题目II——数列-seq"><a href="#题目II——数列-seq" class="headerlink" title="题目II——数列(seq)"></a>题目II——数列(seq)</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>对于一个长度为 $n$ 的数列，有 $m$ 个询问：</p><ol><li>$C\ i\ x$ 表示将下标为 $i$ 的数改为 $x$</li><li>$Q\ i$ 求满足 $\forall i \leq k \leq j,A_k \leq \max\{A_i,A_j\}$ 中 $j$ 的个数</li></ol><p>复杂度不大于 $O(n \log n)$</p><h3 id="题意思路"><a href="#题意思路" class="headerlink" title="题意思路"></a>题意思路</h3><p>根据其查询，我们需要找到所有的“谷段”，即如果我们将整个数列看作一个波峰图，如下图所示：</p><p><img src="https://violeteternal.github.io/blog/post-images/1646537618216.png" alt=""></p><p>那么我们就需要找到所有类似于开口向上的二次函数的个数。不难发现：当我们第一次找到 $A_p \leq A_j$ 时，$p$ 到 $j$ 之间的任意位置都是满足要求的。</p><p>然而，当第一次：</p><blockquote><p>当 $A_p = A_j$ 时，对于 $j$ 之后下一个满足要求的位置 $k$ 时，$j$ 与 $k$ 之间的任意位置也是可以取的。</p><p>而当 $A_p &lt; A_j$ 时，对于 $j$ 之后下一个满足要求的位置 $k$ 时，就仅仅只能取 $k$ 位置了。</p></blockquote><p>其缘由读者可自行思考。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p><del>又是线段树打爆的一天</del></p><p>使用一种类似分块但胜似分块的神奇思路。</p><p>将整个数列分成 $\sqrt n$ 段：</p><ol><li>对于每一段，维护其向左向右的递增序列；</li><li>对于相邻的段，维护其向左向右的递增序列。</li></ol><p><del>虽然我觉得这题解类似没写又胜似没写</del></p><p>用 $L_i$ 存储第 $i$ 段的左坐标，$R_i$ 存储第 $i$ 段的右坐标。数组 $Bel_i$ 存储 $i$ 位置所属的段编号。</p><h4 id="初始化-修改操作"><a href="#初始化-修改操作" class="headerlink" title="初始化/修改操作"></a>初始化/修改操作</h4><p>对于每一段都有一个数 $top$ 和一个数组 $st_i$ 。$st$ 数组存储的是该区间内的最长不下降子序列，而 $top$ 则是 $st$ 数组的长度。然后求就完事儿了，复杂度 $O(\sqrt n)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> st[],<span class="type">int</span> &amp;top)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;=l;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(top&amp;&amp;Num[st[top]]&lt;Num[i]) --top;</span><br><span class="line">st[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><p>暴力求本区间，复杂度 $O(\sqrt n )$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> bl=Bel[p],Max=Num[p];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=p+<span class="number">1</span>;i&lt;=R[bl];++i)</span><br><span class="line">&#123;</span><br><span class="line">    Max=<span class="built_in">underMax</span>(Max,Num[i]);</span><br><span class="line">    <span class="keyword">if</span>(Max&lt;=<span class="built_in">underMax</span>(Num[p],Num[i])) ++ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记查询点为 $p$ ,则对于 $Bel_p+1$ 到 $Bel_n$ 的区间操作为：</p><p>二分该区间的 $st$ 数组，找到第一个 $l$ 位置满足 $A_p \leq A_l$ ，如果当前 $Max$ 与 $A_p$ 是相等的，则可以计算该区间 $l$ 之前的任意位置；反之，计算 $l$ 之后的个数和（不比 $A_p$ 小的个数），当然，$Max=A_p$ 时也要计算该区间。</p><p>然后更改 $Max$ 值，查找下一区间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=bl+<span class="number">1</span>;i&lt;=num;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=Top[i];</span><br><span class="line">    <span class="keyword">if</span>(Max==Num[p])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Num[St[i][mid]]&gt;Max) l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="number">0</span>) ans+=R[i]-L[i]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans+=St[i][l]<span class="number">-1</span>-L[i]+<span class="number">1</span>;</span><br><span class="line">            ans+=l<span class="number">-1</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Num[St[i][mid]]&gt;=Max) l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=l<span class="number">-1</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Max=<span class="built_in">underMax</span>(Max,Num[St[i][<span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure><h3 id="另话-1"><a href="#另话-1" class="headerlink" title="另话"></a>另话</h3><p>这道题题意很简单，主要原因还是时间复杂度的问题。我使用线段树二分查找的复杂度不稳定，<del>所以很氢凇被卡了</del></p><h3 id="Task-Two-Ac-Code"><a href="#Task-Two-Ac-Code" class="headerlink" title="Task Two Ac Code"></a>Task Two Ac Code</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">50001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">101</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXB=<span class="number">1001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> N,M,Num[MAXN],Qi,Qx;</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="type">int</span> Bel[MAXN],L[MAXM],R[MAXM],St[MAXM][MAXB],Top[MAXM];</span><br><span class="line"><span class="comment">/*struct SegmentTree</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int l,r,dat;</span></span><br><span class="line"><span class="comment">&#125;Tree[MAXN&lt;&lt;2];*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underMax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a&gt;b?a:b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underMin</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a&lt;b?a:b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*inline void underPushUp(int p)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Tree[p].dat=underMax(Tree[p&lt;&lt;1].dat,Tree[p&lt;&lt;1|1].dat);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline bool underCheck(int p)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(Tree[p].dat==Num[Tree[p].l]||Tree[p].dat==Num[Tree[p].r]) return 1;</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underBuild(int p,int l,int r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Tree[p].l=l,Tree[p].r=r;</span></span><br><span class="line"><span class="comment">if(l==r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Tree[p].dat=Num[l];</span></span><br><span class="line"><span class="comment">return ;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int mid=(l+r)&gt;&gt;1;</span></span><br><span class="line"><span class="comment">underBuild(p&lt;&lt;1,l,mid),underBuild(p&lt;&lt;1|1,mid+1,r);</span></span><br><span class="line"><span class="comment">underPushUp(p);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underModify(int p,int d,int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(Tree[p].l==d&amp;&amp;Tree[p].r==d)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Tree[p].dat=x;</span></span><br><span class="line"><span class="comment">return ;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int mid=(Tree[p].l+Tree[p].r)&gt;&gt;1;</span></span><br><span class="line"><span class="comment">if(d&lt;=mid) underModify(p&lt;&lt;1,d,x);</span></span><br><span class="line"><span class="comment">if(mid&lt;d) underModify(p&lt;&lt;1|1,d,x);</span></span><br><span class="line"><span class="comment">underPushUp(p);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline int underQueryMax(int p,int l,int r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r) return Tree[p].dat;</span></span><br><span class="line"><span class="comment">int mid=(Tree[p].l+Tree[p].r)&gt;&gt;1;</span></span><br><span class="line"><span class="comment">int val=-INF;</span></span><br><span class="line"><span class="comment">if(l&lt;=mid) val=underMax(val,underQueryMax(p&lt;&lt;1,l,r));</span></span><br><span class="line"><span class="comment">if(mid&lt;r) val=underMax(val,underQueryMax(p&lt;&lt;1|1,l,r));</span></span><br><span class="line"><span class="comment">return val;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underNeverGonnaGiveYouUp()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">for(int i=1;i&lt;=M;++i)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">scanf(&quot;%c&quot;,&amp;op);</span></span><br><span class="line"><span class="comment">if(op==&#x27;Q&#x27;)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">underRead(Qi);</span></span><br><span class="line"><span class="comment">int Ans=0,Maxn=Num[Qi];</span></span><br><span class="line"><span class="comment">for(int j=Qi+1;j&lt;=N;++j)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Maxn=underMax(Maxn,Num[j]);</span></span><br><span class="line"><span class="comment">if(Maxn&lt;=Num[Qi]||Maxn&lt;=Num[j]) ++Ans;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf(&quot;%d\n&quot;,Ans);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">underRead(Qi),underRead(Qx);</span></span><br><span class="line"><span class="comment">Num[Qi]=Qx;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">exit(0);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline int underExpr(int p,int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(x==N) return 0;</span></span><br><span class="line"><span class="comment">if(underQueryMax(1,x+1,N)&lt;Num[x])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(p&gt;1) return 0;</span></span><br><span class="line"><span class="comment">else return N-x;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int l=x+1,r=N;</span></span><br><span class="line"><span class="comment">while(l&lt;r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int mid=(l+r)&gt;&gt;1;</span></span><br><span class="line"><span class="comment">int val=underQueryMax(1,x+1,mid);</span></span><br><span class="line"><span class="comment">if(val&lt;Num[x]) l=mid+1;</span></span><br><span class="line"><span class="comment">else r=mid;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//printf(&quot;[%d,%d] &quot;,x,l);</span></span><br><span class="line"><span class="comment">if(p&gt;1) return 1+underExpr(p,l);</span></span><br><span class="line"><span class="comment">else if(Num[l]==Num[x]) return l-x+underExpr(p,l);</span></span><br><span class="line"><span class="comment">else return l-x+underExpr(p+1,l);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> st[],<span class="type">int</span> &amp;top)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;=l;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(top&amp;&amp;Num[st[top]]&lt;Num[i]) --top;</span><br><span class="line">st[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQuery</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> bl=Bel[p],Max=Num[p];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=p+<span class="number">1</span>;i&lt;=R[bl];++i)</span><br><span class="line">&#123;</span><br><span class="line">Max=<span class="built_in">underMax</span>(Max,Num[i]);</span><br><span class="line"><span class="keyword">if</span>(Max&lt;=<span class="built_in">underMax</span>(Num[p],Num[i])) ++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=bl+<span class="number">1</span>;i&lt;=num;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=Top[i];</span><br><span class="line"><span class="keyword">if</span>(Max==Num[p])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(Num[St[i][mid]]&gt;Max) l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">0</span>) ans+=R[i]-L[i]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans+=St[i][l]<span class="number">-1</span>-L[i]+<span class="number">1</span>;</span><br><span class="line">ans+=l<span class="number">-1</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(Num[St[i][mid]]&gt;=Max) l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=l<span class="number">-1</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Max=<span class="built_in">underMax</span>(Max,Num[St[i][<span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;seq.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;seq.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line"><span class="type">int</span> siz=<span class="built_in">sqrt</span>(N*<span class="built_in">log2</span>(N)),num=(N+siz<span class="number">-1</span>)/siz;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Num[i]),Bel[i]=(i+siz<span class="number">-1</span>)/siz;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;++i)</span><br><span class="line">&#123;</span><br><span class="line">L[i]=R[i<span class="number">-1</span>]+<span class="number">1</span>,R[i]=<span class="built_in">underMin</span>(i*siz,N);</span><br><span class="line"><span class="built_in">underModify</span>(L[i],R[i],St[i],Top[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if(N&lt;=5000) underNeverGonnaGiveYouUp();</span></span><br><span class="line">    <span class="comment">/*underBuild(1,1,N);*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> T=<span class="number">1</span>;T&lt;=M;++T)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;op;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Qi);</span><br><span class="line"><span class="comment">/*if(underQueryMax(1,Qi,N)==Num[Qi]) printf(&quot;%d\n&quot;,N-Qi);</span></span><br><span class="line"><span class="comment">else if(Tree[1].dat==Num[Qi])printf(&quot;%d\n&quot;,N-Qi);</span></span><br><span class="line"><span class="comment">else printf(&quot;%d\n&quot;,underExpr(1,Qi));</span></span><br><span class="line"><span class="comment">printf(&quot;%d\n&quot;,underQuery(1,Qi-1,Qi+1));*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underQuery</span>(Qi,num));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;Qi,&amp;Qx);</span><br><span class="line">Num[Qi]=Qx;</span><br><span class="line"><span class="type">int</span> bl=Bel[Qi];</span><br><span class="line"><span class="built_in">underModify</span>(L[bl],R[bl],St[bl],Top[bl]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 3</span></span><br><span class="line"><span class="comment">1 3 2 3 2</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 1 3</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">10 12</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 1 10</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 2 11</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 3 11</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 4 10</span></span><br><span class="line"><span class="comment">C 5 11</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment">C 1 11</span></span><br><span class="line"><span class="comment">Q 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1 5 3 6 3 3 6</span></span><br><span class="line"><span class="comment">st[1]=6 top=1 i=7</span></span><br><span class="line"><span class="comment">st[2]=6,3 top=2 i=6</span></span><br><span class="line"><span class="comment">st[3]=6,3,3 top=3 i=5</span></span><br><span class="line"><span class="comment">st[2]=6,6 top=2 i=4</span></span><br><span class="line"><span class="comment">st[3]=6,6,3 top=3 i=3</span></span><br><span class="line"><span class="comment">st[3]=6,6,5 top=3 i=2</span></span><br><span class="line"><span class="comment">st[4]=6,6,5,1 top=4 i=1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> RMQ </tag>
            
            <tag> 数论 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 二分 </tag>
            
            <tag> SPFA </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 面积并 </tag>
            
            <tag> 几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF19B Checkout Assistant</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/cf19b/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/cf19b/</url>
      
        <content type="html"><![CDATA[<p>$01$背包变形<br><span id="more"></span><br><a href="https://www.luogu.com.cn/problem/CF19B">题目传送门</a></p><p><del>虽然我也不知道为什么被卡了反正就是听取WA声一片</del></p><p>扫描第$i$件物品能够得到$t_i+1$件物品，则将题目转化为：</p><p>一共有$n$件物品，第$i$件物品的体积为$t_i+1$，价值为$c_i$。</p><p>$AC\ Code$：</p><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">2005</span>,N=<span class="number">4005</span>;</span><br><span class="line"><span class="type">int</span> n,t[M],v;</span><br><span class="line">ll c[M],dp[N],ans=<span class="number">2e12</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>,&amp;t[i],&amp;c[i]);</span><br><span class="line">t[i]++;</span><br><span class="line">v=<span class="built_in">max</span>(v,t[i]);</span><br><span class="line">&#125;</span><br><span class="line">v+=n;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0x7f</span>,<span class="built_in">sizeof</span>(dp));dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=v;j&gt;=t[i];j--)</span><br><span class="line">dp[j]=<span class="built_in">min</span>(dp[j],dp[j-t[i]]+c[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&lt;=v;i++)</span><br><span class="line">ans=<span class="built_in">min</span>(ans,dp[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络最大流Dinic</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/maximum-flow-of-dinic/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/maximum-flow-of-dinic/</url>
      
        <content type="html"><![CDATA[<p>“我从起点出发，送给你源源不尽的爱”</p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h3><p>所谓网络，实则为一个带权有向图$(V,E)$。对于每一条边$(x,y)$存在一个数据$c(x,y)$表示该边的容量。对于一个网络，有两个点是特殊的：<strong>源点</strong>$S$与<strong>汇点</strong>$T$。</p><p>可以把网络流看作水库出水，而<strong>源点</strong>则是水库，<strong>汇点</strong>就是你家。源点的“量”是无限的，中途的任何一个点不存储任意一点流量也不会产生任何一点流量，所以源点出发的所有流量必定流入汇点。而经过每一条边的<strong>最大流量</strong>，即是$c(x,y)$</p><p>最大流的算法，就是在满足流过边$c$的流量满足$\leq c(x,y)$的情况下，汇点的流量最大的问题。</p><h3 id="增广路"><a href="#增广路" class="headerlink" title="增广路"></a>增广路</h3><ol><li>增广路是一条链。（链是网络中的一个顶点序列，这个序列中前后两个顶点有弧相连）</li><li>链上的前向弧都是非饱和弧，链上的后向弧都是非零弧。（前向弧即输入的边，后向弧即建立的反边）</li><li>链的起点是源点，终点是汇点。</li></ol><p>增广路是一个<strong>边的集合</strong>，从$S$至$T$的一条路径。增广路的<strong>最大流量</strong>表示该路径经过的边中流量最小的边的流量，即：</p><blockquote><p>一条增广路$i$的边集是$E_i$，最大流量是$c$，则$\forall r \in E , c_r \leq c$</p></blockquote><p>用<a href="https://2745518585.github.io/post/maximum-flow-Dinic/">赵悦岑巨佬</a>的话来讲，增广路指的就是一条从源点到汇点，且经过的边最小容量不为$0$的路径。而我们寻找增广路之后，就会将所有经过的边的容量减去增广路的流量。但是，这种算法并不保险。所以我们对于每一条存在的$c(x,y)$，都建立其后向弧满足$c(y,x)=0$使得我们在后续寻找增广路时可以“反悔”，使其不因之前的错误增广路而影响。</p><p>我们对于每一条边都增加一条容量为$0$反向边，找到增广路后经过的边流量要减去此增广路的流量，其反向边的流量还要加上此增广路的流量。所有反向边组成的图就是<strong>残留网络</strong>。</p><h3 id="残余网络"><a href="#残余网络" class="headerlink" title="残余网络"></a>残余网络</h3><p>我们设$f(x,y)$为边$(x,y)$的实际容量。</p><ul><li>饱和弧：$f(x,y)=c(x,y)$，流量为该边的容量</li><li>非饱和弧：$f(x,y)&lt;c(x,y)$，实际流量小于容量</li><li>零流弧：$f(x,y)=0$，该边未流过流量。</li><li>非零流弧：$f(x,y)&gt;0$，当前流量不为$0$</li></ul><p><strong>残余网络</strong>：设有容量网络$G(V,E)$及其上的网络流$f$，$G$关于$f$的残留网络即为$G(V’,E’)$，其中$G’$的顶点集$V’$和$G$的顶点集$V$相同，即$V’=V$，对于$G$中任何一条弧$(u,v)$，如果$f(u,v)<c(u,v)$，那么在$G'$中有一条弧$(u,v)∈E'$，其容量为$c'(u,v)=c(u,v)-f(u,v)$，如果$f(u,v)>0$，则在$G'$中有一条弧$<v,u>∈E’$，其容量为$c’(v,u)=f(u,v)$。</p><p>从残留网络的定义来看，原容量网络中的每条弧在残留网络中都化为一条或者两条弧。在残留网络中，从源点到汇点的任意一条简单路径都对应一条增光路，路径上每条弧容量的最小值即为能够一次增广的最大流量。</p><p><img src="https://images2015.cnblogs.com/blog/364303/201611/364303-20161128223853256-1111255618.png" alt="img"></p><h3 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h3><ul><li><p>每次多路增广：$u$点通过一条边，向$v$输出流量以后，$v$会尝试到达汇点（到达汇点才真正增广），然后$v$返回实际增广量。这时，<strong>如果$u$还有没用完的供给，就继续尝试输出到其它边。</strong></p><p>但是要警惕绕远路、甚至绕回的情况，不加管制的话极易发生。怎么管？</p></li><li><p>源点<strong>顺着残量网络</strong>想要到达其它点，需要经过一些边对吧？<strong>按照经过的边数（即源点出发以后的距离）把图分层，即用$bfs$分层。</strong> 每次尝试给予时，<strong>只考虑给予自己下一层的点</strong>，就可以防止混乱。</p></li><li><p>综合上面两条。每回合也是从源点出发，<strong>先按照当前残量网络分一次层</strong>，随后多路增广，尽可能增加流量。增广过程中，会加入一些反向边，这些反向边逆着层次图，本回合并不会走。所以还需要进入下一回合。一直到$bfs$分层时搜不到汇点（即残量网络断了）为止。</p></li></ul><p>$Dinic$首先$bfs$对网络进行分层，构成一张分层图。然后进行$dfs$寻找当前的最大流。直到$bfs$无法达到汇点，则整个算法停止。</p><h3 id="Dinic的当前弧优化"><a href="#Dinic的当前弧优化" class="headerlink" title="Dinic的当前弧优化"></a>Dinic的当前弧优化</h3><p>$dfs$过程中我们会一直流直到把一条边流完再转到下一条边，如果一条边有容量但是却没有增广路，说明这条边的下一个点已经没有更多容量了，我们就可以把连接的这个点的高度标记为$0$，下一次就不会再搜索到这个点了。</p><p>不过$Dinic$还是很慢，甚至比$EK$还慢，这时候我们就需要拯救$Dinic$的当前弧优化。上面说到，$dfs$过程中会一直流直到把一条边流完再转到下一条边，当搜索到一条边的时候说明这条边之前的所有边都已经没有增广路了，我们就可以直接将$t$指向这条边，这样下一次就不会再次搜索已经没有流量的边了。</p><h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">1e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,s,t,u,v;</span><br><span class="line">ll r;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> next,to;</span><br><span class="line">    ll val;</span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> n=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,ll v=<span class="number">0</span>):<span class="built_in">next</span>(n),<span class="built_in">to</span>(t),<span class="built_in">val</span>(v)&#123;&#125;</span><br><span class="line">&#125;Edge[MAXM];</span><br><span class="line"><span class="type">int</span> First[MAXN],Total=<span class="number">1</span>,t0[MAXN];</span><br><span class="line">ll f[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Que</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,r;</span><br><span class="line">    <span class="built_in">Que</span>(<span class="type">int</span> u=<span class="number">0</span>,<span class="type">int</span> r=<span class="number">0</span>):<span class="built_in">u</span>(u),<span class="built_in">r</span>(r)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAdd</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge[++Total]=(edge)&#123;First[u],v,r&#125;,First[u]=Total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">underBfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">    f[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e=First[u];e;e=Edge[e].next)</span><br><span class="line">            <span class="keyword">if</span>(!f[Edge[e].to]&amp;&amp;Edge[e].val)</span><br><span class="line">            &#123;</span><br><span class="line">                f[Edge[e].to]=f[u]+<span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(Edge[e].to);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[t]!=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">underDfs</span><span class="params">(<span class="type">int</span> x,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==t) <span class="keyword">return</span> r;</span><br><span class="line">    ll S=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=t0[x];e;e=Edge[e].next)</span><br><span class="line">    &#123;</span><br><span class="line">        t0[x]=e;</span><br><span class="line">        <span class="keyword">if</span>(f[Edge[e].to]==f[x]+<span class="number">1</span>&amp;&amp;Edge[e].val)</span><br><span class="line">        &#123;</span><br><span class="line">            ll k=<span class="built_in">underDfs</span>(Edge[e].to,<span class="built_in">underMin</span>(r,Edge[e].val));</span><br><span class="line">            <span class="keyword">if</span>(k)</span><br><span class="line">            &#123;</span><br><span class="line">                Edge[e].val-=k;</span><br><span class="line">                Edge[e^<span class="number">1</span>].val+=k;</span><br><span class="line">                r-=k,S+=k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> f[Edge[e].to]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(!r) <span class="keyword">return</span> S;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;maxinum-flow.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;maxinum-flow.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>,&amp;u,&amp;v,&amp;r);</span><br><span class="line">        <span class="built_in">underAdd</span>(u,v,r),<span class="built_in">underAdd</span>(v,u,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ll R=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">underBfs</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) t0[i]=First[i];</span><br><span class="line">        R+=<span class="built_in">underDfs</span>(s,INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,R);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5 4 3</span></span><br><span class="line"><span class="comment">4 2 30</span></span><br><span class="line"><span class="comment">4 3 20</span></span><br><span class="line"><span class="comment">2 3 20</span></span><br><span class="line"><span class="comment">2 1 30</span></span><br><span class="line"><span class="comment">1 3 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最大流 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> Dinic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ST表（Sparse Table，稀疏表）</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/sparse-table/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/sparse-table/</url>
      
        <content type="html"><![CDATA[<p>“聚二为一”</p><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>$ST$ 表是一种用来求 $RMQ$ ，即区间最值问题的数据结构。其速度极快，可以做到 $O(n \log n)$ 的预处理以及 $O(1)$ 的查询时，且可以在线查询。</p><p>$ST$ 表运用到了倍增的思想，将整个数列存储在一个二维数组 $f$ 中。其中：</p><blockquote><p>$f_{i,j}$ 表示区间 $[f_{i,j},f_{i,i+2^j-1}]$ 的最值。</p></blockquote><p>而查询的思路便是将区间分成左右两部分并取出两部分的最值。</p><p>对于区间 $[l,r]$ 的最大值，则是 $\max\{f_{l,k},f_{r-k+1,k}\}$，其中 $k$ 表示 $\log(r-l+1)$ 。</p><p>初始状态： $f_{i,0}=a_i$ ，然后外层遍历 $i$ ，内层遍历 $j$ 处理 $f$ 即可。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://www.luogu.com.cn/problem/P3865">【模板】ST表</a></p><p>区间最大值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,a[<span class="number">100001</span>],f[<span class="number">100001</span>][<span class="number">64</span>],k[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underGet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) k[i]=<span class="built_in">log2</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i][<span class="number">0</span>]=a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&lt;=n;++j)</span><br><span class="line">f[j][i]=<span class="built_in">underMax</span>(f[j][i<span class="number">-1</span>],f[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;st.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;st.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">underRead</span>(n),<span class="built_in">underRead</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">underRead</span>(a[i]);</span><br><span class="line"><span class="built_in">underGet</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l,r;m;--m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">underRead</span>(l),<span class="built_in">underRead</span>(r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">underMax</span>(f[l][k[r-l+<span class="number">1</span>]],f[r-(<span class="number">1</span>&lt;&lt;(k[r-l+<span class="number">1</span>]))+<span class="number">1</span>][k[r-l+<span class="number">1</span>]]));</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8 8</span></span><br><span class="line"><span class="comment">9 3 1 7 5 6 0 8</span></span><br><span class="line"><span class="comment">1 6</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">2 7</span></span><br><span class="line"><span class="comment">2 6</span></span><br><span class="line"><span class="comment">1 8</span></span><br><span class="line"><span class="comment">4 8</span></span><br><span class="line"><span class="comment">3 7</span></span><br><span class="line"><span class="comment">1 8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><a href="https://www.luogu.com.cn/problem/P2251">P2251 质量检测</a></p><p><a href="https://www.luogu.com.cn/problem/P1816">P1816 忠诚</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMQ </tag>
            
            <tag> ST表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扫描线</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/scan-line/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/scan-line/</url>
      
        <content type="html"><![CDATA[<p>“地毯式搜索”</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P5490">P5490 扫描线</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用线段树维护一个横区间内所有的矩形个数，对于每个不为 $0$ 的区间则计算答案。</p><p>因为坐标过大，所以线段树维护的是离散化之后的坐标。</p><p>在扫描线算法中，我们总共需要两次排序：将端点的横坐标排序和横线的纵坐标排序。在进行排序之后，我们还需要将端点横坐标离散化和去重，用 $STL$ 的 $unique$ 函数就可以了。</p><p>最后，扫描横边，查询每一个横边所在区间的竖边即可。</p><p><a href="https://2745518585.github.io/post/Scan%20line/">参考资料：赵悦岑’s blog’</a></p><h2 id="AC-Code："><a href="#AC-Code：" class="headerlink" title="AC Code："></a>AC Code：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,dat;</span><br><span class="line">    ll tag;</span><br><span class="line">&#125;Tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Sort_Str</span></span><br><span class="line">&#123;</span><br><span class="line">    ll l,r,dat;</span><br><span class="line">    <span class="type">int</span> tag;</span><br><span class="line">&#125;Num[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll b[MAXN&lt;&lt;<span class="number">4</span>],l1,l2,r1,r2;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">underCmp</span><span class="params">(Sort_Str a,Sort_Str b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dat&lt;b.dat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].dat) Tree[p].tag=b[Tree[p].r+<span class="number">1</span>]-b[Tree[p].l];</span><br><span class="line">    <span class="keyword">else</span> Tree[p].tag=Tree[p&lt;&lt;<span class="number">1</span>].tag+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underBuild</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l,Tree[p].r=r,Tree[p].tag=Tree[p].dat=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAdd</span><span class="params">(<span class="type">int</span> p,ll l,ll r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b[Tree[p].l]&gt;=r||b[Tree[p].r+<span class="number">1</span>]&lt;=l) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(b[Tree[p].l]&gt;=l&amp;&amp;b[Tree[p].r+<span class="number">1</span>]&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].dat+=k;</span><br><span class="line">        <span class="built_in">underPushUp</span>(p);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underAdd</span>(p&lt;&lt;<span class="number">1</span>,l,r,k),<span class="built_in">underAdd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">    <span class="built_in">underPushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;segmenttree.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;segmenttree.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">underRead</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>,&amp;l1,&amp;r1,&amp;l2,&amp;r2);</span><br><span class="line">        Num[(i&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>]=(Sort_Str)&#123;l1,l2,r1,<span class="number">1</span>&#125;;</span><br><span class="line">        Num[i&lt;&lt;<span class="number">1</span>]=(Sort_Str)&#123;l1,l2,r2,<span class="number">-1</span>&#125;;</span><br><span class="line">        b[(i&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>]=l1,b[i&lt;&lt;<span class="number">1</span>]=l2;</span><br><span class="line">    &#125;</span><br><span class="line">    n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(Num+<span class="number">1</span>,Num+<span class="number">1</span>+n,underCmp);</span><br><span class="line">    <span class="built_in">sort</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line">    m=<span class="built_in">unique</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-(b+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">underBuild</span>(<span class="number">1</span>,<span class="number">1</span>,m<span class="number">-1</span>);</span><br><span class="line">    ll s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underAdd</span>(<span class="number">1</span>,Num[i].l,Num[i].r,Num[i].tag);</span><br><span class="line">        s+=Tree[<span class="number">1</span>].tag*(Num[i+<span class="number">1</span>].dat-Num[i].dat);</span><br><span class="line">        <span class="comment">// printf(&quot;%d %d\n&quot;,Tree[1].tag,(Num[i+1].dat-Num[i].dat));</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">100 100 200 200</span></span><br><span class="line"><span class="comment">150 150 250 255</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 面积并 </tag>
            
            <tag> 几何 </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列优化Dp</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-of-monotonous-queue/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-of-monotonous-queue/</url>
      
        <content type="html"><![CDATA[<p>“我永远对你保有最诚挚的爱”</p><span id="more"></span><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><p>单调队列是一种<strong>队列内的元素有单调性</strong>（递增或递减）的队列。答案（最优解）存在队首。一般用于维护区间最值或者降低 $Dp$ 数组的维度来减少空间及时间的目的。</p><details>    <summary>单调队列的作用</summary>    1. 维护区间最值 <Br />    2. 优化 DP</details><p>单调队列在队首和队尾都可以进行<strong>出队操作</strong>，但只有队尾可以进行<strong>入队</strong>操作。这样的操作类似于双端队列（$deque$）允许双端弹出。但一般来说，还是不建议使用 $STL$ 库，手写方便且比较节省时间。</p><p>总的来说，单调队列的实现有三步：</p><ol><li>将 $head$ 之前所有已在区间之外的答案删掉（ $++head$ ）</li><li>更新答案为 $Queue[head]$</li><li>将尾部的非最优答案排除（ $—tail$ ），并入队最新答案。</li></ol><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p><a href="https://www.luogu.com.cn/problem/P1886">【模板】单调队列/滑动窗口</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求出区间最大值和最小值，因为复杂度限制 $O(n \log n)$ 所以无法暴力。就使用单调队列的优化。</p><h3 id="AC-Code："><a href="#AC-Code：" class="headerlink" title="AC Code："></a>AC Code：</h3><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">int</span> N,K,A[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> Q[<span class="number">10000001</span>];</span><br><span class="line"><span class="type">int</span> P[<span class="number">10000001</span>],head,tail;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">head=<span class="number">1</span>;</span><br><span class="line">tail=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(head&lt;=tail&amp;&amp;Q[tail]&lt;=A[i])</span><br><span class="line">&#123;</span><br><span class="line">tail--;</span><br><span class="line">&#125;</span><br><span class="line">Q[++tail]=A[i];</span><br><span class="line">P[tail]=i;</span><br><span class="line"><span class="keyword">while</span>(P[head]&lt;=i-K)</span><br><span class="line">&#123;</span><br><span class="line">head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=K)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Q[head]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">head=<span class="number">1</span>;</span><br><span class="line">tail=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(head&lt;=tail&amp;&amp;Q[tail]&gt;=A[i])</span><br><span class="line">&#123;</span><br><span class="line">tail--;</span><br><span class="line">&#125;</span><br><span class="line">Q[++tail]=A[i];</span><br><span class="line">P[tail]=i;</span><br><span class="line"><span class="keyword">while</span>(P[head]&lt;=i-K)</span><br><span class="line">&#123;</span><br><span class="line">head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=K)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Q[head]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;K);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">underMin</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">underMax</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8 3</span></span><br><span class="line"><span class="comment">1 3 -1 -3 5 3 6 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></details><h2 id="单调队列优化多重背包"><a href="#单调队列优化多重背包" class="headerlink" title="单调队列优化多重背包"></a>单调队列优化多重背包</h2><p><a href="https://2745518585.github.io/post/Monotone%20queue%20Knapsack/">巨佬的讲解</a></p><p><a href="https://www.acwing.com/problem/content/6/">Acwing 6 多重背包III</a></p><details>    <summary>查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">int</span> n,V;</span><br><span class="line"><span class="type">int</span> v,w,s;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">20001</span>],pre[<span class="number">20001</span>],q[<span class="number">20001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;V);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(pre, dp, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">        <span class="type">int</span> v, w, s;</span><br><span class="line">        cin &gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;v;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> head=<span class="number">0</span>, tail=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k=j;k&lt;=V;k+=v)</span><br><span class="line">            &#123;</span><br><span class="line">                        <span class="keyword">if</span> (head&lt;=tail&amp;&amp;k-s*v&gt;q[head]) ++head;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;=tail&amp;&amp;pre[q[tail]]-(q[tail]-j)/v*w&lt;=pre[k]-(k-j)/v*w) --tail;</span><br><span class="line">            <span class="keyword">if</span> (head&lt;=tail) dp[k]=<span class="built_in">max</span>(dp[k],pre[q[head]]+(k-q[head])/v*w);</span><br><span class="line">            q[++tail]=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[V]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></details><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><a href="https://www.luogu.com.cn/problem/P1440">P1440 求m区间内的最小值</a></p><p><a href="https://www.luogu.com.cn/problem/P2032">P2032 扫描</a></p><p><a href="https://www.luogu.com.cn/problem/P1725">P1725 琪露诺</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 优化 </tag>
            
            <tag> 分析法 </tag>
            
            <tag> 单调队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2022.02.12模拟赛</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220212/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220212/</url>
      
        <content type="html"><![CDATA[<p>还彳亍</p><span id="more"></span><h2 id="题目I——城墙（wall）"><a href="#题目I——城墙（wall）" class="headerlink" title="题目I——城墙（wall）"></a>题目I——城墙（wall）</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给出一个长度为 $n$ 的序列和一个数 $S$ ，求出最短的区间使得区间和大于等于 $S$ 。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为 $n \leq 1500000$ ，所以复杂度最大为 $O(n \log n)$ ，统计前缀和，二分统计长度是否能达到，每次暴力区间和。复杂度合适。</p><h3 id="Task-One-AC-Code"><a href="#Task-One-AC-Code" class="headerlink" title="Task One AC Code"></a>Task One AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1500001</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,S,num[MAXN];</span><br><span class="line">ll sum[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">underCheck</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=k;i&lt;=n;++i) <span class="keyword">if</span>(sum[i]-sum[i-k]&gt;=S) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;wall.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;wall.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(n),<span class="built_in">underRead</span>(S);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(num[i]);</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">    <span class="keyword">if</span>(sum[n]&lt;S)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">underCheck</span>(mid)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 15</span></span><br><span class="line"><span class="comment">5 1 3 5 10 7 4 9 2 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="题目II——岗哨（sentry）"><a href="#题目II——岗哨（sentry）" class="headerlink" title="题目II——岗哨（sentry）"></a>题目II——岗哨（sentry）</h2><h3 id="题目含义："><a href="#题目含义：" class="headerlink" title="题目含义："></a>题目含义：</h3><p>给出一个长度为 $n(n \leq 10^6)$ 的序列：</p><p>第一个答案求的是一段最长的，严格递增的，右端点最小的子区间，输出该子区间的右端点。</p><p>第二行答案求的是去掉一个区间后，一段最长的，严格递增的，右端点最小的子区间，输出该子区间的右端点和长度。</p><h3 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h3><p>洛谷有一道类似题目——<a href="https://www.luogu.com.cn/problem/UVA1471">UVA1471防线</a></p><p>根据<del>机房老大哥</del>的教导，这道题的方法多样：树状数组，线段树，$Dp$，离散化等。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><strong>注：本人的线段树写挂了，所以以下方法来自同机房巨佬<a href="https://www.luogu.com.cn/user/109659">_Live_</a>的题解</strong></p><p>对于第一个答案，用 $num_i$ 结构体统计每一个连续上升子区间的信息，得出最大的子区间长度，输出右端点即可。</p><p>对于第二个答案，用 $f_i$ 统计以 $i$ 为起点的最长上升子序列的大小， $g_i$ 来统计以 $i$ 结尾的最长上升子序列的大小。枚举 $a_i , i \in ( 1 , n )$ ，找到每一个 $k$ 使 $a_k &lt; a_i$ 时的 $g_k + f_i$ 最大。</p><p>这样子看来，这个模拟的过程类似于求 $LIS$ （最长上升子序列）的过程。以 $b_i$ 数组存储能够使 $g_i$ 的值为 $i$ 的最小的 $a_i$ 的值。最后我们求到的 $dp$ 位置是第二个区间的左端点，所以最后输出的应该是 $dp+f_{dp}-1$ 的位置。</p><h3 id="Task-Two-AC-Code"><a href="#Task-Two-AC-Code" class="headerlink" title="Task Two AC Code"></a>Task Two AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n,v[MAXN&lt;&lt;<span class="number">2</span>],a[MAXN],g[MAXN],f[MAXN],b[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underBuild</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v[p]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v[p]=<span class="built_in">underMax</span>(v[p],d);</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">underModify</span>(p&lt;&lt;<span class="number">1</span>,l,mid,x,d);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;x) <span class="built_in">underModify</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQuery</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> v[p];</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid&amp;&amp;y&gt;=l) ans=<span class="built_in">underQuery</span>(p&lt;&lt;<span class="number">1</span>,l,mid,x,y);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid&amp;&amp;x&lt;=r) ans=<span class="built_in">underMax</span>(ans,<span class="built_in">underQuery</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> h[MAXN],tot,Max,Dp,t[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">&#125;num[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underWork</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// underRead(n);</span></span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0x7f7f7f7f</span>,<span class="built_in">sizeof</span>(b));</span><br><span class="line">    a[<span class="number">0</span>]=a[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// underRead(a[i]);</span></span><br><span class="line">        a[i]=h[i];</span><br><span class="line">        g[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>]) g[i]=g[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>,dp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[i+<span class="number">1</span>]) f[i]=f[i+<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;<span class="built_in">underMax</span>(f[i],g[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            ans=<span class="built_in">underMax</span>(f[i],g[i]);</span><br><span class="line">            dp=i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*sort(b+1,b+1+n);</span></span><br><span class="line"><span class="comment">    int cnt=unique(b+1,b+1+n)-b-1;</span></span><br><span class="line"><span class="comment">    underBuild(1,1,cnt+1);*/</span></span><br><span class="line">    b[<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n,a[i])-b<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(f[i]+k&gt;ans)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=f[i]+k;</span><br><span class="line">            dp=i;</span><br><span class="line">        &#125;</span><br><span class="line">        b[g[i]]=<span class="built_in">underMin</span>(b[g[i]],a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=n;++i)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int x=lower_bound(b+1,b+1+n,a[i])-b;</span></span><br><span class="line"><span class="comment">        ans=underMax(ans,f[i]+underQuery(1,1,cnt+1,1,x));</span></span><br><span class="line"><span class="comment">        underModify(1,1,cnt+1,x+1,g[i]);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,dp+f[dp]<span class="number">-1</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*inline int underDisc(int x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int l=1,r=tot;</span></span><br><span class="line"><span class="comment">    while(l&lt;r)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int mid=(l+r)&gt;&gt;1;</span></span><br><span class="line"><span class="comment">        if(num[mid].l&lt;=x&amp;&amp;x&lt;=num[mid].r) return mid;</span></span><br><span class="line"><span class="comment">        else if(num[mid].l&gt;x) r=mid;</span></span><br><span class="line"><span class="comment">        else if(num[mid].r&lt;x) l=mid+1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return l;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">inline void underCheck()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    for(int l=1;l&lt;n;++l)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if(Max&gt;=n-l) return ;</span></span><br><span class="line"><span class="comment">        for(int i=2;i&lt;=n-l;++i)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            //i ~ i+l-1</span></span><br><span class="line"><span class="comment">            int u1=i-1,u2=i+l;</span></span><br><span class="line"><span class="comment">            if(t[u1]==t[u2])</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                i=num[t[u2]].r-l;</span></span><br><span class="line"><span class="comment">                continue;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            //i+l=num[t[u2]].r</span></span><br><span class="line"><span class="comment">            if(h[u1]&lt;h[u2])</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                int len=(u1-num[t[u1]].l+1)+(num[t[u2]].r-u2+1);</span></span><br><span class="line"><span class="comment">                if(len&gt;Max) Max=len,Dp=num[t[u2]].r;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;sentry.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;sentry.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(n);</span><br><span class="line">    num[++tot].l=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underRead</span>(h[i]);</span><br><span class="line">        <span class="keyword">if</span>(h[i<span class="number">-1</span>]&gt;=h[i])</span><br><span class="line">        &#123;</span><br><span class="line">            num[tot].r=i<span class="number">-1</span>;</span><br><span class="line">            num[++tot].l=i;</span><br><span class="line">        &#125;</span><br><span class="line">        t[i]=tot;</span><br><span class="line">    &#125;</span><br><span class="line">    num[tot].r=n;</span><br><span class="line">    <span class="keyword">if</span>(tot==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d %d&quot;</span>,n,n,n);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tot==n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1\n1 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> maxn=<span class="number">0</span>,dp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k=num[i].r-num[i].l+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;maxn)</span><br><span class="line">        &#123;</span><br><span class="line">            maxn=k;</span><br><span class="line">            dp=num[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Max=maxn,Dp=dp;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dp);</span><br><span class="line">    <span class="built_in">underWork</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">1 2 3 7 6 4 5 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="题目III——黑客（Hack）"><a href="#题目III——黑客（Hack）" class="headerlink" title="题目III——黑客（Hack）"></a>题目III——黑客（Hack）</h2><h3 id="题目含义"><a href="#题目含义" class="headerlink" title="题目含义"></a>题目含义</h3><p>给定一个有向图，从任意一点出发遍历所有点，删除所有经过的边；再从任意一点出发遍历所有点，如果能达到，求出两次所需的最小权值和。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p><del>说实话，当看到 $n \leq 10 , m \leq 25$ 时我真的以为正解是爆搜</del>。然而测试数据有 $1000$ 套。</p><p>跑一遍最小生成树（建议 $Kruskal$ ），求出这棵树上的必要边（删掉会使原图最小生成树的总权值变大的边）。这些边必在第二棵最小生成树里。枚举必要边在 $A$ 和 $B$ 生成树里的情况，则 $ans = \min ( a + b )$ 。</p><p><del>可惜蒟蒻到最后也没打出来qwq</del></p><h3 id="Task-Three-AC-Code"><a href="#Task-Three-AC-Code" class="headerlink" title="Task Three AC Code"></a>Task Three AC Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">101</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXM=<span class="number">206</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">&#125;Edge[MAXM&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> id[MAXN],b[MAXN],c[MAXN];</span><br><span class="line"><span class="type">int</span> f[MAXN],coun,cnt,num,n,m;</span><br><span class="line"><span class="type">bool</span> vis[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">underCmp</span><span class="params">(Node a,Node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underFind</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(id[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> id[x]=<span class="built_in">underFind</span>(id[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=num=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underInPut</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">underRead</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;Edge[i].u,&amp;Edge[i].v,&amp;Edge[i].w);</span><br><span class="line">    <span class="built_in">sort</span>(Edge+<span class="number">1</span>,Edge+<span class="number">1</span>+m,underCmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underKruskal</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;++i) id[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p1=<span class="built_in">underFind</span>(Edge[i].u),p2=<span class="built_in">underFind</span>(Edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(p1!=p2&amp;!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">1</span>) b[cnt++]=i;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">3</span>) f[coun++]=i;</span><br><span class="line">            ret+=Edge[i].w;</span><br><span class="line">            id[p2]=p1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tp=<span class="built_in">underFind</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(<span class="built_in">underFind</span>(i)!=tp) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underDeal</span><span class="params">(<span class="type">int</span> cd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tp=<span class="number">0</span>,d[MAXN];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;num;++j) <span class="keyword">if</span>(cd&amp;(<span class="number">1</span>&lt;&lt;j)) d[tp++]=c[j];</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tp;++i) vis[d[i]]=<span class="number">1</span>;</span><br><span class="line">    coun=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x1=<span class="built_in">underKruskal</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;coun;++i) vis[f[i]]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tp;++i) vis[d[i]]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x2=<span class="built_in">underKruskal</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> x1+x2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underAns</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=INF) <span class="built_in">printf</span>(<span class="string">&quot;Too young too simple,sometimes naive!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underWork</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=<span class="built_in">underKruskal</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        vis[b[i]]=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> tp=<span class="built_in">underKruskal</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret&lt;tp) c[num++]=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len=<span class="number">1</span>&lt;&lt;num,ans=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i) ans=<span class="built_in">underMin</span>(ans,<span class="built_in">underDeal</span>(i));</span><br><span class="line">    <span class="built_in">underAns</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;hack.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;hack.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">underInit</span>();</span><br><span class="line">        <span class="built_in">underInPut</span>();</span><br><span class="line">        <span class="built_in">underWork</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 2 10</span></span><br><span class="line"><span class="comment">2 1 20</span></span><br><span class="line"><span class="comment">1 2 30</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 2 10</span></span><br><span class="line"><span class="comment">1 2 20</span></span><br><span class="line"><span class="comment">2 3 50</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="题目IV——膜拜大会（fake）"><a href="#题目IV——膜拜大会（fake）" class="headerlink" title="题目IV——膜拜大会（fake）"></a>题目IV——膜拜大会（fake）</h2><p>过于毒瘤，不会qwq</p><p><a href="https://blog.csdn.net/qq_43649416/article/details/101123235">给一个链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 数论 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF451E Devus and Flowers</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/cf451e/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/cf451e/</url>
      
        <content type="html"><![CDATA[<p>数论</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/CF451E">题目传送门</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>用费马小定理推答案，记得卡常和开 $long long$ 。</p><h2 id="AC-Code："><a href="#AC-Code：" class="headerlink" title="AC Code："></a>AC Code：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">21</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll A[MAXN];</span><br><span class="line"><span class="type">int</span> down=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underQmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=(ll)res*a%p;</span><br><span class="line">        a=(ll)a*a%p;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">underC</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> up=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=a;i&gt;a-b;--i) up=i%Mod*up%Mod;</span><br><span class="line">    <span class="keyword">return</span> (ll)up*down%Mod; <span class="comment">//费马小定理</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;DaF.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;DaF.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    ll n,m;</span><br><span class="line">    <span class="built_in">underRead</span>(n),<span class="built_in">underRead</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">underRead</span>(A[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;n;++j) down=(ll)j*down%Mod;</span><br><span class="line">    down=<span class="built_in">underQmi</span>(down,Mod<span class="number">-2</span>,Mod);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll a=n+m<span class="number">-1</span>,b=n<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> sign=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j)</span><br><span class="line">            <span class="keyword">if</span>(i&gt;&gt;j&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sign*=<span class="number">-1</span>;</span><br><span class="line">                a-=A[j]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        res=(res+<span class="built_in">underC</span>(a,b)*sign)%Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(res+Mod)%Mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">1 3 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 费马小定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闫氏DP分析法</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-yan-analysis/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dp-yan-analysis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“所有的 $DP$ 问题，本质上都是有限集中的最值问题”——闫学灿</p></blockquote><span id="more"></span><p><a href="https://www.bilibili.com/video/BV1X741127ZM?from=search&amp;seid=1472099735408379551">原作指路</a></p><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>从<strong>集合</strong>的方式来考虑 $DP$ 的状态。</p><h2 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h2><p> $DP$ 的阶段：状态和状态转移。</p><p> 所以有：<strong>状态表示</strong>和<strong>状态计算</strong>。</p><h2 id="状态表示"><a href="#状态表示" class="headerlink" title="状态表示"></a>状态表示</h2><p>把几个具有相同点的元素合在一起考虑，成为一个状态</p><p>对于一个状态 $F_i$ ，考虑两个角度：</p><p>1.集合： $f(i)$ 表示什么集合</p><p>由于 $F_i$ 表示的是一堆东西(这也是 $DP$ 优于枚举的核心)，我们要考虑这一堆东西的共同特征，如：所有满足某个条件的元素集合。这一点请仔细考虑，到底是大于等于，大于，小于，小于等于，等于……这些的不同会导致状态计算方式的不同</p><p>2.属性： $f(i)$ 的属性</p><p>存的数与集合的关系：如 $max,min,count,sum$ 等。</p><p>很明显， $F_i$ 大多数时候是一个数，代表这个集合的某一个属性，多是最大值、最小值、数量、总和等。题目问什么，属性一般就是什么。</p><h2 id="状态计算"><a href="#状态计算" class="headerlink" title="状态计算"></a>状态计算</h2><p>对于 $F_i$ 所表示的集合，我们将其划分为多个子集。</p><ul><li><p>划分的依据——找最后一个不同点（依题而定，即关键决策）</p></li><li><p>划分之后，根据其子集求 $F_i$ 的值。 </p></li><li><p>举例：当属性为 $max$ 时， $F_i=max($ 子集的 $max)$ ，当属性为 $count$ 时， $F_i=\sum($ 子集的 $count)$ 等。</p></li></ul><h2 id="其他链接"><a href="#其他链接" class="headerlink" title="其他链接"></a>其他链接</h2><p><a href="https://www.cnblogs.com/IzayoiMiku/p/13635809.html">IzayoiMiku</a></p><p><a href="https://blog.csdn.net/weixin_44289697/article/details/105125613">XinyueRao</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/406072/">AcWing</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 数论 </tag>
            
            <tag> 分析法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/matrix/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/matrix/</url>
      
        <content type="html"><![CDATA[<p>“我们的结合，拥有着我们的一部分”</p><span id="more"></span><h2 id="矩阵："><a href="#矩阵：" class="headerlink" title="矩阵："></a>矩阵：</h2><p>矩阵(Matrix)是指一个按照长方阵列排列的集合。一个由 $n$ 行 $m$ 列个数字排列的列表称为“ $m$ 行 $n$ 列”的矩阵，简称 $n*m$ 矩阵，记作：<br>$\begin{Bmatrix}<br>a_1&amp;a_2&amp;a_3&amp;…&amp;a_m\\<br>a_{m+1}&amp;…&amp;…&amp;…&amp;a_{2m}\\<br>…&amp;…&amp;…&amp;…&amp;…\\<br>a_{m(n-1)+1}&amp;…&amp;…&amp;…&amp;a_{nm}<br>\end{Bmatrix}$</p><h2 id="矩阵加法-减法："><a href="#矩阵加法-减法：" class="headerlink" title="矩阵加法/减法："></a>矩阵加法/减法：</h2><p>令 $A,B$ 都是 $n*m$ 矩阵，则 $A+B=C$ ，满足：</p><p>$C=\begin{Bmatrix}<br>a_1+b_1&amp;a_2+b_2&amp;a_3+b_3&amp;…&amp;a_m+b_m\\<br>a_{m+1}+b_{m+1}&amp;…&amp;…&amp;…&amp;a_{2m}+b_{2m}\\<br>…&amp;…&amp;…&amp;…&amp;…\\<br>a_{m(n-1)+1}+b_{m(n-1)+1}&amp;…&amp;…&amp;…&amp;a_{nm}+b_{nm}<br>\end{Bmatrix}$</p><p>简单来说，即 $C_{i,j}=A_{i,j}+B_{i,j}$ ，减法同理。</p><h2 id="矩阵乘法："><a href="#矩阵乘法：" class="headerlink" title="矩阵乘法："></a>矩阵乘法：</h2><p>$A<em>B=C$ 满足 $C_{i,j}=\sum_{k=1}^{n}{A_{i,k}</em>B_{k,j}}$</p><p>矩阵乘法能够实现，仅当 $A$ 的行数与 $B$ 的列数相等时。</p><p><strong>举个栗子：</strong></p><p>$A=\begin{Bmatrix}1&amp;2&amp;3\\1&amp;2&amp;3\\\end{Bmatrix}$ ， $B=\begin{Bmatrix}3&amp;2\\1&amp;3\\2&amp;1\\\end{Bmatrix}$</p><p>那么对于 $C=A<em>B$ ，则 $C_{1,1}=A_{1,1}</em>B_{1,1}+A_{1,2}<em>B_{2,1}+A_{1,3}</em>B_{3,1}$ </p><p>简单来讲就是 $C_{1,1}=\sum_{k=1}^{n=3}{A_{1,k}}*\sum_{k=1}^{m=3}{B_{k,1}}$</p><p>那么矩阵乘法的代码实现即是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line">            c[i][j]+=a[i][k]*b[k][j];</span><br></pre></td></tr></table></figure><h2 id="矩阵快速幂："><a href="#矩阵快速幂：" class="headerlink" title="矩阵快速幂："></a>矩阵快速幂：</h2><p>对于一个矩阵 $G$ 来说， $G^k$ 中 $G_{i,j}$ 的含义为从 $i$ 走到 $j$ 步数为 $k$ 的方案数。</p><p>不用理解太多，就是用矩阵实现快速幂即可，将数乘换成矩阵乘法（<del>蒟蒻改了一下午，才发现把 $i$ 打成了 $j$</del>）</p><p><a href="https://www.luogu.com.cn/problem/P3390">LuoguP3390</a></p><h3 id="AC-Code："><a href="#AC-Code：" class="headerlink" title="AC Code："></a>AC Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> ll p=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">101</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll n,k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    ll m[N][N];             <span class="comment">// 记得开long long</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Matrix <span class="title">underCalc</span><span class="params">(Matrix a,Matrix b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix res;</span><br><span class="line">    <span class="built_in">memset</span>(res.m,<span class="number">0</span>,<span class="built_in">sizeof</span>(res.m));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=n;++l)</span><br><span class="line">                res.m[i][j]=(res.m[i][j]+(a.m[i][l]*b.m[l][j])%p)%p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">Matrix a;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underExpr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix temp;</span><br><span class="line">    <span class="built_in">memset</span>(temp.m,<span class="number">0</span>,<span class="built_in">sizeof</span>(temp.m));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) temp.m[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) temp=<span class="built_in">underCalc</span>(a,temp);</span><br><span class="line">        a=<span class="built_in">underCalc</span>(a,a);</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,temp.m[i][j]%p);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;matrix.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;matrix.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a.m[i][j]);</span><br><span class="line">    <span class="built_in">underExpr</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 矩阵快速幂，矩阵乘法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2022.01.26模拟赛</title>
      <link href="/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220126/"/>
      <url>/Eternity/%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%AF%94%E8%B5%9B/20220126/</url>
      
        <content type="html"><![CDATA[<p>无论哪个学科，最难的部分永远是数学</p><span id="more"></span><h2 id="题目I——集合均值-mos"><a href="#题目I——集合均值-mos" class="headerlink" title="题目I——集合均值(mos)"></a>题目I——集合均值(mos)</h2><blockquote><p>MOS=Mean Of Set</p></blockquote><p>一道完美的数学题，指不推公式你完全不知道它居然求的是**<del>（暂且保密）</del>。</p><p>因为每一次都需要从B中随机一个数，那么第一次取到了 $a_i$ 的话，求到的 $ans$ 应该加上 $\frac{a_i}{2}$ ，以此类推，当第二次取到了 $a_j$ 的时候，求到了 $ans$ 就取到 $\frac{a_i+a_j}{3}$ ，然后继续计算，我们会发现 $B$ 中的所有数对最终答案的贡献系数都是一样的，并且其贡献系数与其在 $B$ 中的位置没有关系，只会和 $B$ 的大小有关系，然后继续推算，答案就<del>显而易见</del>了：<br>$ans=f(|B|)\sum_{x\in B}{a_x}$</p><p>那么现在的问题就在于求出 $f(i)$ 了，我们可以模拟从 $B$ 移动到 $A$ 的过程，花费 $O{m}$ 的时间，这也是 $40pt$ 的做法。然而这道题的关键在于：我们最后求出的期望值是一个有理数 $frac{a}{b}$ ，所以我们需要进行<a href="https://www.luogu.com.cn/problem/P2613">有理数取余</a>，而进行<strong>逆元</strong>操作。（逆元便是这道题的正解）</p><h3 id="怎么想到使用逆元的："><a href="#怎么想到使用逆元的：" class="headerlink" title="怎么想到使用逆元的："></a>怎么想到使用逆元的：</h3><p>首先，我们已经推出了 $ans=f(|B|)\sum_{x\in B}{a}$ ，设 $i$ 为当前 $A$ ，即已经已过去了的数的个数，那么 $|B|=\frac{i-1}{i}$ 了。我们需要在计算的过程中取模，也就自然想到使用逆元了。<del>（虽然考的时候完全没有想到）</del></p><p>具体来说：</p><ul><li>暴力模拟求逆元可得 $70pt$</li><li>线性求逆元可得 $100pt$</li><li>事实上，我们需要的也是这些逆元的和即可，根据原作者的话来说，会有一种<del>强力的</del>的多项式<del>高科技</del>能使求逆元的复杂度达到 $O(\sqrt{nm}\log{nm})$ 。但在这道题来说($n<em>m ≦ 2</em>10^7$)，线性求逆元已经完全足够了。</li></ul><h2 id="Task-One-Ac-Code"><a href="#Task-One-Ac-Code" class="headerlink" title="Task One Ac Code:"></a>Task One Ac Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">2e7</span>+<span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> ll Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,x,Num[MAXN],Sum,Inv[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;mos.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;mos.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(n),<span class="built_in">underRead</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">underRead</span>(Num[i]),Sum+=Num[i];</span><br><span class="line">    Sum%=Mod;</span><br><span class="line">    Sum=(Sum*m)%Mod;</span><br><span class="line">    Inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n*m+<span class="number">1</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Inv[i]=(Mod-Mod/i)*Inv[Mod%i]%Mod;</span><br><span class="line">        x=(x+(i<span class="number">-1</span>)*Inv[i])%Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    x=(x*Inv[n*m])%Mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Sum*x%Mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="题目II——聚烷撑乙二醇-pag"><a href="#题目II——聚烷撑乙二醇-pag" class="headerlink" title="题目II——聚烷撑乙二醇(pag)"></a>题目II——聚烷撑乙二醇(pag)</h2><blockquote><p>PAG=Play A Game</p></blockquote><p><del>做题最大的收获是知道了 $PAG$ 是聚烷撑乙二醇的意思</del></p><h3 id="题目含义："><a href="#题目含义：" class="headerlink" title="题目含义："></a>题目含义：</h3><p>鲁迅曾经说过，要多去尝试，才能最终发现最优的答案。</p><p>鲁迅也还说过，要珍惜当下，把握住眼前的机会。</p><p>有 $n$ 个随机数生成器，第 $i$ 个生成器可以均匀随机地生成 $[L_i,R_i]$ 内的一个实数。</p><p>现在你要玩个游戏，从第 $1$ 个生成器到第 $n$ 个生成器，每次当前生成器会生成一个数，你需要选择：</p><ul><li><p>相信鲁迅，拿走这个数，游戏结束。</p></li><li><p>相信鲁迅，放弃这个数和这个生成器，使用下一个生成器（前提是下一个生成器必须存在）。</p></li></ul><p>求使用使得期望答案最大的策略时，期望答案是多少。</p><p><del><strong>很玄学的题意和标题</strong></del></p><h3 id="思路详解："><a href="#思路详解：" class="headerlink" title="思路详解："></a>思路详解：</h3><p>其实想明白后十分简单，主要是想到这道题到底是怎样操作的。假设现在我们到了第 $i$ 的随机数生成器，第二个生成器产生的数的期望是 $Y=\frac{L_{i+1}+R_{i+1}}{2}$ 。如果第 $i$ 个生成器产生了 $X$ ，当 $X&lt;Y$ 时，我们当然放弃 $X$ 更优，反之则取出 $X$ 。</p><p>那我们将 $i$ 与 $i+1$ 扩展到 $1$ 到 $n$ 的思路。对于每一组来说，我们都这样来扩展答案，就可以得到下面的算式：</p><blockquote><p>当 $ans&lt;L_i$ 时 $ans=\frac{L_i+R_i}{2}$</p><p>当 $L_i&lt;ans&lt;R_i$ 时 $ans=\frac{ans<em>(ans-L_i)+\frac{ans+R_i}{2}</em>(R_i-ans)}{R_i-L_i}$</p><p>否则， $ans=ans$ ，当然，这步不用在代码里体现。</p></blockquote><p>明白这件事之后，还有一个需要注意的，那就是：</p><p><strong>我们在扩展答案是应该从 $N$ 到 $1$ 扩展：</strong></p><p>因为我们只有在知道了 $i+1$ 的区间之后才能知道第 $i$ 个到底取不取。</p><h2 id="Task-Two-Ac-Code："><a href="#Task-Two-Ac-Code：" class="headerlink" title="Task Two Ac Code："></a>Task Two Ac Code：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gh() getchar()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMax(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> underMin(x,y) ((x)&lt;(y)?(x):(y))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">double</span> ld;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underRead</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">gh</span>(),t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) t|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">gh</span>();</span><br><span class="line">    <span class="keyword">if</span>(t) x=-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,l[MAXN],r[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;pag.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;pag.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">underRead</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l[i],&amp;r[i]);</span><br><span class="line">ld ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L=l[i],R=r[i];</span><br><span class="line"><span class="keyword">if</span>(ans&lt;L) ans=<span class="built_in">ld</span>(L+R)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans&lt;R) ans=(ans*(ans-L)+(R+ans)/<span class="number">2</span>*(R-ans))/(R-L);</span><br><span class="line"><span class="comment">// else ans=ans;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.5Lf&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 模拟赛/比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 质数 </tag>
            
            <tag> 费马小定理 </tag>
            
            <tag> 概率论 </tag>
            
            <tag> 期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1144 最短路计数</title>
      <link href="/Eternity/%E9%A2%98%E8%A7%A3/p1144/"/>
      <url>/Eternity/%E9%A2%98%E8%A7%A3/p1144/</url>
      
        <content type="html"><![CDATA[<p>最短路计数</p><span id="more"></span><h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p><a href="https://www.luogu.com.cn/problem/P1144">最短路计数</a></p><h3 id="题目概述-amp-解题思路："><a href="#题目概述-amp-解题思路：" class="headerlink" title="题目概述&amp;解题思路："></a>题目概述&amp;解题思路：</h3><p>字面意思，不多做解释。求出所有的最短路个数，对 $10^6+3$  取模。当然，如果起点到编号为 $i$ 的点不连通当然数目就为0啦。</p><p>对于简单的思路，那就是跑出最短路，再跑一遍遍历，看有多少种情况能够走到 $i$ 点，然后统计。但是这样是绝对会超时的</p><p>对于 $100%$ 的数据, $N ≦ 1000000,M ≦ 2000000$ .所以我们应该选择 <del>SPFA</del> ，啊对，就是选择SPFA，<del>有些算法死了，它还活着</del>。</p><p>我们可以用一个数组 $AnsL$ 来存储从 $1$ 号点到第 $i$ 号点的最短路个数，然后一边跑 $SPFA$ 一边修改 $AnsL$ 的值，即当我们当前从 $u$ 点跑到了 $v$ 点的话费与 $Dist_v$ 的值相同时，那么现在是一条目前找到的最短路（之后可能会存在更短路），那么就有：</p><blockquote><p>$Ans_v=Ans_u+1$</p></blockquote><p>的推导公式。</p><p>而如果我们找到了更短路，那就把当前点的计数清零。从 $u$ 点出发到的 $v$ 点的路即是最短路（目前），则传递答案为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dist[v]=Dist[u]+<span class="number">1</span>;</span><br><span class="line">Ans[v]=AnsL[v]=Ans[u];</span><br></pre></td></tr></table></figure><p>这就是两种传递的方式，也就是本题最关键的代码核心。</p><p>其他的注意事项则在代码里体现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">int</span> N,M,x,y,Cnt;</span><br><span class="line"><span class="type">int</span> Dis[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">bool</span> Vis[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> Ans[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> AnsL[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> First[<span class="number">1000001</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> To,Next;</span><br><span class="line">&#125;Edge[<span class="number">2000001</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">SPFA</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Dis[x]=<span class="number">0</span>;</span><br><span class="line">Vis[x]=<span class="number">1</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">Q.<span class="built_in">push</span>(x);</span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=Q.<span class="built_in">front</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> e=First[u];e;e=Edge[e].Next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Now=Edge[e].To;</span><br><span class="line"><span class="keyword">if</span>(Dis[Now]&gt;Dis[u]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Dis[Now]=Dis[u]+<span class="number">1</span>;</span><br><span class="line">Ans[Now]=AnsL[Now]=Ans[u]%<span class="number">100003</span>;</span><br><span class="line"><span class="keyword">if</span>(!Vis[Now])</span><br><span class="line">&#123;</span><br><span class="line">Vis[Now]=<span class="number">1</span>;</span><br><span class="line">Q.<span class="built_in">push</span>(Now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Dis[Now]==Dis[u]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">AnsL[Now]=(AnsL[Now]+Ans[u])%<span class="number">100003</span>;</span><br><span class="line">Ans[Now]=(Ans[Now]+Ans[u])%<span class="number">100003</span>;</span><br><span class="line"><span class="keyword">if</span>(!Vis[Now])</span><br><span class="line">&#123;</span><br><span class="line">Vis[Now]=<span class="number">1</span>;</span><br><span class="line">Q.<span class="built_in">push</span>(Now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Ans[u]=<span class="number">0</span>;</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">Vis[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">Edge[++Cnt].To=y;</span><br><span class="line">Edge[Cnt].Next=First[x];</span><br><span class="line">First[x]=Cnt;</span><br><span class="line">Edge[++Cnt].To=x;</span><br><span class="line">Edge[Cnt].Next=First[y];</span><br><span class="line">First[y]=Cnt;</span><br><span class="line">&#125;</span><br><span class="line">AnsL[<span class="number">1</span>]=Ans[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line">Dis[i]=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">SPFA</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,AnsL[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 7</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> SPFA </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/segment-tree/"/>
      <url>/Eternity/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/segment-tree/</url>
      
        <content type="html"><![CDATA[<p>“我一步一步走向深处，寻找你的身影，又将你拉回——我们的起点”</p><span id="more"></span><p>线段树是用来维护区间权值的一种数据结构，根据同机房巨佬而言，一般需要使用线段树的题考点都不在线段树上，<del>不过线段树真滴好用</del></p><hr><h2 id="线段树的操作："><a href="#线段树的操作：" class="headerlink" title="线段树的操作："></a>线段树的操作：</h2><h2 id="Ⅰ-建树"><a href="#Ⅰ-建树" class="headerlink" title="Ⅰ.建树"></a>Ⅰ.建树</h2><p>我的习惯为使用结构体存储（就和链式前向星一样），也可以分开打：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r,dat;</span><br><span class="line"><span class="comment">//int tag;</span></span><br><span class="line">&#125;Tree[N&lt;&lt;<span class="number">2</span>];</span><br></pre></td></tr></table></figure><br>一般来说，线段树的数组需要开四倍 $N$ 空间，因为他比线性结构要多一层，而开四倍一般不会爆。</p><h3 id="代码讲解："><a href="#代码讲解：" class="headerlink" title="代码讲解："></a>代码讲解：</h3><p>对于其中之一 $Tree[p]$ 中：</p><p>$l$ 表示第p个编号所表示的区域起点为原线性结构的 $A_l$ ；</p><p>$r$ 表示第p个编号所表示的区域终点为原线性结构的 $A_r$ ；</p><p>子节点保证： $l=r$ ；</p><p>$dat$ 表示该区域的一个数据，一般视题目而定，且 $dat$ 的个数也不定。</p><p>$tag$ 可有也可不有（如果是区间修改的题一般都有），表示“懒惰标记”，之后详解。</p><p>$p$ 结点的子结点为 $p<em>2$ 和 $p</em>2+1$ ，一般在代码中写为 $p&lt;&lt;1$ 和 $p&lt;&lt;1|1$ 来节约时间（因为位运算时间复杂度＜乘法复杂度）</p><h3 id="建树一般使用递归建树："><a href="#建树一般使用递归建树：" class="headerlink" title="建树一般使用递归建树："></a>建树一般使用递归建树：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underBuild</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree[p].l=l;</span><br><span class="line">    Tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="comment">//到达子结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].dat=Val[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    <span class="built_in">underBuild</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">underPushUp</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ⅱ-查询"><a href="#Ⅱ-查询" class="headerlink" title="Ⅱ.查询"></a>Ⅱ.查询</h2><p><strong>以查询该区间权值和为例：</strong></p><p>如果该结点在需要查询的区间内，返回该点权值；</p><p>如果不在搜索子结点，如果需要的 $l$ 比该结点的 $mid$ 小，则搜索 $(l,mid)$；如果需要的 $r$ 比该结点的 $mid$ 大，则搜索$(mid+1,r)$。 </p><p>具体操作看函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">underQuery</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].l&gt;=l&amp;&amp;r&gt;=Tree[p].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Tree[p].dat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underSpread</span>(p);<span class="comment">//区间修改的操作，之后详解</span></span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=<span class="built_in">underQuery</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        val+=<span class="built_in">underQuery</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ⅲ-单点修改"><a href="#Ⅲ-单点修改" class="headerlink" title="Ⅲ.单点修改"></a>Ⅲ.单点修改</h2><p>找到该点的编号，从下至上修改它的所有父结点直到，依然使用递归操作。</p><p><strong>$dat$ 存储该区间的区间和</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underChange</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> v,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].l==v&amp;&amp;Tree[p].r==v)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].dat=k;<span class="comment">//到达子结点后修改dat值</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(v&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underChange</span>(p&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underChange</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">    &#125;</span><br><span class="line">    Tree[p].dat=Tree[p&lt;&lt;<span class="number">1</span>].dat+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ⅳ-向上传递（pushup）"><a href="#Ⅳ-向上传递（pushup）" class="headerlink" title="Ⅳ.向上传递（pushup）"></a>Ⅳ.向上传递（pushup）</h2><p>即函数underPushUp，一般都是视题目而定。</p><p><strong>以区间和为例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underPushUp</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Tree[p].dat=Tree[p&lt;&lt;<span class="number">1</span>].dat+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>似乎这个例子没什么说服力</del>，不过的确是这样的。</p><h2 id="Ⅴ-向下传递（pushdown-spread）"><a href="#Ⅴ-向下传递（pushdown-spread）" class="headerlink" title="Ⅴ.向下传递（pushdown/spread）"></a>Ⅴ.向下传递（pushdown/spread）</h2><p>只限于懒惰标记。当我们需要改变该区间中的子区间才会向下传递，这样可以优化时间，否则每一次区间修改都会花费 $O(N)$ 的时间复杂度。</p><p><strong>依然以区间和为例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underSpread</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tree[p].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].dat+=Tree[p].tag*(Tree[p&lt;&lt;<span class="number">1</span>].r-Tree[p&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat+=Tree[p].tag*(Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>].tag+=Tree[p].tag;</span><br><span class="line">        Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag+=Tree[p].tag;</span><br><span class="line">        Tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ⅵ-区间修改"><a href="#Ⅵ-区间修改" class="headerlink" title="Ⅵ.区间修改"></a>Ⅵ.区间修改</h2><p>使用懒惰标记，可以让时间复杂度降到 $O(logN)$ 。</p><p><strong>依然以区间和为例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">underModify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=Tree[p].l&amp;&amp;Tree[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[p].dat+=k*(Tree[p].r-Tree[p].l+<span class="number">1</span>);</span><br><span class="line">        Tree[p].tag+=k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">underSpread</span>(p);</span><br><span class="line">    <span class="type">int</span> mid=(Tree[p].l+Tree[p].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underModify</span>(p&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">underModify</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">    &#125;</span><br><span class="line">    Tree[p].dat=Tree[p&lt;&lt;<span class="number">1</span>].dat+Tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些练习"><a href="#一些练习" class="headerlink" title="一些练习"></a>一些练习</h2><p><a href="https://www.luogu.com.cn/problem/P3372">区间修改区间查找模板题</a></p><p><a href="https://www.luogu.com.cn/problem/P4513">区间最大子段和模板题</a></p><p><a href="https://www.luogu.com.cn/problem/P2574">P2574 XOR的艺术</a></p><p><a href="https://www.luogu.com.cn/problem/P6327">区间求sin和，需要使用数学知识</a></p><p><a href="https://www.luogu.com.cn/problem/P5648">卡常卡码风的毒瘤题</a></p><p>头图来源：<br><a href="https://space.bilibili.com/53456/?spm_id_from=333.999.0.0">Warma</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMQ </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
